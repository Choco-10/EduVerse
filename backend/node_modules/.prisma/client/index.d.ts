
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model classes
 * 
 */
export type classes = $Result.DefaultSelection<Prisma.$classesPayload>
/**
 * Model subjects
 * 
 */
export type subjects = $Result.DefaultSelection<Prisma.$subjectsPayload>
/**
 * Model question_banks
 * 
 */
export type question_banks = $Result.DefaultSelection<Prisma.$question_banksPayload>
/**
 * Model questions
 * 
 */
export type questions = $Result.DefaultSelection<Prisma.$questionsPayload>
/**
 * Model quizzes
 * 
 */
export type quizzes = $Result.DefaultSelection<Prisma.$quizzesPayload>
/**
 * Model quiz_questions
 * 
 */
export type quiz_questions = $Result.DefaultSelection<Prisma.$quiz_questionsPayload>
/**
 * Model student_quizzes
 * 
 */
export type student_quizzes = $Result.DefaultSelection<Prisma.$student_quizzesPayload>
/**
 * Model assignments
 * 
 */
export type assignments = $Result.DefaultSelection<Prisma.$assignmentsPayload>
/**
 * Model student_assignments
 * 
 */
export type student_assignments = $Result.DefaultSelection<Prisma.$student_assignmentsPayload>
/**
 * Model weekly_schedules
 * 
 */
export type weekly_schedules = $Result.DefaultSelection<Prisma.$weekly_schedulesPayload>
/**
 * Model study_timetables
 * 
 */
export type study_timetables = $Result.DefaultSelection<Prisma.$study_timetablesPayload>
/**
 * Model scores
 * 
 */
export type scores = $Result.DefaultSelection<Prisma.$scoresPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classes`: Exposes CRUD operations for the **classes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.classes.findMany()
    * ```
    */
  get classes(): Prisma.classesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subjects`: Exposes CRUD operations for the **subjects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subjects.findMany()
    * ```
    */
  get subjects(): Prisma.subjectsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question_banks`: Exposes CRUD operations for the **question_banks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Question_banks
    * const question_banks = await prisma.question_banks.findMany()
    * ```
    */
  get question_banks(): Prisma.question_banksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quizzes`: Exposes CRUD operations for the **quizzes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quizzes.findMany()
    * ```
    */
  get quizzes(): Prisma.quizzesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quiz_questions`: Exposes CRUD operations for the **quiz_questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quiz_questions
    * const quiz_questions = await prisma.quiz_questions.findMany()
    * ```
    */
  get quiz_questions(): Prisma.quiz_questionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student_quizzes`: Exposes CRUD operations for the **student_quizzes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student_quizzes
    * const student_quizzes = await prisma.student_quizzes.findMany()
    * ```
    */
  get student_quizzes(): Prisma.student_quizzesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignments`: Exposes CRUD operations for the **assignments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignments.findMany()
    * ```
    */
  get assignments(): Prisma.assignmentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student_assignments`: Exposes CRUD operations for the **student_assignments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student_assignments
    * const student_assignments = await prisma.student_assignments.findMany()
    * ```
    */
  get student_assignments(): Prisma.student_assignmentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.weekly_schedules`: Exposes CRUD operations for the **weekly_schedules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weekly_schedules
    * const weekly_schedules = await prisma.weekly_schedules.findMany()
    * ```
    */
  get weekly_schedules(): Prisma.weekly_schedulesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.study_timetables`: Exposes CRUD operations for the **study_timetables** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Study_timetables
    * const study_timetables = await prisma.study_timetables.findMany()
    * ```
    */
  get study_timetables(): Prisma.study_timetablesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scores`: Exposes CRUD operations for the **scores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scores
    * const scores = await prisma.scores.findMany()
    * ```
    */
  get scores(): Prisma.scoresDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    classes: 'classes',
    subjects: 'subjects',
    question_banks: 'question_banks',
    questions: 'questions',
    quizzes: 'quizzes',
    quiz_questions: 'quiz_questions',
    student_quizzes: 'student_quizzes',
    assignments: 'assignments',
    student_assignments: 'student_assignments',
    weekly_schedules: 'weekly_schedules',
    study_timetables: 'study_timetables',
    scores: 'scores'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "classes" | "subjects" | "question_banks" | "questions" | "quizzes" | "quiz_questions" | "student_quizzes" | "assignments" | "student_assignments" | "weekly_schedules" | "study_timetables" | "scores"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      classes: {
        payload: Prisma.$classesPayload<ExtArgs>
        fields: Prisma.classesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.classesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.classesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          findFirst: {
            args: Prisma.classesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.classesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          findMany: {
            args: Prisma.classesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          create: {
            args: Prisma.classesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          createMany: {
            args: Prisma.classesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.classesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          delete: {
            args: Prisma.classesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          update: {
            args: Prisma.classesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          deleteMany: {
            args: Prisma.classesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.classesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.classesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          upsert: {
            args: Prisma.classesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          aggregate: {
            args: Prisma.ClassesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClasses>
          }
          groupBy: {
            args: Prisma.classesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassesGroupByOutputType>[]
          }
          count: {
            args: Prisma.classesCountArgs<ExtArgs>
            result: $Utils.Optional<ClassesCountAggregateOutputType> | number
          }
        }
      }
      subjects: {
        payload: Prisma.$subjectsPayload<ExtArgs>
        fields: Prisma.subjectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subjectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subjectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          findFirst: {
            args: Prisma.subjectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subjectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          findMany: {
            args: Prisma.subjectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>[]
          }
          create: {
            args: Prisma.subjectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          createMany: {
            args: Prisma.subjectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.subjectsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>[]
          }
          delete: {
            args: Prisma.subjectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          update: {
            args: Prisma.subjectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          deleteMany: {
            args: Prisma.subjectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.subjectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.subjectsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>[]
          }
          upsert: {
            args: Prisma.subjectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subjectsPayload>
          }
          aggregate: {
            args: Prisma.SubjectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubjects>
          }
          groupBy: {
            args: Prisma.subjectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.subjectsCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectsCountAggregateOutputType> | number
          }
        }
      }
      question_banks: {
        payload: Prisma.$question_banksPayload<ExtArgs>
        fields: Prisma.question_banksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.question_banksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.question_banksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>
          }
          findFirst: {
            args: Prisma.question_banksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.question_banksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>
          }
          findMany: {
            args: Prisma.question_banksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>[]
          }
          create: {
            args: Prisma.question_banksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>
          }
          createMany: {
            args: Prisma.question_banksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.question_banksCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>[]
          }
          delete: {
            args: Prisma.question_banksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>
          }
          update: {
            args: Prisma.question_banksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>
          }
          deleteMany: {
            args: Prisma.question_banksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.question_banksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.question_banksUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>[]
          }
          upsert: {
            args: Prisma.question_banksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$question_banksPayload>
          }
          aggregate: {
            args: Prisma.Question_banksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion_banks>
          }
          groupBy: {
            args: Prisma.question_banksGroupByArgs<ExtArgs>
            result: $Utils.Optional<Question_banksGroupByOutputType>[]
          }
          count: {
            args: Prisma.question_banksCountArgs<ExtArgs>
            result: $Utils.Optional<Question_banksCountAggregateOutputType> | number
          }
        }
      }
      questions: {
        payload: Prisma.$questionsPayload<ExtArgs>
        fields: Prisma.questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findFirst: {
            args: Prisma.questionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findMany: {
            args: Prisma.questionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          create: {
            args: Prisma.questionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          createMany: {
            args: Prisma.questionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.questionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          delete: {
            args: Prisma.questionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          update: {
            args: Prisma.questionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          deleteMany: {
            args: Prisma.questionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.questionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.questionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          upsert: {
            args: Prisma.questionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.questionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionsCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      quizzes: {
        payload: Prisma.$quizzesPayload<ExtArgs>
        fields: Prisma.quizzesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.quizzesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.quizzesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          findFirst: {
            args: Prisma.quizzesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.quizzesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          findMany: {
            args: Prisma.quizzesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>[]
          }
          create: {
            args: Prisma.quizzesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          createMany: {
            args: Prisma.quizzesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.quizzesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>[]
          }
          delete: {
            args: Prisma.quizzesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          update: {
            args: Prisma.quizzesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          deleteMany: {
            args: Prisma.quizzesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.quizzesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.quizzesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>[]
          }
          upsert: {
            args: Prisma.quizzesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quizzesPayload>
          }
          aggregate: {
            args: Prisma.QuizzesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuizzes>
          }
          groupBy: {
            args: Prisma.quizzesGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizzesGroupByOutputType>[]
          }
          count: {
            args: Prisma.quizzesCountArgs<ExtArgs>
            result: $Utils.Optional<QuizzesCountAggregateOutputType> | number
          }
        }
      }
      quiz_questions: {
        payload: Prisma.$quiz_questionsPayload<ExtArgs>
        fields: Prisma.quiz_questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.quiz_questionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.quiz_questionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>
          }
          findFirst: {
            args: Prisma.quiz_questionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.quiz_questionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>
          }
          findMany: {
            args: Prisma.quiz_questionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>[]
          }
          create: {
            args: Prisma.quiz_questionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>
          }
          createMany: {
            args: Prisma.quiz_questionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.quiz_questionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>[]
          }
          delete: {
            args: Prisma.quiz_questionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>
          }
          update: {
            args: Prisma.quiz_questionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>
          }
          deleteMany: {
            args: Prisma.quiz_questionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.quiz_questionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.quiz_questionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>[]
          }
          upsert: {
            args: Prisma.quiz_questionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$quiz_questionsPayload>
          }
          aggregate: {
            args: Prisma.Quiz_questionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuiz_questions>
          }
          groupBy: {
            args: Prisma.quiz_questionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Quiz_questionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.quiz_questionsCountArgs<ExtArgs>
            result: $Utils.Optional<Quiz_questionsCountAggregateOutputType> | number
          }
        }
      }
      student_quizzes: {
        payload: Prisma.$student_quizzesPayload<ExtArgs>
        fields: Prisma.student_quizzesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.student_quizzesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.student_quizzesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>
          }
          findFirst: {
            args: Prisma.student_quizzesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.student_quizzesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>
          }
          findMany: {
            args: Prisma.student_quizzesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>[]
          }
          create: {
            args: Prisma.student_quizzesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>
          }
          createMany: {
            args: Prisma.student_quizzesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.student_quizzesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>[]
          }
          delete: {
            args: Prisma.student_quizzesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>
          }
          update: {
            args: Prisma.student_quizzesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>
          }
          deleteMany: {
            args: Prisma.student_quizzesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.student_quizzesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.student_quizzesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>[]
          }
          upsert: {
            args: Prisma.student_quizzesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_quizzesPayload>
          }
          aggregate: {
            args: Prisma.Student_quizzesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent_quizzes>
          }
          groupBy: {
            args: Prisma.student_quizzesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Student_quizzesGroupByOutputType>[]
          }
          count: {
            args: Prisma.student_quizzesCountArgs<ExtArgs>
            result: $Utils.Optional<Student_quizzesCountAggregateOutputType> | number
          }
        }
      }
      assignments: {
        payload: Prisma.$assignmentsPayload<ExtArgs>
        fields: Prisma.assignmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.assignmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.assignmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          findFirst: {
            args: Prisma.assignmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.assignmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          findMany: {
            args: Prisma.assignmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>[]
          }
          create: {
            args: Prisma.assignmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          createMany: {
            args: Prisma.assignmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.assignmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>[]
          }
          delete: {
            args: Prisma.assignmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          update: {
            args: Prisma.assignmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          deleteMany: {
            args: Prisma.assignmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.assignmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.assignmentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>[]
          }
          upsert: {
            args: Prisma.assignmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$assignmentsPayload>
          }
          aggregate: {
            args: Prisma.AssignmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignments>
          }
          groupBy: {
            args: Prisma.assignmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.assignmentsCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentsCountAggregateOutputType> | number
          }
        }
      }
      student_assignments: {
        payload: Prisma.$student_assignmentsPayload<ExtArgs>
        fields: Prisma.student_assignmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.student_assignmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.student_assignmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>
          }
          findFirst: {
            args: Prisma.student_assignmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.student_assignmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>
          }
          findMany: {
            args: Prisma.student_assignmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>[]
          }
          create: {
            args: Prisma.student_assignmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>
          }
          createMany: {
            args: Prisma.student_assignmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.student_assignmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>[]
          }
          delete: {
            args: Prisma.student_assignmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>
          }
          update: {
            args: Prisma.student_assignmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>
          }
          deleteMany: {
            args: Prisma.student_assignmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.student_assignmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.student_assignmentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>[]
          }
          upsert: {
            args: Prisma.student_assignmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$student_assignmentsPayload>
          }
          aggregate: {
            args: Prisma.Student_assignmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent_assignments>
          }
          groupBy: {
            args: Prisma.student_assignmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Student_assignmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.student_assignmentsCountArgs<ExtArgs>
            result: $Utils.Optional<Student_assignmentsCountAggregateOutputType> | number
          }
        }
      }
      weekly_schedules: {
        payload: Prisma.$weekly_schedulesPayload<ExtArgs>
        fields: Prisma.weekly_schedulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.weekly_schedulesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.weekly_schedulesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>
          }
          findFirst: {
            args: Prisma.weekly_schedulesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.weekly_schedulesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>
          }
          findMany: {
            args: Prisma.weekly_schedulesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>[]
          }
          create: {
            args: Prisma.weekly_schedulesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>
          }
          createMany: {
            args: Prisma.weekly_schedulesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.weekly_schedulesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>[]
          }
          delete: {
            args: Prisma.weekly_schedulesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>
          }
          update: {
            args: Prisma.weekly_schedulesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>
          }
          deleteMany: {
            args: Prisma.weekly_schedulesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.weekly_schedulesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.weekly_schedulesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>[]
          }
          upsert: {
            args: Prisma.weekly_schedulesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weekly_schedulesPayload>
          }
          aggregate: {
            args: Prisma.Weekly_schedulesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeekly_schedules>
          }
          groupBy: {
            args: Prisma.weekly_schedulesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Weekly_schedulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.weekly_schedulesCountArgs<ExtArgs>
            result: $Utils.Optional<Weekly_schedulesCountAggregateOutputType> | number
          }
        }
      }
      study_timetables: {
        payload: Prisma.$study_timetablesPayload<ExtArgs>
        fields: Prisma.study_timetablesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.study_timetablesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.study_timetablesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>
          }
          findFirst: {
            args: Prisma.study_timetablesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.study_timetablesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>
          }
          findMany: {
            args: Prisma.study_timetablesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>[]
          }
          create: {
            args: Prisma.study_timetablesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>
          }
          createMany: {
            args: Prisma.study_timetablesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.study_timetablesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>[]
          }
          delete: {
            args: Prisma.study_timetablesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>
          }
          update: {
            args: Prisma.study_timetablesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>
          }
          deleteMany: {
            args: Prisma.study_timetablesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.study_timetablesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.study_timetablesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>[]
          }
          upsert: {
            args: Prisma.study_timetablesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$study_timetablesPayload>
          }
          aggregate: {
            args: Prisma.Study_timetablesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudy_timetables>
          }
          groupBy: {
            args: Prisma.study_timetablesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Study_timetablesGroupByOutputType>[]
          }
          count: {
            args: Prisma.study_timetablesCountArgs<ExtArgs>
            result: $Utils.Optional<Study_timetablesCountAggregateOutputType> | number
          }
        }
      }
      scores: {
        payload: Prisma.$scoresPayload<ExtArgs>
        fields: Prisma.scoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.scoresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.scoresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>
          }
          findFirst: {
            args: Prisma.scoresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.scoresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>
          }
          findMany: {
            args: Prisma.scoresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>[]
          }
          create: {
            args: Prisma.scoresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>
          }
          createMany: {
            args: Prisma.scoresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.scoresCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>[]
          }
          delete: {
            args: Prisma.scoresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>
          }
          update: {
            args: Prisma.scoresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>
          }
          deleteMany: {
            args: Prisma.scoresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.scoresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.scoresUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>[]
          }
          upsert: {
            args: Prisma.scoresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$scoresPayload>
          }
          aggregate: {
            args: Prisma.ScoresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScores>
          }
          groupBy: {
            args: Prisma.scoresGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.scoresCountArgs<ExtArgs>
            result: $Utils.Optional<ScoresCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: usersOmit
    classes?: classesOmit
    subjects?: subjectsOmit
    question_banks?: question_banksOmit
    questions?: questionsOmit
    quizzes?: quizzesOmit
    quiz_questions?: quiz_questionsOmit
    student_quizzes?: student_quizzesOmit
    assignments?: assignmentsOmit
    student_assignments?: student_assignmentsOmit
    weekly_schedules?: weekly_schedulesOmit
    study_timetables?: study_timetablesOmit
    scores?: scoresOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    assignments: number
    teacher_classes: number
    question_banks: number
    scores: number
    student_assignments: number
    student_quizzes: number
    study_timetables: number
    weekly_schedules: number
    student_classes: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | UsersCountOutputTypeCountAssignmentsArgs
    teacher_classes?: boolean | UsersCountOutputTypeCountTeacher_classesArgs
    question_banks?: boolean | UsersCountOutputTypeCountQuestion_banksArgs
    scores?: boolean | UsersCountOutputTypeCountScoresArgs
    student_assignments?: boolean | UsersCountOutputTypeCountStudent_assignmentsArgs
    student_quizzes?: boolean | UsersCountOutputTypeCountStudent_quizzesArgs
    study_timetables?: boolean | UsersCountOutputTypeCountStudy_timetablesArgs
    weekly_schedules?: boolean | UsersCountOutputTypeCountWeekly_schedulesArgs
    student_classes?: boolean | UsersCountOutputTypeCountStudent_classesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assignmentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTeacher_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountQuestion_banksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: question_banksWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: scoresWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountStudent_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_assignmentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountStudent_quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_quizzesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountStudy_timetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: study_timetablesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountWeekly_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: weekly_schedulesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountStudent_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
  }


  /**
   * Count Type ClassesCountOutputType
   */

  export type ClassesCountOutputType = {
    assignments: number
    question_banks: number
    quizzes: number
    weekly_schedules: number
    students: number
  }

  export type ClassesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | ClassesCountOutputTypeCountAssignmentsArgs
    question_banks?: boolean | ClassesCountOutputTypeCountQuestion_banksArgs
    quizzes?: boolean | ClassesCountOutputTypeCountQuizzesArgs
    weekly_schedules?: boolean | ClassesCountOutputTypeCountWeekly_schedulesArgs
    students?: boolean | ClassesCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesCountOutputType
     */
    select?: ClassesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assignmentsWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountQuestion_banksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: question_banksWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountWeekly_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: weekly_schedulesWhereInput
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * Count Type SubjectsCountOutputType
   */

  export type SubjectsCountOutputType = {
    assignments: number
    question_banks: number
    quizzes: number
    scores: number
    study_timetables: number
    weekly_schedules: number
  }

  export type SubjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | SubjectsCountOutputTypeCountAssignmentsArgs
    question_banks?: boolean | SubjectsCountOutputTypeCountQuestion_banksArgs
    quizzes?: boolean | SubjectsCountOutputTypeCountQuizzesArgs
    scores?: boolean | SubjectsCountOutputTypeCountScoresArgs
    study_timetables?: boolean | SubjectsCountOutputTypeCountStudy_timetablesArgs
    weekly_schedules?: boolean | SubjectsCountOutputTypeCountWeekly_schedulesArgs
  }

  // Custom InputTypes
  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectsCountOutputType
     */
    select?: SubjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assignmentsWhereInput
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountQuestion_banksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: question_banksWhereInput
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: scoresWhereInput
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountStudy_timetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: study_timetablesWhereInput
  }

  /**
   * SubjectsCountOutputType without action
   */
  export type SubjectsCountOutputTypeCountWeekly_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: weekly_schedulesWhereInput
  }


  /**
   * Count Type Question_banksCountOutputType
   */

  export type Question_banksCountOutputType = {
    questions: number
    quizzes: number
  }

  export type Question_banksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Question_banksCountOutputTypeCountQuestionsArgs
    quizzes?: boolean | Question_banksCountOutputTypeCountQuizzesArgs
  }

  // Custom InputTypes
  /**
   * Question_banksCountOutputType without action
   */
  export type Question_banksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question_banksCountOutputType
     */
    select?: Question_banksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Question_banksCountOutputType without action
   */
  export type Question_banksCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
  }

  /**
   * Question_banksCountOutputType without action
   */
  export type Question_banksCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
  }


  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    quiz_questions: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz_questions?: boolean | QuestionsCountOutputTypeCountQuiz_questionsArgs
  }

  // Custom InputTypes
  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountQuiz_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quiz_questionsWhereInput
  }


  /**
   * Count Type QuizzesCountOutputType
   */

  export type QuizzesCountOutputType = {
    quiz_questions: number
    student_quizzes: number
  }

  export type QuizzesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz_questions?: boolean | QuizzesCountOutputTypeCountQuiz_questionsArgs
    student_quizzes?: boolean | QuizzesCountOutputTypeCountStudent_quizzesArgs
  }

  // Custom InputTypes
  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesCountOutputType
     */
    select?: QuizzesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountQuiz_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quiz_questionsWhereInput
  }

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountStudent_quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_quizzesWhereInput
  }


  /**
   * Count Type AssignmentsCountOutputType
   */

  export type AssignmentsCountOutputType = {
    student_assignments: number
  }

  export type AssignmentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student_assignments?: boolean | AssignmentsCountOutputTypeCountStudent_assignmentsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentsCountOutputType without action
   */
  export type AssignmentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentsCountOutputType
     */
    select?: AssignmentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentsCountOutputType without action
   */
  export type AssignmentsCountOutputTypeCountStudent_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_assignmentsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    roll_no: string | null
    role: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    roll_no: string | null
    role: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    roll_no: number
    role: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    roll_no?: true
    role?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    roll_no?: true
    role?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    roll_no?: true
    role?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
    assignments?: boolean | users$assignmentsArgs<ExtArgs>
    teacher_classes?: boolean | users$teacher_classesArgs<ExtArgs>
    question_banks?: boolean | users$question_banksArgs<ExtArgs>
    scores?: boolean | users$scoresArgs<ExtArgs>
    student_assignments?: boolean | users$student_assignmentsArgs<ExtArgs>
    student_quizzes?: boolean | users$student_quizzesArgs<ExtArgs>
    study_timetables?: boolean | users$study_timetablesArgs<ExtArgs>
    weekly_schedules?: boolean | users$weekly_schedulesArgs<ExtArgs>
    student_classes?: boolean | users$student_classesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "roll_no" | "role", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | users$assignmentsArgs<ExtArgs>
    teacher_classes?: boolean | users$teacher_classesArgs<ExtArgs>
    question_banks?: boolean | users$question_banksArgs<ExtArgs>
    scores?: boolean | users$scoresArgs<ExtArgs>
    student_assignments?: boolean | users$student_assignmentsArgs<ExtArgs>
    student_quizzes?: boolean | users$student_quizzesArgs<ExtArgs>
    study_timetables?: boolean | users$study_timetablesArgs<ExtArgs>
    weekly_schedules?: boolean | users$weekly_schedulesArgs<ExtArgs>
    student_classes?: boolean | users$student_classesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      assignments: Prisma.$assignmentsPayload<ExtArgs>[]
      teacher_classes: Prisma.$classesPayload<ExtArgs>[]
      question_banks: Prisma.$question_banksPayload<ExtArgs>[]
      scores: Prisma.$scoresPayload<ExtArgs>[]
      student_assignments: Prisma.$student_assignmentsPayload<ExtArgs>[]
      student_quizzes: Prisma.$student_quizzesPayload<ExtArgs>[]
      study_timetables: Prisma.$study_timetablesPayload<ExtArgs>[]
      weekly_schedules: Prisma.$weekly_schedulesPayload<ExtArgs>[]
      student_classes: Prisma.$classesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      roll_no: string
      role: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends users$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, users$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    teacher_classes<T extends users$teacher_classesArgs<ExtArgs> = {}>(args?: Subset<T, users$teacher_classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    question_banks<T extends users$question_banksArgs<ExtArgs> = {}>(args?: Subset<T, users$question_banksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    scores<T extends users$scoresArgs<ExtArgs> = {}>(args?: Subset<T, users$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    student_assignments<T extends users$student_assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, users$student_assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    student_quizzes<T extends users$student_quizzesArgs<ExtArgs> = {}>(args?: Subset<T, users$student_quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    study_timetables<T extends users$study_timetablesArgs<ExtArgs> = {}>(args?: Subset<T, users$study_timetablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    weekly_schedules<T extends users$weekly_schedulesArgs<ExtArgs> = {}>(args?: Subset<T, users$weekly_schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    student_classes<T extends users$student_classesArgs<ExtArgs> = {}>(args?: Subset<T, users$student_classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly roll_no: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.assignments
   */
  export type users$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    where?: assignmentsWhereInput
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    cursor?: assignmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * users.teacher_classes
   */
  export type users$teacher_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    where?: classesWhereInput
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    cursor?: classesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * users.question_banks
   */
  export type users$question_banksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    where?: question_banksWhereInput
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    cursor?: question_banksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Question_banksScalarFieldEnum | Question_banksScalarFieldEnum[]
  }

  /**
   * users.scores
   */
  export type users$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    where?: scoresWhereInput
    orderBy?: scoresOrderByWithRelationInput | scoresOrderByWithRelationInput[]
    cursor?: scoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoresScalarFieldEnum | ScoresScalarFieldEnum[]
  }

  /**
   * users.student_assignments
   */
  export type users$student_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    where?: student_assignmentsWhereInput
    orderBy?: student_assignmentsOrderByWithRelationInput | student_assignmentsOrderByWithRelationInput[]
    cursor?: student_assignmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student_assignmentsScalarFieldEnum | Student_assignmentsScalarFieldEnum[]
  }

  /**
   * users.student_quizzes
   */
  export type users$student_quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    where?: student_quizzesWhereInput
    orderBy?: student_quizzesOrderByWithRelationInput | student_quizzesOrderByWithRelationInput[]
    cursor?: student_quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student_quizzesScalarFieldEnum | Student_quizzesScalarFieldEnum[]
  }

  /**
   * users.study_timetables
   */
  export type users$study_timetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    where?: study_timetablesWhereInput
    orderBy?: study_timetablesOrderByWithRelationInput | study_timetablesOrderByWithRelationInput[]
    cursor?: study_timetablesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Study_timetablesScalarFieldEnum | Study_timetablesScalarFieldEnum[]
  }

  /**
   * users.weekly_schedules
   */
  export type users$weekly_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    where?: weekly_schedulesWhereInput
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    cursor?: weekly_schedulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Weekly_schedulesScalarFieldEnum | Weekly_schedulesScalarFieldEnum[]
  }

  /**
   * users.student_classes
   */
  export type users$student_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    where?: classesWhereInput
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    cursor?: classesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model classes
   */

  export type AggregateClasses = {
    _count: ClassesCountAggregateOutputType | null
    _avg: ClassesAvgAggregateOutputType | null
    _sum: ClassesSumAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  export type ClassesAvgAggregateOutputType = {
    id: number | null
    class_teacher_id: number | null
  }

  export type ClassesSumAggregateOutputType = {
    id: number | null
    class_teacher_id: number | null
  }

  export type ClassesMinAggregateOutputType = {
    id: number | null
    name: string | null
    class_teacher_id: number | null
  }

  export type ClassesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    class_teacher_id: number | null
  }

  export type ClassesCountAggregateOutputType = {
    id: number
    name: number
    class_teacher_id: number
    _all: number
  }


  export type ClassesAvgAggregateInputType = {
    id?: true
    class_teacher_id?: true
  }

  export type ClassesSumAggregateInputType = {
    id?: true
    class_teacher_id?: true
  }

  export type ClassesMinAggregateInputType = {
    id?: true
    name?: true
    class_teacher_id?: true
  }

  export type ClassesMaxAggregateInputType = {
    id?: true
    name?: true
    class_teacher_id?: true
  }

  export type ClassesCountAggregateInputType = {
    id?: true
    name?: true
    class_teacher_id?: true
    _all?: true
  }

  export type ClassesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classes to aggregate.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned classes
    **/
    _count?: true | ClassesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassesMaxAggregateInputType
  }

  export type GetClassesAggregateType<T extends ClassesAggregateArgs> = {
        [P in keyof T & keyof AggregateClasses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClasses[P]>
      : GetScalarType<T[P], AggregateClasses[P]>
  }




  export type classesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
    orderBy?: classesOrderByWithAggregationInput | classesOrderByWithAggregationInput[]
    by: ClassesScalarFieldEnum[] | ClassesScalarFieldEnum
    having?: classesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassesCountAggregateInputType | true
    _avg?: ClassesAvgAggregateInputType
    _sum?: ClassesSumAggregateInputType
    _min?: ClassesMinAggregateInputType
    _max?: ClassesMaxAggregateInputType
  }

  export type ClassesGroupByOutputType = {
    id: number
    name: string
    class_teacher_id: number | null
    _count: ClassesCountAggregateOutputType | null
    _avg: ClassesAvgAggregateOutputType | null
    _sum: ClassesSumAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  type GetClassesGroupByPayload<T extends classesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassesGroupByOutputType[P]>
            : GetScalarType<T[P], ClassesGroupByOutputType[P]>
        }
      >
    >


  export type classesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
    assignments?: boolean | classes$assignmentsArgs<ExtArgs>
    teacher?: boolean | classes$teacherArgs<ExtArgs>
    question_banks?: boolean | classes$question_banksArgs<ExtArgs>
    quizzes?: boolean | classes$quizzesArgs<ExtArgs>
    weekly_schedules?: boolean | classes$weekly_schedulesArgs<ExtArgs>
    students?: boolean | classes$studentsArgs<ExtArgs>
    _count?: boolean | ClassesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
    teacher?: boolean | classes$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
    teacher?: boolean | classes$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectScalar = {
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
  }

  export type classesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "class_teacher_id", ExtArgs["result"]["classes"]>
  export type classesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | classes$assignmentsArgs<ExtArgs>
    teacher?: boolean | classes$teacherArgs<ExtArgs>
    question_banks?: boolean | classes$question_banksArgs<ExtArgs>
    quizzes?: boolean | classes$quizzesArgs<ExtArgs>
    weekly_schedules?: boolean | classes$weekly_schedulesArgs<ExtArgs>
    students?: boolean | classes$studentsArgs<ExtArgs>
    _count?: boolean | ClassesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type classesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | classes$teacherArgs<ExtArgs>
  }
  export type classesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | classes$teacherArgs<ExtArgs>
  }

  export type $classesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "classes"
    objects: {
      assignments: Prisma.$assignmentsPayload<ExtArgs>[]
      teacher: Prisma.$usersPayload<ExtArgs> | null
      question_banks: Prisma.$question_banksPayload<ExtArgs>[]
      quizzes: Prisma.$quizzesPayload<ExtArgs>[]
      weekly_schedules: Prisma.$weekly_schedulesPayload<ExtArgs>[]
      students: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      class_teacher_id: number | null
    }, ExtArgs["result"]["classes"]>
    composites: {}
  }

  type classesGetPayload<S extends boolean | null | undefined | classesDefaultArgs> = $Result.GetResult<Prisma.$classesPayload, S>

  type classesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<classesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassesCountAggregateInputType | true
    }

  export interface classesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['classes'], meta: { name: 'classes' } }
    /**
     * Find zero or one Classes that matches the filter.
     * @param {classesFindUniqueArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends classesFindUniqueArgs>(args: SelectSubset<T, classesFindUniqueArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Classes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {classesFindUniqueOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends classesFindUniqueOrThrowArgs>(args: SelectSubset<T, classesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindFirstArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends classesFindFirstArgs>(args?: SelectSubset<T, classesFindFirstArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Classes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindFirstOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends classesFindFirstOrThrowArgs>(args?: SelectSubset<T, classesFindFirstOrThrowArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.classes.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.classes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classesWithIdOnly = await prisma.classes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends classesFindManyArgs>(args?: SelectSubset<T, classesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Classes.
     * @param {classesCreateArgs} args - Arguments to create a Classes.
     * @example
     * // Create one Classes
     * const Classes = await prisma.classes.create({
     *   data: {
     *     // ... data to create a Classes
     *   }
     * })
     * 
     */
    create<T extends classesCreateArgs>(args: SelectSubset<T, classesCreateArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Classes.
     * @param {classesCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends classesCreateManyArgs>(args?: SelectSubset<T, classesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {classesCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classesWithIdOnly = await prisma.classes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends classesCreateManyAndReturnArgs>(args?: SelectSubset<T, classesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Classes.
     * @param {classesDeleteArgs} args - Arguments to delete one Classes.
     * @example
     * // Delete one Classes
     * const Classes = await prisma.classes.delete({
     *   where: {
     *     // ... filter to delete one Classes
     *   }
     * })
     * 
     */
    delete<T extends classesDeleteArgs>(args: SelectSubset<T, classesDeleteArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Classes.
     * @param {classesUpdateArgs} args - Arguments to update one Classes.
     * @example
     * // Update one Classes
     * const classes = await prisma.classes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends classesUpdateArgs>(args: SelectSubset<T, classesUpdateArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Classes.
     * @param {classesDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.classes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends classesDeleteManyArgs>(args?: SelectSubset<T, classesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends classesUpdateManyArgs>(args: SelectSubset<T, classesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {classesUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classesWithIdOnly = await prisma.classes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends classesUpdateManyAndReturnArgs>(args: SelectSubset<T, classesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Classes.
     * @param {classesUpsertArgs} args - Arguments to update or create a Classes.
     * @example
     * // Update or create a Classes
     * const classes = await prisma.classes.upsert({
     *   create: {
     *     // ... data to create a Classes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classes we want to update
     *   }
     * })
     */
    upsert<T extends classesUpsertArgs>(args: SelectSubset<T, classesUpsertArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.classes.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends classesCountArgs>(
      args?: Subset<T, classesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassesAggregateArgs>(args: Subset<T, ClassesAggregateArgs>): Prisma.PrismaPromise<GetClassesAggregateType<T>>

    /**
     * Group by Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends classesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: classesGroupByArgs['orderBy'] }
        : { orderBy?: classesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, classesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the classes model
   */
  readonly fields: classesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for classes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__classesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends classes$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, classes$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    teacher<T extends classes$teacherArgs<ExtArgs> = {}>(args?: Subset<T, classes$teacherArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    question_banks<T extends classes$question_banksArgs<ExtArgs> = {}>(args?: Subset<T, classes$question_banksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    quizzes<T extends classes$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, classes$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    weekly_schedules<T extends classes$weekly_schedulesArgs<ExtArgs> = {}>(args?: Subset<T, classes$weekly_schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    students<T extends classes$studentsArgs<ExtArgs> = {}>(args?: Subset<T, classes$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the classes model
   */ 
  interface classesFieldRefs {
    readonly id: FieldRef<"classes", 'Int'>
    readonly name: FieldRef<"classes", 'String'>
    readonly class_teacher_id: FieldRef<"classes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * classes findUnique
   */
  export type classesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes findUniqueOrThrow
   */
  export type classesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes findFirst
   */
  export type classesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes findFirstOrThrow
   */
  export type classesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes findMany
   */
  export type classesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes create
   */
  export type classesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The data needed to create a classes.
     */
    data: XOR<classesCreateInput, classesUncheckedCreateInput>
  }

  /**
   * classes createMany
   */
  export type classesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many classes.
     */
    data: classesCreateManyInput | classesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * classes createManyAndReturn
   */
  export type classesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * The data used to create many classes.
     */
    data: classesCreateManyInput | classesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * classes update
   */
  export type classesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The data needed to update a classes.
     */
    data: XOR<classesUpdateInput, classesUncheckedUpdateInput>
    /**
     * Choose, which classes to update.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes updateMany
   */
  export type classesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update classes.
     */
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyInput>
    /**
     * Filter which classes to update
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to update.
     */
    limit?: number
  }

  /**
   * classes updateManyAndReturn
   */
  export type classesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * The data used to update classes.
     */
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyInput>
    /**
     * Filter which classes to update
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * classes upsert
   */
  export type classesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The filter to search for the classes to update in case it exists.
     */
    where: classesWhereUniqueInput
    /**
     * In case the classes found by the `where` argument doesn't exist, create a new classes with this data.
     */
    create: XOR<classesCreateInput, classesUncheckedCreateInput>
    /**
     * In case the classes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<classesUpdateInput, classesUncheckedUpdateInput>
  }

  /**
   * classes delete
   */
  export type classesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter which classes to delete.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes deleteMany
   */
  export type classesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classes to delete
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to delete.
     */
    limit?: number
  }

  /**
   * classes.assignments
   */
  export type classes$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    where?: assignmentsWhereInput
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    cursor?: assignmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * classes.teacher
   */
  export type classes$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * classes.question_banks
   */
  export type classes$question_banksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    where?: question_banksWhereInput
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    cursor?: question_banksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Question_banksScalarFieldEnum | Question_banksScalarFieldEnum[]
  }

  /**
   * classes.quizzes
   */
  export type classes$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    cursor?: quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * classes.weekly_schedules
   */
  export type classes$weekly_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    where?: weekly_schedulesWhereInput
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    cursor?: weekly_schedulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Weekly_schedulesScalarFieldEnum | Weekly_schedulesScalarFieldEnum[]
  }

  /**
   * classes.students
   */
  export type classes$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * classes without action
   */
  export type classesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
  }


  /**
   * Model subjects
   */

  export type AggregateSubjects = {
    _count: SubjectsCountAggregateOutputType | null
    _avg: SubjectsAvgAggregateOutputType | null
    _sum: SubjectsSumAggregateOutputType | null
    _min: SubjectsMinAggregateOutputType | null
    _max: SubjectsMaxAggregateOutputType | null
  }

  export type SubjectsAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectsSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SubjectsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SubjectsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SubjectsAvgAggregateInputType = {
    id?: true
  }

  export type SubjectsSumAggregateInputType = {
    id?: true
  }

  export type SubjectsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SubjectsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SubjectsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SubjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subjects to aggregate.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationInput | subjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subjects
    **/
    _count?: true | SubjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectsMaxAggregateInputType
  }

  export type GetSubjectsAggregateType<T extends SubjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjects[P]>
      : GetScalarType<T[P], AggregateSubjects[P]>
  }




  export type subjectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subjectsWhereInput
    orderBy?: subjectsOrderByWithAggregationInput | subjectsOrderByWithAggregationInput[]
    by: SubjectsScalarFieldEnum[] | SubjectsScalarFieldEnum
    having?: subjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectsCountAggregateInputType | true
    _avg?: SubjectsAvgAggregateInputType
    _sum?: SubjectsSumAggregateInputType
    _min?: SubjectsMinAggregateInputType
    _max?: SubjectsMaxAggregateInputType
  }

  export type SubjectsGroupByOutputType = {
    id: number
    name: string
    _count: SubjectsCountAggregateOutputType | null
    _avg: SubjectsAvgAggregateOutputType | null
    _sum: SubjectsSumAggregateOutputType | null
    _min: SubjectsMinAggregateOutputType | null
    _max: SubjectsMaxAggregateOutputType | null
  }

  type GetSubjectsGroupByPayload<T extends subjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectsGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectsGroupByOutputType[P]>
        }
      >
    >


  export type subjectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    assignments?: boolean | subjects$assignmentsArgs<ExtArgs>
    question_banks?: boolean | subjects$question_banksArgs<ExtArgs>
    quizzes?: boolean | subjects$quizzesArgs<ExtArgs>
    scores?: boolean | subjects$scoresArgs<ExtArgs>
    study_timetables?: boolean | subjects$study_timetablesArgs<ExtArgs>
    weekly_schedules?: boolean | subjects$weekly_schedulesArgs<ExtArgs>
    _count?: boolean | SubjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjects"]>

  export type subjectsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["subjects"]>

  export type subjectsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["subjects"]>

  export type subjectsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type subjectsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["subjects"]>
  export type subjectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | subjects$assignmentsArgs<ExtArgs>
    question_banks?: boolean | subjects$question_banksArgs<ExtArgs>
    quizzes?: boolean | subjects$quizzesArgs<ExtArgs>
    scores?: boolean | subjects$scoresArgs<ExtArgs>
    study_timetables?: boolean | subjects$study_timetablesArgs<ExtArgs>
    weekly_schedules?: boolean | subjects$weekly_schedulesArgs<ExtArgs>
    _count?: boolean | SubjectsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type subjectsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type subjectsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $subjectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "subjects"
    objects: {
      assignments: Prisma.$assignmentsPayload<ExtArgs>[]
      question_banks: Prisma.$question_banksPayload<ExtArgs>[]
      quizzes: Prisma.$quizzesPayload<ExtArgs>[]
      scores: Prisma.$scoresPayload<ExtArgs>[]
      study_timetables: Prisma.$study_timetablesPayload<ExtArgs>[]
      weekly_schedules: Prisma.$weekly_schedulesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["subjects"]>
    composites: {}
  }

  type subjectsGetPayload<S extends boolean | null | undefined | subjectsDefaultArgs> = $Result.GetResult<Prisma.$subjectsPayload, S>

  type subjectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<subjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectsCountAggregateInputType | true
    }

  export interface subjectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subjects'], meta: { name: 'subjects' } }
    /**
     * Find zero or one Subjects that matches the filter.
     * @param {subjectsFindUniqueArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends subjectsFindUniqueArgs>(args: SelectSubset<T, subjectsFindUniqueArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Subjects that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {subjectsFindUniqueOrThrowArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends subjectsFindUniqueOrThrowArgs>(args: SelectSubset<T, subjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsFindFirstArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends subjectsFindFirstArgs>(args?: SelectSubset<T, subjectsFindFirstArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Subjects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsFindFirstOrThrowArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends subjectsFindFirstOrThrowArgs>(args?: SelectSubset<T, subjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subjects.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subjects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectsWithIdOnly = await prisma.subjects.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends subjectsFindManyArgs>(args?: SelectSubset<T, subjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Subjects.
     * @param {subjectsCreateArgs} args - Arguments to create a Subjects.
     * @example
     * // Create one Subjects
     * const Subjects = await prisma.subjects.create({
     *   data: {
     *     // ... data to create a Subjects
     *   }
     * })
     * 
     */
    create<T extends subjectsCreateArgs>(args: SelectSubset<T, subjectsCreateArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Subjects.
     * @param {subjectsCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subjects = await prisma.subjects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends subjectsCreateManyArgs>(args?: SelectSubset<T, subjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {subjectsCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subjects = await prisma.subjects.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectsWithIdOnly = await prisma.subjects.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends subjectsCreateManyAndReturnArgs>(args?: SelectSubset<T, subjectsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Subjects.
     * @param {subjectsDeleteArgs} args - Arguments to delete one Subjects.
     * @example
     * // Delete one Subjects
     * const Subjects = await prisma.subjects.delete({
     *   where: {
     *     // ... filter to delete one Subjects
     *   }
     * })
     * 
     */
    delete<T extends subjectsDeleteArgs>(args: SelectSubset<T, subjectsDeleteArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Subjects.
     * @param {subjectsUpdateArgs} args - Arguments to update one Subjects.
     * @example
     * // Update one Subjects
     * const subjects = await prisma.subjects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends subjectsUpdateArgs>(args: SelectSubset<T, subjectsUpdateArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Subjects.
     * @param {subjectsDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subjects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends subjectsDeleteManyArgs>(args?: SelectSubset<T, subjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subjects = await prisma.subjects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends subjectsUpdateManyArgs>(args: SelectSubset<T, subjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {subjectsUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subjects = await prisma.subjects.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectsWithIdOnly = await prisma.subjects.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends subjectsUpdateManyAndReturnArgs>(args: SelectSubset<T, subjectsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Subjects.
     * @param {subjectsUpsertArgs} args - Arguments to update or create a Subjects.
     * @example
     * // Update or create a Subjects
     * const subjects = await prisma.subjects.upsert({
     *   create: {
     *     // ... data to create a Subjects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subjects we want to update
     *   }
     * })
     */
    upsert<T extends subjectsUpsertArgs>(args: SelectSubset<T, subjectsUpsertArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subjects.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends subjectsCountArgs>(
      args?: Subset<T, subjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectsAggregateArgs>(args: Subset<T, SubjectsAggregateArgs>): Prisma.PrismaPromise<GetSubjectsAggregateType<T>>

    /**
     * Group by Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subjectsGroupByArgs['orderBy'] }
        : { orderBy?: subjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subjects model
   */
  readonly fields: subjectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subjects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__subjectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends subjects$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, subjects$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    question_banks<T extends subjects$question_banksArgs<ExtArgs> = {}>(args?: Subset<T, subjects$question_banksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    quizzes<T extends subjects$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, subjects$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    scores<T extends subjects$scoresArgs<ExtArgs> = {}>(args?: Subset<T, subjects$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    study_timetables<T extends subjects$study_timetablesArgs<ExtArgs> = {}>(args?: Subset<T, subjects$study_timetablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    weekly_schedules<T extends subjects$weekly_schedulesArgs<ExtArgs> = {}>(args?: Subset<T, subjects$weekly_schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the subjects model
   */ 
  interface subjectsFieldRefs {
    readonly id: FieldRef<"subjects", 'Int'>
    readonly name: FieldRef<"subjects", 'String'>
  }
    

  // Custom InputTypes
  /**
   * subjects findUnique
   */
  export type subjectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects findUniqueOrThrow
   */
  export type subjectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects findFirst
   */
  export type subjectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationInput | subjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subjects.
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subjects.
     */
    distinct?: SubjectsScalarFieldEnum | SubjectsScalarFieldEnum[]
  }

  /**
   * subjects findFirstOrThrow
   */
  export type subjectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationInput | subjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subjects.
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subjects.
     */
    distinct?: SubjectsScalarFieldEnum | SubjectsScalarFieldEnum[]
  }

  /**
   * subjects findMany
   */
  export type subjectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter, which subjects to fetch.
     */
    where?: subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subjects to fetch.
     */
    orderBy?: subjectsOrderByWithRelationInput | subjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subjects.
     */
    cursor?: subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subjects.
     */
    skip?: number
    distinct?: SubjectsScalarFieldEnum | SubjectsScalarFieldEnum[]
  }

  /**
   * subjects create
   */
  export type subjectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * The data needed to create a subjects.
     */
    data: XOR<subjectsCreateInput, subjectsUncheckedCreateInput>
  }

  /**
   * subjects createMany
   */
  export type subjectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subjects.
     */
    data: subjectsCreateManyInput | subjectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * subjects createManyAndReturn
   */
  export type subjectsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * The data used to create many subjects.
     */
    data: subjectsCreateManyInput | subjectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * subjects update
   */
  export type subjectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * The data needed to update a subjects.
     */
    data: XOR<subjectsUpdateInput, subjectsUncheckedUpdateInput>
    /**
     * Choose, which subjects to update.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects updateMany
   */
  export type subjectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subjects.
     */
    data: XOR<subjectsUpdateManyMutationInput, subjectsUncheckedUpdateManyInput>
    /**
     * Filter which subjects to update
     */
    where?: subjectsWhereInput
    /**
     * Limit how many subjects to update.
     */
    limit?: number
  }

  /**
   * subjects updateManyAndReturn
   */
  export type subjectsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * The data used to update subjects.
     */
    data: XOR<subjectsUpdateManyMutationInput, subjectsUncheckedUpdateManyInput>
    /**
     * Filter which subjects to update
     */
    where?: subjectsWhereInput
    /**
     * Limit how many subjects to update.
     */
    limit?: number
  }

  /**
   * subjects upsert
   */
  export type subjectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * The filter to search for the subjects to update in case it exists.
     */
    where: subjectsWhereUniqueInput
    /**
     * In case the subjects found by the `where` argument doesn't exist, create a new subjects with this data.
     */
    create: XOR<subjectsCreateInput, subjectsUncheckedCreateInput>
    /**
     * In case the subjects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subjectsUpdateInput, subjectsUncheckedUpdateInput>
  }

  /**
   * subjects delete
   */
  export type subjectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
    /**
     * Filter which subjects to delete.
     */
    where: subjectsWhereUniqueInput
  }

  /**
   * subjects deleteMany
   */
  export type subjectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subjects to delete
     */
    where?: subjectsWhereInput
    /**
     * Limit how many subjects to delete.
     */
    limit?: number
  }

  /**
   * subjects.assignments
   */
  export type subjects$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    where?: assignmentsWhereInput
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    cursor?: assignmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * subjects.question_banks
   */
  export type subjects$question_banksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    where?: question_banksWhereInput
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    cursor?: question_banksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Question_banksScalarFieldEnum | Question_banksScalarFieldEnum[]
  }

  /**
   * subjects.quizzes
   */
  export type subjects$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    cursor?: quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * subjects.scores
   */
  export type subjects$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    where?: scoresWhereInput
    orderBy?: scoresOrderByWithRelationInput | scoresOrderByWithRelationInput[]
    cursor?: scoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoresScalarFieldEnum | ScoresScalarFieldEnum[]
  }

  /**
   * subjects.study_timetables
   */
  export type subjects$study_timetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    where?: study_timetablesWhereInput
    orderBy?: study_timetablesOrderByWithRelationInput | study_timetablesOrderByWithRelationInput[]
    cursor?: study_timetablesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Study_timetablesScalarFieldEnum | Study_timetablesScalarFieldEnum[]
  }

  /**
   * subjects.weekly_schedules
   */
  export type subjects$weekly_schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    where?: weekly_schedulesWhereInput
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    cursor?: weekly_schedulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Weekly_schedulesScalarFieldEnum | Weekly_schedulesScalarFieldEnum[]
  }

  /**
   * subjects without action
   */
  export type subjectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subjects
     */
    select?: subjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subjects
     */
    omit?: subjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subjectsInclude<ExtArgs> | null
  }


  /**
   * Model question_banks
   */

  export type AggregateQuestion_banks = {
    _count: Question_banksCountAggregateOutputType | null
    _avg: Question_banksAvgAggregateOutputType | null
    _sum: Question_banksSumAggregateOutputType | null
    _min: Question_banksMinAggregateOutputType | null
    _max: Question_banksMaxAggregateOutputType | null
  }

  export type Question_banksAvgAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type Question_banksSumAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type Question_banksMinAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type Question_banksMaxAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type Question_banksCountAggregateOutputType = {
    id: number
    teacher_id: number
    subject_id: number
    class_id: number
    _all: number
  }


  export type Question_banksAvgAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type Question_banksSumAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type Question_banksMinAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type Question_banksMaxAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type Question_banksCountAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
    _all?: true
  }

  export type Question_banksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which question_banks to aggregate.
     */
    where?: question_banksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of question_banks to fetch.
     */
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: question_banksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` question_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` question_banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned question_banks
    **/
    _count?: true | Question_banksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Question_banksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Question_banksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Question_banksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Question_banksMaxAggregateInputType
  }

  export type GetQuestion_banksAggregateType<T extends Question_banksAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion_banks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion_banks[P]>
      : GetScalarType<T[P], AggregateQuestion_banks[P]>
  }




  export type question_banksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: question_banksWhereInput
    orderBy?: question_banksOrderByWithAggregationInput | question_banksOrderByWithAggregationInput[]
    by: Question_banksScalarFieldEnum[] | Question_banksScalarFieldEnum
    having?: question_banksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Question_banksCountAggregateInputType | true
    _avg?: Question_banksAvgAggregateInputType
    _sum?: Question_banksSumAggregateInputType
    _min?: Question_banksMinAggregateInputType
    _max?: Question_banksMaxAggregateInputType
  }

  export type Question_banksGroupByOutputType = {
    id: number
    teacher_id: number
    subject_id: number
    class_id: number
    _count: Question_banksCountAggregateOutputType | null
    _avg: Question_banksAvgAggregateOutputType | null
    _sum: Question_banksSumAggregateOutputType | null
    _min: Question_banksMinAggregateOutputType | null
    _max: Question_banksMaxAggregateOutputType | null
  }

  type GetQuestion_banksGroupByPayload<T extends question_banksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Question_banksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Question_banksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Question_banksGroupByOutputType[P]>
            : GetScalarType<T[P], Question_banksGroupByOutputType[P]>
        }
      >
    >


  export type question_banksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
    questions?: boolean | question_banks$questionsArgs<ExtArgs>
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
    quizzes?: boolean | question_banks$quizzesArgs<ExtArgs>
    _count?: boolean | Question_banksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question_banks"]>

  export type question_banksSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question_banks"]>

  export type question_banksSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question_banks"]>

  export type question_banksSelectScalar = {
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
  }

  export type question_banksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teacher_id" | "subject_id" | "class_id", ExtArgs["result"]["question_banks"]>
  export type question_banksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | question_banks$questionsArgs<ExtArgs>
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
    quizzes?: boolean | question_banks$quizzesArgs<ExtArgs>
    _count?: boolean | Question_banksCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type question_banksIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type question_banksIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $question_banksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "question_banks"
    objects: {
      questions: Prisma.$questionsPayload<ExtArgs>[]
      class: Prisma.$classesPayload<ExtArgs>
      subject: Prisma.$subjectsPayload<ExtArgs>
      teacher: Prisma.$usersPayload<ExtArgs>
      quizzes: Prisma.$quizzesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teacher_id: number
      subject_id: number
      class_id: number
    }, ExtArgs["result"]["question_banks"]>
    composites: {}
  }

  type question_banksGetPayload<S extends boolean | null | undefined | question_banksDefaultArgs> = $Result.GetResult<Prisma.$question_banksPayload, S>

  type question_banksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<question_banksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Question_banksCountAggregateInputType | true
    }

  export interface question_banksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['question_banks'], meta: { name: 'question_banks' } }
    /**
     * Find zero or one Question_banks that matches the filter.
     * @param {question_banksFindUniqueArgs} args - Arguments to find a Question_banks
     * @example
     * // Get one Question_banks
     * const question_banks = await prisma.question_banks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends question_banksFindUniqueArgs>(args: SelectSubset<T, question_banksFindUniqueArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Question_banks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {question_banksFindUniqueOrThrowArgs} args - Arguments to find a Question_banks
     * @example
     * // Get one Question_banks
     * const question_banks = await prisma.question_banks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends question_banksFindUniqueOrThrowArgs>(args: SelectSubset<T, question_banksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Question_banks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {question_banksFindFirstArgs} args - Arguments to find a Question_banks
     * @example
     * // Get one Question_banks
     * const question_banks = await prisma.question_banks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends question_banksFindFirstArgs>(args?: SelectSubset<T, question_banksFindFirstArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Question_banks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {question_banksFindFirstOrThrowArgs} args - Arguments to find a Question_banks
     * @example
     * // Get one Question_banks
     * const question_banks = await prisma.question_banks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends question_banksFindFirstOrThrowArgs>(args?: SelectSubset<T, question_banksFindFirstOrThrowArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Question_banks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {question_banksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Question_banks
     * const question_banks = await prisma.question_banks.findMany()
     * 
     * // Get first 10 Question_banks
     * const question_banks = await prisma.question_banks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const question_banksWithIdOnly = await prisma.question_banks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends question_banksFindManyArgs>(args?: SelectSubset<T, question_banksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Question_banks.
     * @param {question_banksCreateArgs} args - Arguments to create a Question_banks.
     * @example
     * // Create one Question_banks
     * const Question_banks = await prisma.question_banks.create({
     *   data: {
     *     // ... data to create a Question_banks
     *   }
     * })
     * 
     */
    create<T extends question_banksCreateArgs>(args: SelectSubset<T, question_banksCreateArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Question_banks.
     * @param {question_banksCreateManyArgs} args - Arguments to create many Question_banks.
     * @example
     * // Create many Question_banks
     * const question_banks = await prisma.question_banks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends question_banksCreateManyArgs>(args?: SelectSubset<T, question_banksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Question_banks and returns the data saved in the database.
     * @param {question_banksCreateManyAndReturnArgs} args - Arguments to create many Question_banks.
     * @example
     * // Create many Question_banks
     * const question_banks = await prisma.question_banks.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Question_banks and only return the `id`
     * const question_banksWithIdOnly = await prisma.question_banks.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends question_banksCreateManyAndReturnArgs>(args?: SelectSubset<T, question_banksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Question_banks.
     * @param {question_banksDeleteArgs} args - Arguments to delete one Question_banks.
     * @example
     * // Delete one Question_banks
     * const Question_banks = await prisma.question_banks.delete({
     *   where: {
     *     // ... filter to delete one Question_banks
     *   }
     * })
     * 
     */
    delete<T extends question_banksDeleteArgs>(args: SelectSubset<T, question_banksDeleteArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Question_banks.
     * @param {question_banksUpdateArgs} args - Arguments to update one Question_banks.
     * @example
     * // Update one Question_banks
     * const question_banks = await prisma.question_banks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends question_banksUpdateArgs>(args: SelectSubset<T, question_banksUpdateArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Question_banks.
     * @param {question_banksDeleteManyArgs} args - Arguments to filter Question_banks to delete.
     * @example
     * // Delete a few Question_banks
     * const { count } = await prisma.question_banks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends question_banksDeleteManyArgs>(args?: SelectSubset<T, question_banksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Question_banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {question_banksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Question_banks
     * const question_banks = await prisma.question_banks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends question_banksUpdateManyArgs>(args: SelectSubset<T, question_banksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Question_banks and returns the data updated in the database.
     * @param {question_banksUpdateManyAndReturnArgs} args - Arguments to update many Question_banks.
     * @example
     * // Update many Question_banks
     * const question_banks = await prisma.question_banks.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Question_banks and only return the `id`
     * const question_banksWithIdOnly = await prisma.question_banks.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends question_banksUpdateManyAndReturnArgs>(args: SelectSubset<T, question_banksUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Question_banks.
     * @param {question_banksUpsertArgs} args - Arguments to update or create a Question_banks.
     * @example
     * // Update or create a Question_banks
     * const question_banks = await prisma.question_banks.upsert({
     *   create: {
     *     // ... data to create a Question_banks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question_banks we want to update
     *   }
     * })
     */
    upsert<T extends question_banksUpsertArgs>(args: SelectSubset<T, question_banksUpsertArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Question_banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {question_banksCountArgs} args - Arguments to filter Question_banks to count.
     * @example
     * // Count the number of Question_banks
     * const count = await prisma.question_banks.count({
     *   where: {
     *     // ... the filter for the Question_banks we want to count
     *   }
     * })
    **/
    count<T extends question_banksCountArgs>(
      args?: Subset<T, question_banksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Question_banksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question_banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Question_banksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Question_banksAggregateArgs>(args: Subset<T, Question_banksAggregateArgs>): Prisma.PrismaPromise<GetQuestion_banksAggregateType<T>>

    /**
     * Group by Question_banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {question_banksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends question_banksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: question_banksGroupByArgs['orderBy'] }
        : { orderBy?: question_banksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, question_banksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestion_banksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the question_banks model
   */
  readonly fields: question_banksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for question_banks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__question_banksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends question_banks$questionsArgs<ExtArgs> = {}>(args?: Subset<T, question_banks$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    class<T extends classesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classesDefaultArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subject<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    teacher<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    quizzes<T extends question_banks$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, question_banks$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the question_banks model
   */ 
  interface question_banksFieldRefs {
    readonly id: FieldRef<"question_banks", 'Int'>
    readonly teacher_id: FieldRef<"question_banks", 'Int'>
    readonly subject_id: FieldRef<"question_banks", 'Int'>
    readonly class_id: FieldRef<"question_banks", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * question_banks findUnique
   */
  export type question_banksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * Filter, which question_banks to fetch.
     */
    where: question_banksWhereUniqueInput
  }

  /**
   * question_banks findUniqueOrThrow
   */
  export type question_banksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * Filter, which question_banks to fetch.
     */
    where: question_banksWhereUniqueInput
  }

  /**
   * question_banks findFirst
   */
  export type question_banksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * Filter, which question_banks to fetch.
     */
    where?: question_banksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of question_banks to fetch.
     */
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for question_banks.
     */
    cursor?: question_banksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` question_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` question_banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of question_banks.
     */
    distinct?: Question_banksScalarFieldEnum | Question_banksScalarFieldEnum[]
  }

  /**
   * question_banks findFirstOrThrow
   */
  export type question_banksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * Filter, which question_banks to fetch.
     */
    where?: question_banksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of question_banks to fetch.
     */
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for question_banks.
     */
    cursor?: question_banksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` question_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` question_banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of question_banks.
     */
    distinct?: Question_banksScalarFieldEnum | Question_banksScalarFieldEnum[]
  }

  /**
   * question_banks findMany
   */
  export type question_banksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * Filter, which question_banks to fetch.
     */
    where?: question_banksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of question_banks to fetch.
     */
    orderBy?: question_banksOrderByWithRelationInput | question_banksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing question_banks.
     */
    cursor?: question_banksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` question_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` question_banks.
     */
    skip?: number
    distinct?: Question_banksScalarFieldEnum | Question_banksScalarFieldEnum[]
  }

  /**
   * question_banks create
   */
  export type question_banksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * The data needed to create a question_banks.
     */
    data: XOR<question_banksCreateInput, question_banksUncheckedCreateInput>
  }

  /**
   * question_banks createMany
   */
  export type question_banksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many question_banks.
     */
    data: question_banksCreateManyInput | question_banksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * question_banks createManyAndReturn
   */
  export type question_banksCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * The data used to create many question_banks.
     */
    data: question_banksCreateManyInput | question_banksCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * question_banks update
   */
  export type question_banksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * The data needed to update a question_banks.
     */
    data: XOR<question_banksUpdateInput, question_banksUncheckedUpdateInput>
    /**
     * Choose, which question_banks to update.
     */
    where: question_banksWhereUniqueInput
  }

  /**
   * question_banks updateMany
   */
  export type question_banksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update question_banks.
     */
    data: XOR<question_banksUpdateManyMutationInput, question_banksUncheckedUpdateManyInput>
    /**
     * Filter which question_banks to update
     */
    where?: question_banksWhereInput
    /**
     * Limit how many question_banks to update.
     */
    limit?: number
  }

  /**
   * question_banks updateManyAndReturn
   */
  export type question_banksUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * The data used to update question_banks.
     */
    data: XOR<question_banksUpdateManyMutationInput, question_banksUncheckedUpdateManyInput>
    /**
     * Filter which question_banks to update
     */
    where?: question_banksWhereInput
    /**
     * Limit how many question_banks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * question_banks upsert
   */
  export type question_banksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * The filter to search for the question_banks to update in case it exists.
     */
    where: question_banksWhereUniqueInput
    /**
     * In case the question_banks found by the `where` argument doesn't exist, create a new question_banks with this data.
     */
    create: XOR<question_banksCreateInput, question_banksUncheckedCreateInput>
    /**
     * In case the question_banks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<question_banksUpdateInput, question_banksUncheckedUpdateInput>
  }

  /**
   * question_banks delete
   */
  export type question_banksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
    /**
     * Filter which question_banks to delete.
     */
    where: question_banksWhereUniqueInput
  }

  /**
   * question_banks deleteMany
   */
  export type question_banksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which question_banks to delete
     */
    where?: question_banksWhereInput
    /**
     * Limit how many question_banks to delete.
     */
    limit?: number
  }

  /**
   * question_banks.questions
   */
  export type question_banks$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    cursor?: questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * question_banks.quizzes
   */
  export type question_banks$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    cursor?: quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * question_banks without action
   */
  export type question_banksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question_banks
     */
    select?: question_banksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the question_banks
     */
    omit?: question_banksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: question_banksInclude<ExtArgs> | null
  }


  /**
   * Model questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id: number | null
    question_bank_id: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    id: number | null
    question_bank_id: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    id: number | null
    content: string | null
    question_bank_id: number | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id: number | null
    content: string | null
    question_bank_id: number | null
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    content: number
    question_bank_id: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id?: true
    question_bank_id?: true
  }

  export type QuestionsSumAggregateInputType = {
    id?: true
    question_bank_id?: true
  }

  export type QuestionsMinAggregateInputType = {
    id?: true
    content?: true
    question_bank_id?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    content?: true
    question_bank_id?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    content?: true
    question_bank_id?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to aggregate.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithAggregationInput | questionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    id: number
    content: string
    question_bank_id: number
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    quiz_questions?: boolean | questions$quiz_questionsArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type questionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type questionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type questionsSelectScalar = {
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
  }

  export type questionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "question_bank_id", ExtArgs["result"]["questions"]>
  export type questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    quiz_questions?: boolean | questions$quiz_questionsArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type questionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
  }
  export type questionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
  }

  export type $questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "questions"
    objects: {
      question_bank: Prisma.$question_banksPayload<ExtArgs>
      quiz_questions: Prisma.$quiz_questionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      question_bank_id: number
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }

  type questionsGetPayload<S extends boolean | null | undefined | questionsDefaultArgs> = $Result.GetResult<Prisma.$questionsPayload, S>

  type questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<questionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['questions'], meta: { name: 'questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {questionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends questionsFindUniqueArgs>(args: SelectSubset<T, questionsFindUniqueArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Questions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {questionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends questionsFindUniqueOrThrowArgs>(args: SelectSubset<T, questionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends questionsFindFirstArgs>(args?: SelectSubset<T, questionsFindFirstArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends questionsFindFirstOrThrowArgs>(args?: SelectSubset<T, questionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends questionsFindManyArgs>(args?: SelectSubset<T, questionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
     */
    create<T extends questionsCreateArgs>(args: SelectSubset<T, questionsCreateArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Questions.
     * @param {questionsCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const questions = await prisma.questions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends questionsCreateManyArgs>(args?: SelectSubset<T, questionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {questionsCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const questions = await prisma.questions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionsWithIdOnly = await prisma.questions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends questionsCreateManyAndReturnArgs>(args?: SelectSubset<T, questionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
     */
    delete<T extends questionsDeleteArgs>(args: SelectSubset<T, questionsDeleteArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends questionsUpdateArgs>(args: SelectSubset<T, questionsUpdateArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends questionsDeleteManyArgs>(args?: SelectSubset<T, questionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends questionsUpdateManyArgs>(args: SelectSubset<T, questionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {questionsUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionsWithIdOnly = await prisma.questions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends questionsUpdateManyAndReturnArgs>(args: SelectSubset<T, questionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
     */
    upsert<T extends questionsUpsertArgs>(args: SelectSubset<T, questionsUpsertArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionsCountArgs>(
      args?: Subset<T, questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionsGroupByArgs['orderBy'] }
        : { orderBy?: questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the questions model
   */
  readonly fields: questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question_bank<T extends question_banksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, question_banksDefaultArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    quiz_questions<T extends questions$quiz_questionsArgs<ExtArgs> = {}>(args?: Subset<T, questions$quiz_questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the questions model
   */ 
  interface questionsFieldRefs {
    readonly id: FieldRef<"questions", 'Int'>
    readonly content: FieldRef<"questions", 'String'>
    readonly question_bank_id: FieldRef<"questions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * questions findUnique
   */
  export type questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions findUniqueOrThrow
   */
  export type questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions findFirst
   */
  export type questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions findFirstOrThrow
   */
  export type questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions findMany
   */
  export type questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * questions create
   */
  export type questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a questions.
     */
    data: XOR<questionsCreateInput, questionsUncheckedCreateInput>
  }

  /**
   * questions createMany
   */
  export type questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionsCreateManyInput | questionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * questions createManyAndReturn
   */
  export type questionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * The data used to create many questions.
     */
    data: questionsCreateManyInput | questionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * questions update
   */
  export type questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a questions.
     */
    data: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
    /**
     * Choose, which questions to update.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionsWhereInput
    /**
     * Limit how many questions to update.
     */
    limit?: number
  }

  /**
   * questions updateManyAndReturn
   */
  export type questionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * The data used to update questions.
     */
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionsWhereInput
    /**
     * Limit how many questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * questions upsert
   */
  export type questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the questions to update in case it exists.
     */
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
     */
    create: XOR<questionsCreateInput, questionsUncheckedCreateInput>
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
  }

  /**
   * questions delete
   */
  export type questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter which questions to delete.
     */
    where: questionsWhereUniqueInput
  }

  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionsWhereInput
    /**
     * Limit how many questions to delete.
     */
    limit?: number
  }

  /**
   * questions.quiz_questions
   */
  export type questions$quiz_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    where?: quiz_questionsWhereInput
    orderBy?: quiz_questionsOrderByWithRelationInput | quiz_questionsOrderByWithRelationInput[]
    cursor?: quiz_questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Quiz_questionsScalarFieldEnum | Quiz_questionsScalarFieldEnum[]
  }

  /**
   * questions without action
   */
  export type questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the questions
     */
    omit?: questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionsInclude<ExtArgs> | null
  }


  /**
   * Model quizzes
   */

  export type AggregateQuizzes = {
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  export type QuizzesAvgAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizzesSumAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizzesMinAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizzesMaxAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizzesCountAggregateOutputType = {
    id: number
    class_id: number
    subject_id: number
    question_bank_id: number
    _all: number
  }


  export type QuizzesAvgAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizzesSumAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizzesMinAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizzesMaxAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizzesCountAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
    _all?: true
  }

  export type QuizzesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to aggregate.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quizzes
    **/
    _count?: true | QuizzesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizzesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizzesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizzesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizzesMaxAggregateInputType
  }

  export type GetQuizzesAggregateType<T extends QuizzesAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizzes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizzes[P]>
      : GetScalarType<T[P], AggregateQuizzes[P]>
  }




  export type quizzesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quizzesWhereInput
    orderBy?: quizzesOrderByWithAggregationInput | quizzesOrderByWithAggregationInput[]
    by: QuizzesScalarFieldEnum[] | QuizzesScalarFieldEnum
    having?: quizzesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizzesCountAggregateInputType | true
    _avg?: QuizzesAvgAggregateInputType
    _sum?: QuizzesSumAggregateInputType
    _min?: QuizzesMinAggregateInputType
    _max?: QuizzesMaxAggregateInputType
  }

  export type QuizzesGroupByOutputType = {
    id: number
    class_id: number
    subject_id: number
    question_bank_id: number
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  type GetQuizzesGroupByPayload<T extends quizzesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizzesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizzesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
            : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
        }
      >
    >


  export type quizzesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    quiz_questions?: boolean | quizzes$quiz_questionsArgs<ExtArgs>
    student_quizzes?: boolean | quizzes$student_quizzesArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>

  export type quizzesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>

  export type quizzesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>

  export type quizzesSelectScalar = {
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
  }

  export type quizzesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "class_id" | "subject_id" | "question_bank_id", ExtArgs["result"]["quizzes"]>
  export type quizzesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    quiz_questions?: boolean | quizzes$quiz_questionsArgs<ExtArgs>
    student_quizzes?: boolean | quizzes$student_quizzesArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type quizzesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }
  export type quizzesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    question_bank?: boolean | question_banksDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }

  export type $quizzesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "quizzes"
    objects: {
      class: Prisma.$classesPayload<ExtArgs>
      question_bank: Prisma.$question_banksPayload<ExtArgs>
      subject: Prisma.$subjectsPayload<ExtArgs>
      quiz_questions: Prisma.$quiz_questionsPayload<ExtArgs>[]
      student_quizzes: Prisma.$student_quizzesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      class_id: number
      subject_id: number
      question_bank_id: number
    }, ExtArgs["result"]["quizzes"]>
    composites: {}
  }

  type quizzesGetPayload<S extends boolean | null | undefined | quizzesDefaultArgs> = $Result.GetResult<Prisma.$quizzesPayload, S>

  type quizzesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<quizzesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuizzesCountAggregateInputType | true
    }

  export interface quizzesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quizzes'], meta: { name: 'quizzes' } }
    /**
     * Find zero or one Quizzes that matches the filter.
     * @param {quizzesFindUniqueArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends quizzesFindUniqueArgs>(args: SelectSubset<T, quizzesFindUniqueArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Quizzes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {quizzesFindUniqueOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends quizzesFindUniqueOrThrowArgs>(args: SelectSubset<T, quizzesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindFirstArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends quizzesFindFirstArgs>(args?: SelectSubset<T, quizzesFindFirstArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Quizzes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindFirstOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends quizzesFindFirstOrThrowArgs>(args?: SelectSubset<T, quizzesFindFirstOrThrowArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quizzes.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quizzes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizzesWithIdOnly = await prisma.quizzes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends quizzesFindManyArgs>(args?: SelectSubset<T, quizzesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Quizzes.
     * @param {quizzesCreateArgs} args - Arguments to create a Quizzes.
     * @example
     * // Create one Quizzes
     * const Quizzes = await prisma.quizzes.create({
     *   data: {
     *     // ... data to create a Quizzes
     *   }
     * })
     * 
     */
    create<T extends quizzesCreateArgs>(args: SelectSubset<T, quizzesCreateArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Quizzes.
     * @param {quizzesCreateManyArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quizzes = await prisma.quizzes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends quizzesCreateManyArgs>(args?: SelectSubset<T, quizzesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quizzes and returns the data saved in the database.
     * @param {quizzesCreateManyAndReturnArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quizzes = await prisma.quizzes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quizzes and only return the `id`
     * const quizzesWithIdOnly = await prisma.quizzes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends quizzesCreateManyAndReturnArgs>(args?: SelectSubset<T, quizzesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Quizzes.
     * @param {quizzesDeleteArgs} args - Arguments to delete one Quizzes.
     * @example
     * // Delete one Quizzes
     * const Quizzes = await prisma.quizzes.delete({
     *   where: {
     *     // ... filter to delete one Quizzes
     *   }
     * })
     * 
     */
    delete<T extends quizzesDeleteArgs>(args: SelectSubset<T, quizzesDeleteArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Quizzes.
     * @param {quizzesUpdateArgs} args - Arguments to update one Quizzes.
     * @example
     * // Update one Quizzes
     * const quizzes = await prisma.quizzes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends quizzesUpdateArgs>(args: SelectSubset<T, quizzesUpdateArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Quizzes.
     * @param {quizzesDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quizzes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends quizzesDeleteManyArgs>(args?: SelectSubset<T, quizzesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quizzes = await prisma.quizzes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends quizzesUpdateManyArgs>(args: SelectSubset<T, quizzesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes and returns the data updated in the database.
     * @param {quizzesUpdateManyAndReturnArgs} args - Arguments to update many Quizzes.
     * @example
     * // Update many Quizzes
     * const quizzes = await prisma.quizzes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quizzes and only return the `id`
     * const quizzesWithIdOnly = await prisma.quizzes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends quizzesUpdateManyAndReturnArgs>(args: SelectSubset<T, quizzesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Quizzes.
     * @param {quizzesUpsertArgs} args - Arguments to update or create a Quizzes.
     * @example
     * // Update or create a Quizzes
     * const quizzes = await prisma.quizzes.upsert({
     *   create: {
     *     // ... data to create a Quizzes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quizzes we want to update
     *   }
     * })
     */
    upsert<T extends quizzesUpsertArgs>(args: SelectSubset<T, quizzesUpsertArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quizzes.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends quizzesCountArgs>(
      args?: Subset<T, quizzesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizzesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizzesAggregateArgs>(args: Subset<T, QuizzesAggregateArgs>): Prisma.PrismaPromise<GetQuizzesAggregateType<T>>

    /**
     * Group by Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizzesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends quizzesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: quizzesGroupByArgs['orderBy'] }
        : { orderBy?: quizzesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, quizzesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizzesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the quizzes model
   */
  readonly fields: quizzesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for quizzes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__quizzesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends classesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classesDefaultArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    question_bank<T extends question_banksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, question_banksDefaultArgs<ExtArgs>>): Prisma__question_banksClient<$Result.GetResult<Prisma.$question_banksPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subject<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    quiz_questions<T extends quizzes$quiz_questionsArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$quiz_questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    student_quizzes<T extends quizzes$student_quizzesArgs<ExtArgs> = {}>(args?: Subset<T, quizzes$student_quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the quizzes model
   */ 
  interface quizzesFieldRefs {
    readonly id: FieldRef<"quizzes", 'Int'>
    readonly class_id: FieldRef<"quizzes", 'Int'>
    readonly subject_id: FieldRef<"quizzes", 'Int'>
    readonly question_bank_id: FieldRef<"quizzes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * quizzes findUnique
   */
  export type quizzesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes findUniqueOrThrow
   */
  export type quizzesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes findFirst
   */
  export type quizzesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * quizzes findFirstOrThrow
   */
  export type quizzesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * quizzes findMany
   */
  export type quizzesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: quizzesOrderByWithRelationInput | quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quizzes.
     */
    cursor?: quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * quizzes create
   */
  export type quizzesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The data needed to create a quizzes.
     */
    data: XOR<quizzesCreateInput, quizzesUncheckedCreateInput>
  }

  /**
   * quizzes createMany
   */
  export type quizzesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quizzes.
     */
    data: quizzesCreateManyInput | quizzesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * quizzes createManyAndReturn
   */
  export type quizzesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * The data used to create many quizzes.
     */
    data: quizzesCreateManyInput | quizzesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * quizzes update
   */
  export type quizzesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The data needed to update a quizzes.
     */
    data: XOR<quizzesUpdateInput, quizzesUncheckedUpdateInput>
    /**
     * Choose, which quizzes to update.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes updateMany
   */
  export type quizzesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quizzes.
     */
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyInput>
    /**
     * Filter which quizzes to update
     */
    where?: quizzesWhereInput
    /**
     * Limit how many quizzes to update.
     */
    limit?: number
  }

  /**
   * quizzes updateManyAndReturn
   */
  export type quizzesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * The data used to update quizzes.
     */
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyInput>
    /**
     * Filter which quizzes to update
     */
    where?: quizzesWhereInput
    /**
     * Limit how many quizzes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * quizzes upsert
   */
  export type quizzesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * The filter to search for the quizzes to update in case it exists.
     */
    where: quizzesWhereUniqueInput
    /**
     * In case the quizzes found by the `where` argument doesn't exist, create a new quizzes with this data.
     */
    create: XOR<quizzesCreateInput, quizzesUncheckedCreateInput>
    /**
     * In case the quizzes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quizzesUpdateInput, quizzesUncheckedUpdateInput>
  }

  /**
   * quizzes delete
   */
  export type quizzesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
    /**
     * Filter which quizzes to delete.
     */
    where: quizzesWhereUniqueInput
  }

  /**
   * quizzes deleteMany
   */
  export type quizzesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to delete
     */
    where?: quizzesWhereInput
    /**
     * Limit how many quizzes to delete.
     */
    limit?: number
  }

  /**
   * quizzes.quiz_questions
   */
  export type quizzes$quiz_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    where?: quiz_questionsWhereInput
    orderBy?: quiz_questionsOrderByWithRelationInput | quiz_questionsOrderByWithRelationInput[]
    cursor?: quiz_questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Quiz_questionsScalarFieldEnum | Quiz_questionsScalarFieldEnum[]
  }

  /**
   * quizzes.student_quizzes
   */
  export type quizzes$student_quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    where?: student_quizzesWhereInput
    orderBy?: student_quizzesOrderByWithRelationInput | student_quizzesOrderByWithRelationInput[]
    cursor?: student_quizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student_quizzesScalarFieldEnum | Student_quizzesScalarFieldEnum[]
  }

  /**
   * quizzes without action
   */
  export type quizzesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quizzes
     */
    select?: quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quizzes
     */
    omit?: quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quizzesInclude<ExtArgs> | null
  }


  /**
   * Model quiz_questions
   */

  export type AggregateQuiz_questions = {
    _count: Quiz_questionsCountAggregateOutputType | null
    _avg: Quiz_questionsAvgAggregateOutputType | null
    _sum: Quiz_questionsSumAggregateOutputType | null
    _min: Quiz_questionsMinAggregateOutputType | null
    _max: Quiz_questionsMaxAggregateOutputType | null
  }

  export type Quiz_questionsAvgAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type Quiz_questionsSumAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type Quiz_questionsMinAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type Quiz_questionsMaxAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type Quiz_questionsCountAggregateOutputType = {
    id: number
    quiz_id: number
    question_id: number
    _all: number
  }


  export type Quiz_questionsAvgAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type Quiz_questionsSumAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type Quiz_questionsMinAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type Quiz_questionsMaxAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type Quiz_questionsCountAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
    _all?: true
  }

  export type Quiz_questionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quiz_questions to aggregate.
     */
    where?: quiz_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_questions to fetch.
     */
    orderBy?: quiz_questionsOrderByWithRelationInput | quiz_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quiz_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quiz_questions
    **/
    _count?: true | Quiz_questionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Quiz_questionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Quiz_questionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Quiz_questionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Quiz_questionsMaxAggregateInputType
  }

  export type GetQuiz_questionsAggregateType<T extends Quiz_questionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz_questions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz_questions[P]>
      : GetScalarType<T[P], AggregateQuiz_questions[P]>
  }




  export type quiz_questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: quiz_questionsWhereInput
    orderBy?: quiz_questionsOrderByWithAggregationInput | quiz_questionsOrderByWithAggregationInput[]
    by: Quiz_questionsScalarFieldEnum[] | Quiz_questionsScalarFieldEnum
    having?: quiz_questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Quiz_questionsCountAggregateInputType | true
    _avg?: Quiz_questionsAvgAggregateInputType
    _sum?: Quiz_questionsSumAggregateInputType
    _min?: Quiz_questionsMinAggregateInputType
    _max?: Quiz_questionsMaxAggregateInputType
  }

  export type Quiz_questionsGroupByOutputType = {
    id: number
    quiz_id: number
    question_id: number
    _count: Quiz_questionsCountAggregateOutputType | null
    _avg: Quiz_questionsAvgAggregateOutputType | null
    _sum: Quiz_questionsSumAggregateOutputType | null
    _min: Quiz_questionsMinAggregateOutputType | null
    _max: Quiz_questionsMaxAggregateOutputType | null
  }

  type GetQuiz_questionsGroupByPayload<T extends quiz_questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Quiz_questionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Quiz_questionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Quiz_questionsGroupByOutputType[P]>
            : GetScalarType<T[P], Quiz_questionsGroupByOutputType[P]>
        }
      >
    >


  export type quiz_questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
    question?: boolean | questionsDefaultArgs<ExtArgs>
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz_questions"]>

  export type quiz_questionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
    question?: boolean | questionsDefaultArgs<ExtArgs>
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz_questions"]>

  export type quiz_questionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
    question?: boolean | questionsDefaultArgs<ExtArgs>
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz_questions"]>

  export type quiz_questionsSelectScalar = {
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
  }

  export type quiz_questionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quiz_id" | "question_id", ExtArgs["result"]["quiz_questions"]>
  export type quiz_questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | questionsDefaultArgs<ExtArgs>
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
  }
  export type quiz_questionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | questionsDefaultArgs<ExtArgs>
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
  }
  export type quiz_questionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | questionsDefaultArgs<ExtArgs>
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
  }

  export type $quiz_questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "quiz_questions"
    objects: {
      question: Prisma.$questionsPayload<ExtArgs>
      quiz: Prisma.$quizzesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quiz_id: number
      question_id: number
    }, ExtArgs["result"]["quiz_questions"]>
    composites: {}
  }

  type quiz_questionsGetPayload<S extends boolean | null | undefined | quiz_questionsDefaultArgs> = $Result.GetResult<Prisma.$quiz_questionsPayload, S>

  type quiz_questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<quiz_questionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Quiz_questionsCountAggregateInputType | true
    }

  export interface quiz_questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quiz_questions'], meta: { name: 'quiz_questions' } }
    /**
     * Find zero or one Quiz_questions that matches the filter.
     * @param {quiz_questionsFindUniqueArgs} args - Arguments to find a Quiz_questions
     * @example
     * // Get one Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends quiz_questionsFindUniqueArgs>(args: SelectSubset<T, quiz_questionsFindUniqueArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Quiz_questions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {quiz_questionsFindUniqueOrThrowArgs} args - Arguments to find a Quiz_questions
     * @example
     * // Get one Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends quiz_questionsFindUniqueOrThrowArgs>(args: SelectSubset<T, quiz_questionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Quiz_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_questionsFindFirstArgs} args - Arguments to find a Quiz_questions
     * @example
     * // Get one Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends quiz_questionsFindFirstArgs>(args?: SelectSubset<T, quiz_questionsFindFirstArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Quiz_questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_questionsFindFirstOrThrowArgs} args - Arguments to find a Quiz_questions
     * @example
     * // Get one Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends quiz_questionsFindFirstOrThrowArgs>(args?: SelectSubset<T, quiz_questionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Quiz_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_questionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.findMany()
     * 
     * // Get first 10 Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quiz_questionsWithIdOnly = await prisma.quiz_questions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends quiz_questionsFindManyArgs>(args?: SelectSubset<T, quiz_questionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Quiz_questions.
     * @param {quiz_questionsCreateArgs} args - Arguments to create a Quiz_questions.
     * @example
     * // Create one Quiz_questions
     * const Quiz_questions = await prisma.quiz_questions.create({
     *   data: {
     *     // ... data to create a Quiz_questions
     *   }
     * })
     * 
     */
    create<T extends quiz_questionsCreateArgs>(args: SelectSubset<T, quiz_questionsCreateArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Quiz_questions.
     * @param {quiz_questionsCreateManyArgs} args - Arguments to create many Quiz_questions.
     * @example
     * // Create many Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends quiz_questionsCreateManyArgs>(args?: SelectSubset<T, quiz_questionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quiz_questions and returns the data saved in the database.
     * @param {quiz_questionsCreateManyAndReturnArgs} args - Arguments to create many Quiz_questions.
     * @example
     * // Create many Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quiz_questions and only return the `id`
     * const quiz_questionsWithIdOnly = await prisma.quiz_questions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends quiz_questionsCreateManyAndReturnArgs>(args?: SelectSubset<T, quiz_questionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Quiz_questions.
     * @param {quiz_questionsDeleteArgs} args - Arguments to delete one Quiz_questions.
     * @example
     * // Delete one Quiz_questions
     * const Quiz_questions = await prisma.quiz_questions.delete({
     *   where: {
     *     // ... filter to delete one Quiz_questions
     *   }
     * })
     * 
     */
    delete<T extends quiz_questionsDeleteArgs>(args: SelectSubset<T, quiz_questionsDeleteArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Quiz_questions.
     * @param {quiz_questionsUpdateArgs} args - Arguments to update one Quiz_questions.
     * @example
     * // Update one Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends quiz_questionsUpdateArgs>(args: SelectSubset<T, quiz_questionsUpdateArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Quiz_questions.
     * @param {quiz_questionsDeleteManyArgs} args - Arguments to filter Quiz_questions to delete.
     * @example
     * // Delete a few Quiz_questions
     * const { count } = await prisma.quiz_questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends quiz_questionsDeleteManyArgs>(args?: SelectSubset<T, quiz_questionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quiz_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends quiz_questionsUpdateManyArgs>(args: SelectSubset<T, quiz_questionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quiz_questions and returns the data updated in the database.
     * @param {quiz_questionsUpdateManyAndReturnArgs} args - Arguments to update many Quiz_questions.
     * @example
     * // Update many Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quiz_questions and only return the `id`
     * const quiz_questionsWithIdOnly = await prisma.quiz_questions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends quiz_questionsUpdateManyAndReturnArgs>(args: SelectSubset<T, quiz_questionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Quiz_questions.
     * @param {quiz_questionsUpsertArgs} args - Arguments to update or create a Quiz_questions.
     * @example
     * // Update or create a Quiz_questions
     * const quiz_questions = await prisma.quiz_questions.upsert({
     *   create: {
     *     // ... data to create a Quiz_questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz_questions we want to update
     *   }
     * })
     */
    upsert<T extends quiz_questionsUpsertArgs>(args: SelectSubset<T, quiz_questionsUpsertArgs<ExtArgs>>): Prisma__quiz_questionsClient<$Result.GetResult<Prisma.$quiz_questionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Quiz_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_questionsCountArgs} args - Arguments to filter Quiz_questions to count.
     * @example
     * // Count the number of Quiz_questions
     * const count = await prisma.quiz_questions.count({
     *   where: {
     *     // ... the filter for the Quiz_questions we want to count
     *   }
     * })
    **/
    count<T extends quiz_questionsCountArgs>(
      args?: Subset<T, quiz_questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Quiz_questionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quiz_questionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Quiz_questionsAggregateArgs>(args: Subset<T, Quiz_questionsAggregateArgs>): Prisma.PrismaPromise<GetQuiz_questionsAggregateType<T>>

    /**
     * Group by Quiz_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends quiz_questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: quiz_questionsGroupByArgs['orderBy'] }
        : { orderBy?: quiz_questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, quiz_questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuiz_questionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the quiz_questions model
   */
  readonly fields: quiz_questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for quiz_questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__quiz_questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends questionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, questionsDefaultArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    quiz<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the quiz_questions model
   */ 
  interface quiz_questionsFieldRefs {
    readonly id: FieldRef<"quiz_questions", 'Int'>
    readonly quiz_id: FieldRef<"quiz_questions", 'Int'>
    readonly question_id: FieldRef<"quiz_questions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * quiz_questions findUnique
   */
  export type quiz_questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * Filter, which quiz_questions to fetch.
     */
    where: quiz_questionsWhereUniqueInput
  }

  /**
   * quiz_questions findUniqueOrThrow
   */
  export type quiz_questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * Filter, which quiz_questions to fetch.
     */
    where: quiz_questionsWhereUniqueInput
  }

  /**
   * quiz_questions findFirst
   */
  export type quiz_questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * Filter, which quiz_questions to fetch.
     */
    where?: quiz_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_questions to fetch.
     */
    orderBy?: quiz_questionsOrderByWithRelationInput | quiz_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quiz_questions.
     */
    cursor?: quiz_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quiz_questions.
     */
    distinct?: Quiz_questionsScalarFieldEnum | Quiz_questionsScalarFieldEnum[]
  }

  /**
   * quiz_questions findFirstOrThrow
   */
  export type quiz_questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * Filter, which quiz_questions to fetch.
     */
    where?: quiz_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_questions to fetch.
     */
    orderBy?: quiz_questionsOrderByWithRelationInput | quiz_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quiz_questions.
     */
    cursor?: quiz_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quiz_questions.
     */
    distinct?: Quiz_questionsScalarFieldEnum | Quiz_questionsScalarFieldEnum[]
  }

  /**
   * quiz_questions findMany
   */
  export type quiz_questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * Filter, which quiz_questions to fetch.
     */
    where?: quiz_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_questions to fetch.
     */
    orderBy?: quiz_questionsOrderByWithRelationInput | quiz_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quiz_questions.
     */
    cursor?: quiz_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_questions.
     */
    skip?: number
    distinct?: Quiz_questionsScalarFieldEnum | Quiz_questionsScalarFieldEnum[]
  }

  /**
   * quiz_questions create
   */
  export type quiz_questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a quiz_questions.
     */
    data: XOR<quiz_questionsCreateInput, quiz_questionsUncheckedCreateInput>
  }

  /**
   * quiz_questions createMany
   */
  export type quiz_questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quiz_questions.
     */
    data: quiz_questionsCreateManyInput | quiz_questionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * quiz_questions createManyAndReturn
   */
  export type quiz_questionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * The data used to create many quiz_questions.
     */
    data: quiz_questionsCreateManyInput | quiz_questionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * quiz_questions update
   */
  export type quiz_questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a quiz_questions.
     */
    data: XOR<quiz_questionsUpdateInput, quiz_questionsUncheckedUpdateInput>
    /**
     * Choose, which quiz_questions to update.
     */
    where: quiz_questionsWhereUniqueInput
  }

  /**
   * quiz_questions updateMany
   */
  export type quiz_questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quiz_questions.
     */
    data: XOR<quiz_questionsUpdateManyMutationInput, quiz_questionsUncheckedUpdateManyInput>
    /**
     * Filter which quiz_questions to update
     */
    where?: quiz_questionsWhereInput
    /**
     * Limit how many quiz_questions to update.
     */
    limit?: number
  }

  /**
   * quiz_questions updateManyAndReturn
   */
  export type quiz_questionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * The data used to update quiz_questions.
     */
    data: XOR<quiz_questionsUpdateManyMutationInput, quiz_questionsUncheckedUpdateManyInput>
    /**
     * Filter which quiz_questions to update
     */
    where?: quiz_questionsWhereInput
    /**
     * Limit how many quiz_questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * quiz_questions upsert
   */
  export type quiz_questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the quiz_questions to update in case it exists.
     */
    where: quiz_questionsWhereUniqueInput
    /**
     * In case the quiz_questions found by the `where` argument doesn't exist, create a new quiz_questions with this data.
     */
    create: XOR<quiz_questionsCreateInput, quiz_questionsUncheckedCreateInput>
    /**
     * In case the quiz_questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quiz_questionsUpdateInput, quiz_questionsUncheckedUpdateInput>
  }

  /**
   * quiz_questions delete
   */
  export type quiz_questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
    /**
     * Filter which quiz_questions to delete.
     */
    where: quiz_questionsWhereUniqueInput
  }

  /**
   * quiz_questions deleteMany
   */
  export type quiz_questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which quiz_questions to delete
     */
    where?: quiz_questionsWhereInput
    /**
     * Limit how many quiz_questions to delete.
     */
    limit?: number
  }

  /**
   * quiz_questions without action
   */
  export type quiz_questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_questions
     */
    select?: quiz_questionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the quiz_questions
     */
    omit?: quiz_questionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: quiz_questionsInclude<ExtArgs> | null
  }


  /**
   * Model student_quizzes
   */

  export type AggregateStudent_quizzes = {
    _count: Student_quizzesCountAggregateOutputType | null
    _avg: Student_quizzesAvgAggregateOutputType | null
    _sum: Student_quizzesSumAggregateOutputType | null
    _min: Student_quizzesMinAggregateOutputType | null
    _max: Student_quizzesMaxAggregateOutputType | null
  }

  export type Student_quizzesAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type Student_quizzesSumAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type Student_quizzesMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type Student_quizzesMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type Student_quizzesCountAggregateOutputType = {
    id: number
    student_id: number
    quiz_id: number
    _all: number
  }


  export type Student_quizzesAvgAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type Student_quizzesSumAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type Student_quizzesMinAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type Student_quizzesMaxAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type Student_quizzesCountAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
    _all?: true
  }

  export type Student_quizzesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student_quizzes to aggregate.
     */
    where?: student_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_quizzes to fetch.
     */
    orderBy?: student_quizzesOrderByWithRelationInput | student_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: student_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned student_quizzes
    **/
    _count?: true | Student_quizzesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student_quizzesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student_quizzesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student_quizzesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student_quizzesMaxAggregateInputType
  }

  export type GetStudent_quizzesAggregateType<T extends Student_quizzesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent_quizzes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent_quizzes[P]>
      : GetScalarType<T[P], AggregateStudent_quizzes[P]>
  }




  export type student_quizzesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_quizzesWhereInput
    orderBy?: student_quizzesOrderByWithAggregationInput | student_quizzesOrderByWithAggregationInput[]
    by: Student_quizzesScalarFieldEnum[] | Student_quizzesScalarFieldEnum
    having?: student_quizzesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student_quizzesCountAggregateInputType | true
    _avg?: Student_quizzesAvgAggregateInputType
    _sum?: Student_quizzesSumAggregateInputType
    _min?: Student_quizzesMinAggregateInputType
    _max?: Student_quizzesMaxAggregateInputType
  }

  export type Student_quizzesGroupByOutputType = {
    id: number
    student_id: number
    quiz_id: number
    _count: Student_quizzesCountAggregateOutputType | null
    _avg: Student_quizzesAvgAggregateOutputType | null
    _sum: Student_quizzesSumAggregateOutputType | null
    _min: Student_quizzesMinAggregateOutputType | null
    _max: Student_quizzesMaxAggregateOutputType | null
  }

  type GetStudent_quizzesGroupByPayload<T extends student_quizzesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student_quizzesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student_quizzesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student_quizzesGroupByOutputType[P]>
            : GetScalarType<T[P], Student_quizzesGroupByOutputType[P]>
        }
      >
    >


  export type student_quizzesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_quizzes"]>

  export type student_quizzesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_quizzes"]>

  export type student_quizzesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_quizzes"]>

  export type student_quizzesSelectScalar = {
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
  }

  export type student_quizzesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "quiz_id", ExtArgs["result"]["student_quizzes"]>
  export type student_quizzesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type student_quizzesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type student_quizzesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | quizzesDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $student_quizzesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "student_quizzes"
    objects: {
      quiz: Prisma.$quizzesPayload<ExtArgs>
      student: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      quiz_id: number
    }, ExtArgs["result"]["student_quizzes"]>
    composites: {}
  }

  type student_quizzesGetPayload<S extends boolean | null | undefined | student_quizzesDefaultArgs> = $Result.GetResult<Prisma.$student_quizzesPayload, S>

  type student_quizzesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<student_quizzesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Student_quizzesCountAggregateInputType | true
    }

  export interface student_quizzesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['student_quizzes'], meta: { name: 'student_quizzes' } }
    /**
     * Find zero or one Student_quizzes that matches the filter.
     * @param {student_quizzesFindUniqueArgs} args - Arguments to find a Student_quizzes
     * @example
     * // Get one Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends student_quizzesFindUniqueArgs>(args: SelectSubset<T, student_quizzesFindUniqueArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Student_quizzes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {student_quizzesFindUniqueOrThrowArgs} args - Arguments to find a Student_quizzes
     * @example
     * // Get one Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends student_quizzesFindUniqueOrThrowArgs>(args: SelectSubset<T, student_quizzesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Student_quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_quizzesFindFirstArgs} args - Arguments to find a Student_quizzes
     * @example
     * // Get one Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends student_quizzesFindFirstArgs>(args?: SelectSubset<T, student_quizzesFindFirstArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Student_quizzes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_quizzesFindFirstOrThrowArgs} args - Arguments to find a Student_quizzes
     * @example
     * // Get one Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends student_quizzesFindFirstOrThrowArgs>(args?: SelectSubset<T, student_quizzesFindFirstOrThrowArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Student_quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_quizzesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.findMany()
     * 
     * // Get first 10 Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const student_quizzesWithIdOnly = await prisma.student_quizzes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends student_quizzesFindManyArgs>(args?: SelectSubset<T, student_quizzesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Student_quizzes.
     * @param {student_quizzesCreateArgs} args - Arguments to create a Student_quizzes.
     * @example
     * // Create one Student_quizzes
     * const Student_quizzes = await prisma.student_quizzes.create({
     *   data: {
     *     // ... data to create a Student_quizzes
     *   }
     * })
     * 
     */
    create<T extends student_quizzesCreateArgs>(args: SelectSubset<T, student_quizzesCreateArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Student_quizzes.
     * @param {student_quizzesCreateManyArgs} args - Arguments to create many Student_quizzes.
     * @example
     * // Create many Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends student_quizzesCreateManyArgs>(args?: SelectSubset<T, student_quizzesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Student_quizzes and returns the data saved in the database.
     * @param {student_quizzesCreateManyAndReturnArgs} args - Arguments to create many Student_quizzes.
     * @example
     * // Create many Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Student_quizzes and only return the `id`
     * const student_quizzesWithIdOnly = await prisma.student_quizzes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends student_quizzesCreateManyAndReturnArgs>(args?: SelectSubset<T, student_quizzesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Student_quizzes.
     * @param {student_quizzesDeleteArgs} args - Arguments to delete one Student_quizzes.
     * @example
     * // Delete one Student_quizzes
     * const Student_quizzes = await prisma.student_quizzes.delete({
     *   where: {
     *     // ... filter to delete one Student_quizzes
     *   }
     * })
     * 
     */
    delete<T extends student_quizzesDeleteArgs>(args: SelectSubset<T, student_quizzesDeleteArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Student_quizzes.
     * @param {student_quizzesUpdateArgs} args - Arguments to update one Student_quizzes.
     * @example
     * // Update one Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends student_quizzesUpdateArgs>(args: SelectSubset<T, student_quizzesUpdateArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Student_quizzes.
     * @param {student_quizzesDeleteManyArgs} args - Arguments to filter Student_quizzes to delete.
     * @example
     * // Delete a few Student_quizzes
     * const { count } = await prisma.student_quizzes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends student_quizzesDeleteManyArgs>(args?: SelectSubset<T, student_quizzesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_quizzesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends student_quizzesUpdateManyArgs>(args: SelectSubset<T, student_quizzesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_quizzes and returns the data updated in the database.
     * @param {student_quizzesUpdateManyAndReturnArgs} args - Arguments to update many Student_quizzes.
     * @example
     * // Update many Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Student_quizzes and only return the `id`
     * const student_quizzesWithIdOnly = await prisma.student_quizzes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends student_quizzesUpdateManyAndReturnArgs>(args: SelectSubset<T, student_quizzesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Student_quizzes.
     * @param {student_quizzesUpsertArgs} args - Arguments to update or create a Student_quizzes.
     * @example
     * // Update or create a Student_quizzes
     * const student_quizzes = await prisma.student_quizzes.upsert({
     *   create: {
     *     // ... data to create a Student_quizzes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student_quizzes we want to update
     *   }
     * })
     */
    upsert<T extends student_quizzesUpsertArgs>(args: SelectSubset<T, student_quizzesUpsertArgs<ExtArgs>>): Prisma__student_quizzesClient<$Result.GetResult<Prisma.$student_quizzesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Student_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_quizzesCountArgs} args - Arguments to filter Student_quizzes to count.
     * @example
     * // Count the number of Student_quizzes
     * const count = await prisma.student_quizzes.count({
     *   where: {
     *     // ... the filter for the Student_quizzes we want to count
     *   }
     * })
    **/
    count<T extends student_quizzesCountArgs>(
      args?: Subset<T, student_quizzesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student_quizzesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_quizzesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student_quizzesAggregateArgs>(args: Subset<T, Student_quizzesAggregateArgs>): Prisma.PrismaPromise<GetStudent_quizzesAggregateType<T>>

    /**
     * Group by Student_quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_quizzesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends student_quizzesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: student_quizzesGroupByArgs['orderBy'] }
        : { orderBy?: student_quizzesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, student_quizzesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent_quizzesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the student_quizzes model
   */
  readonly fields: student_quizzesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for student_quizzes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__student_quizzesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quiz<T extends quizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, quizzesDefaultArgs<ExtArgs>>): Prisma__quizzesClient<$Result.GetResult<Prisma.$quizzesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    student<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the student_quizzes model
   */ 
  interface student_quizzesFieldRefs {
    readonly id: FieldRef<"student_quizzes", 'Int'>
    readonly student_id: FieldRef<"student_quizzes", 'Int'>
    readonly quiz_id: FieldRef<"student_quizzes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * student_quizzes findUnique
   */
  export type student_quizzesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which student_quizzes to fetch.
     */
    where: student_quizzesWhereUniqueInput
  }

  /**
   * student_quizzes findUniqueOrThrow
   */
  export type student_quizzesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which student_quizzes to fetch.
     */
    where: student_quizzesWhereUniqueInput
  }

  /**
   * student_quizzes findFirst
   */
  export type student_quizzesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which student_quizzes to fetch.
     */
    where?: student_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_quizzes to fetch.
     */
    orderBy?: student_quizzesOrderByWithRelationInput | student_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for student_quizzes.
     */
    cursor?: student_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of student_quizzes.
     */
    distinct?: Student_quizzesScalarFieldEnum | Student_quizzesScalarFieldEnum[]
  }

  /**
   * student_quizzes findFirstOrThrow
   */
  export type student_quizzesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which student_quizzes to fetch.
     */
    where?: student_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_quizzes to fetch.
     */
    orderBy?: student_quizzesOrderByWithRelationInput | student_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for student_quizzes.
     */
    cursor?: student_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of student_quizzes.
     */
    distinct?: Student_quizzesScalarFieldEnum | Student_quizzesScalarFieldEnum[]
  }

  /**
   * student_quizzes findMany
   */
  export type student_quizzesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * Filter, which student_quizzes to fetch.
     */
    where?: student_quizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_quizzes to fetch.
     */
    orderBy?: student_quizzesOrderByWithRelationInput | student_quizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing student_quizzes.
     */
    cursor?: student_quizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_quizzes.
     */
    skip?: number
    distinct?: Student_quizzesScalarFieldEnum | Student_quizzesScalarFieldEnum[]
  }

  /**
   * student_quizzes create
   */
  export type student_quizzesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * The data needed to create a student_quizzes.
     */
    data: XOR<student_quizzesCreateInput, student_quizzesUncheckedCreateInput>
  }

  /**
   * student_quizzes createMany
   */
  export type student_quizzesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many student_quizzes.
     */
    data: student_quizzesCreateManyInput | student_quizzesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * student_quizzes createManyAndReturn
   */
  export type student_quizzesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * The data used to create many student_quizzes.
     */
    data: student_quizzesCreateManyInput | student_quizzesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * student_quizzes update
   */
  export type student_quizzesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * The data needed to update a student_quizzes.
     */
    data: XOR<student_quizzesUpdateInput, student_quizzesUncheckedUpdateInput>
    /**
     * Choose, which student_quizzes to update.
     */
    where: student_quizzesWhereUniqueInput
  }

  /**
   * student_quizzes updateMany
   */
  export type student_quizzesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update student_quizzes.
     */
    data: XOR<student_quizzesUpdateManyMutationInput, student_quizzesUncheckedUpdateManyInput>
    /**
     * Filter which student_quizzes to update
     */
    where?: student_quizzesWhereInput
    /**
     * Limit how many student_quizzes to update.
     */
    limit?: number
  }

  /**
   * student_quizzes updateManyAndReturn
   */
  export type student_quizzesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * The data used to update student_quizzes.
     */
    data: XOR<student_quizzesUpdateManyMutationInput, student_quizzesUncheckedUpdateManyInput>
    /**
     * Filter which student_quizzes to update
     */
    where?: student_quizzesWhereInput
    /**
     * Limit how many student_quizzes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * student_quizzes upsert
   */
  export type student_quizzesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * The filter to search for the student_quizzes to update in case it exists.
     */
    where: student_quizzesWhereUniqueInput
    /**
     * In case the student_quizzes found by the `where` argument doesn't exist, create a new student_quizzes with this data.
     */
    create: XOR<student_quizzesCreateInput, student_quizzesUncheckedCreateInput>
    /**
     * In case the student_quizzes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<student_quizzesUpdateInput, student_quizzesUncheckedUpdateInput>
  }

  /**
   * student_quizzes delete
   */
  export type student_quizzesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
    /**
     * Filter which student_quizzes to delete.
     */
    where: student_quizzesWhereUniqueInput
  }

  /**
   * student_quizzes deleteMany
   */
  export type student_quizzesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student_quizzes to delete
     */
    where?: student_quizzesWhereInput
    /**
     * Limit how many student_quizzes to delete.
     */
    limit?: number
  }

  /**
   * student_quizzes without action
   */
  export type student_quizzesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_quizzes
     */
    select?: student_quizzesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_quizzes
     */
    omit?: student_quizzesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_quizzesInclude<ExtArgs> | null
  }


  /**
   * Model assignments
   */

  export type AggregateAssignments = {
    _count: AssignmentsCountAggregateOutputType | null
    _avg: AssignmentsAvgAggregateOutputType | null
    _sum: AssignmentsSumAggregateOutputType | null
    _min: AssignmentsMinAggregateOutputType | null
    _max: AssignmentsMaxAggregateOutputType | null
  }

  export type AssignmentsAvgAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentsSumAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentsMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    teacher_id: number
    class_id: number
    subject_id: number
    _all: number
  }


  export type AssignmentsAvgAggregateInputType = {
    id?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentsSumAggregateInputType = {
    id?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
    _all?: true
  }

  export type AssignmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which assignments to aggregate.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned assignments
    **/
    _count?: true | AssignmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentsMaxAggregateInputType
  }

  export type GetAssignmentsAggregateType<T extends AssignmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignments[P]>
      : GetScalarType<T[P], AggregateAssignments[P]>
  }




  export type assignmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: assignmentsWhereInput
    orderBy?: assignmentsOrderByWithAggregationInput | assignmentsOrderByWithAggregationInput[]
    by: AssignmentsScalarFieldEnum[] | AssignmentsScalarFieldEnum
    having?: assignmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentsCountAggregateInputType | true
    _avg?: AssignmentsAvgAggregateInputType
    _sum?: AssignmentsSumAggregateInputType
    _min?: AssignmentsMinAggregateInputType
    _max?: AssignmentsMaxAggregateInputType
  }

  export type AssignmentsGroupByOutputType = {
    id: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
    _count: AssignmentsCountAggregateOutputType | null
    _avg: AssignmentsAvgAggregateOutputType | null
    _sum: AssignmentsSumAggregateOutputType | null
    _min: AssignmentsMinAggregateOutputType | null
    _max: AssignmentsMaxAggregateOutputType | null
  }

  type GetAssignmentsGroupByPayload<T extends assignmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentsGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentsGroupByOutputType[P]>
        }
      >
    >


  export type assignmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
    student_assignments?: boolean | assignments$student_assignmentsArgs<ExtArgs>
    _count?: boolean | AssignmentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignments"]>

  export type assignmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignments"]>

  export type assignmentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignments"]>

  export type assignmentsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
  }

  export type assignmentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "teacher_id" | "class_id" | "subject_id", ExtArgs["result"]["assignments"]>
  export type assignmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
    student_assignments?: boolean | assignments$student_assignmentsArgs<ExtArgs>
    _count?: boolean | AssignmentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type assignmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type assignmentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $assignmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "assignments"
    objects: {
      class: Prisma.$classesPayload<ExtArgs>
      subject: Prisma.$subjectsPayload<ExtArgs>
      teacher: Prisma.$usersPayload<ExtArgs>
      student_assignments: Prisma.$student_assignmentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      teacher_id: number
      class_id: number
      subject_id: number
    }, ExtArgs["result"]["assignments"]>
    composites: {}
  }

  type assignmentsGetPayload<S extends boolean | null | undefined | assignmentsDefaultArgs> = $Result.GetResult<Prisma.$assignmentsPayload, S>

  type assignmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<assignmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentsCountAggregateInputType | true
    }

  export interface assignmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['assignments'], meta: { name: 'assignments' } }
    /**
     * Find zero or one Assignments that matches the filter.
     * @param {assignmentsFindUniqueArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends assignmentsFindUniqueArgs>(args: SelectSubset<T, assignmentsFindUniqueArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Assignments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {assignmentsFindUniqueOrThrowArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends assignmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, assignmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsFindFirstArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends assignmentsFindFirstArgs>(args?: SelectSubset<T, assignmentsFindFirstArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Assignments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsFindFirstOrThrowArgs} args - Arguments to find a Assignments
     * @example
     * // Get one Assignments
     * const assignments = await prisma.assignments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends assignmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, assignmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignments.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentsWithIdOnly = await prisma.assignments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends assignmentsFindManyArgs>(args?: SelectSubset<T, assignmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Assignments.
     * @param {assignmentsCreateArgs} args - Arguments to create a Assignments.
     * @example
     * // Create one Assignments
     * const Assignments = await prisma.assignments.create({
     *   data: {
     *     // ... data to create a Assignments
     *   }
     * })
     * 
     */
    create<T extends assignmentsCreateArgs>(args: SelectSubset<T, assignmentsCreateArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Assignments.
     * @param {assignmentsCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignments = await prisma.assignments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends assignmentsCreateManyArgs>(args?: SelectSubset<T, assignmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {assignmentsCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignments = await prisma.assignments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentsWithIdOnly = await prisma.assignments.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends assignmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, assignmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Assignments.
     * @param {assignmentsDeleteArgs} args - Arguments to delete one Assignments.
     * @example
     * // Delete one Assignments
     * const Assignments = await prisma.assignments.delete({
     *   where: {
     *     // ... filter to delete one Assignments
     *   }
     * })
     * 
     */
    delete<T extends assignmentsDeleteArgs>(args: SelectSubset<T, assignmentsDeleteArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Assignments.
     * @param {assignmentsUpdateArgs} args - Arguments to update one Assignments.
     * @example
     * // Update one Assignments
     * const assignments = await prisma.assignments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends assignmentsUpdateArgs>(args: SelectSubset<T, assignmentsUpdateArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Assignments.
     * @param {assignmentsDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends assignmentsDeleteManyArgs>(args?: SelectSubset<T, assignmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignments = await prisma.assignments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends assignmentsUpdateManyArgs>(args: SelectSubset<T, assignmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments and returns the data updated in the database.
     * @param {assignmentsUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
     * @example
     * // Update many Assignments
     * const assignments = await prisma.assignments.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assignments and only return the `id`
     * const assignmentsWithIdOnly = await prisma.assignments.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends assignmentsUpdateManyAndReturnArgs>(args: SelectSubset<T, assignmentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Assignments.
     * @param {assignmentsUpsertArgs} args - Arguments to update or create a Assignments.
     * @example
     * // Update or create a Assignments
     * const assignments = await prisma.assignments.upsert({
     *   create: {
     *     // ... data to create a Assignments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignments we want to update
     *   }
     * })
     */
    upsert<T extends assignmentsUpsertArgs>(args: SelectSubset<T, assignmentsUpsertArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignments.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends assignmentsCountArgs>(
      args?: Subset<T, assignmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentsAggregateArgs>(args: Subset<T, AssignmentsAggregateArgs>): Prisma.PrismaPromise<GetAssignmentsAggregateType<T>>

    /**
     * Group by Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assignmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends assignmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: assignmentsGroupByArgs['orderBy'] }
        : { orderBy?: assignmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, assignmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the assignments model
   */
  readonly fields: assignmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for assignments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__assignmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends classesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classesDefaultArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subject<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    teacher<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    student_assignments<T extends assignments$student_assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, assignments$student_assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the assignments model
   */ 
  interface assignmentsFieldRefs {
    readonly id: FieldRef<"assignments", 'Int'>
    readonly title: FieldRef<"assignments", 'String'>
    readonly description: FieldRef<"assignments", 'String'>
    readonly teacher_id: FieldRef<"assignments", 'Int'>
    readonly class_id: FieldRef<"assignments", 'Int'>
    readonly subject_id: FieldRef<"assignments", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * assignments findUnique
   */
  export type assignmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments findUniqueOrThrow
   */
  export type assignmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments findFirst
   */
  export type assignmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assignments.
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assignments.
     */
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * assignments findFirstOrThrow
   */
  export type assignmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assignments.
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assignments.
     */
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * assignments findMany
   */
  export type assignmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which assignments to fetch.
     */
    where?: assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignments to fetch.
     */
    orderBy?: assignmentsOrderByWithRelationInput | assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing assignments.
     */
    cursor?: assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignments.
     */
    skip?: number
    distinct?: AssignmentsScalarFieldEnum | AssignmentsScalarFieldEnum[]
  }

  /**
   * assignments create
   */
  export type assignmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a assignments.
     */
    data: XOR<assignmentsCreateInput, assignmentsUncheckedCreateInput>
  }

  /**
   * assignments createMany
   */
  export type assignmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many assignments.
     */
    data: assignmentsCreateManyInput | assignmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * assignments createManyAndReturn
   */
  export type assignmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * The data used to create many assignments.
     */
    data: assignmentsCreateManyInput | assignmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * assignments update
   */
  export type assignmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a assignments.
     */
    data: XOR<assignmentsUpdateInput, assignmentsUncheckedUpdateInput>
    /**
     * Choose, which assignments to update.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments updateMany
   */
  export type assignmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update assignments.
     */
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyInput>
    /**
     * Filter which assignments to update
     */
    where?: assignmentsWhereInput
    /**
     * Limit how many assignments to update.
     */
    limit?: number
  }

  /**
   * assignments updateManyAndReturn
   */
  export type assignmentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * The data used to update assignments.
     */
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyInput>
    /**
     * Filter which assignments to update
     */
    where?: assignmentsWhereInput
    /**
     * Limit how many assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * assignments upsert
   */
  export type assignmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the assignments to update in case it exists.
     */
    where: assignmentsWhereUniqueInput
    /**
     * In case the assignments found by the `where` argument doesn't exist, create a new assignments with this data.
     */
    create: XOR<assignmentsCreateInput, assignmentsUncheckedCreateInput>
    /**
     * In case the assignments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<assignmentsUpdateInput, assignmentsUncheckedUpdateInput>
  }

  /**
   * assignments delete
   */
  export type assignmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
    /**
     * Filter which assignments to delete.
     */
    where: assignmentsWhereUniqueInput
  }

  /**
   * assignments deleteMany
   */
  export type assignmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which assignments to delete
     */
    where?: assignmentsWhereInput
    /**
     * Limit how many assignments to delete.
     */
    limit?: number
  }

  /**
   * assignments.student_assignments
   */
  export type assignments$student_assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    where?: student_assignmentsWhereInput
    orderBy?: student_assignmentsOrderByWithRelationInput | student_assignmentsOrderByWithRelationInput[]
    cursor?: student_assignmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student_assignmentsScalarFieldEnum | Student_assignmentsScalarFieldEnum[]
  }

  /**
   * assignments without action
   */
  export type assignmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the assignments
     */
    select?: assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the assignments
     */
    omit?: assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: assignmentsInclude<ExtArgs> | null
  }


  /**
   * Model student_assignments
   */

  export type AggregateStudent_assignments = {
    _count: Student_assignmentsCountAggregateOutputType | null
    _avg: Student_assignmentsAvgAggregateOutputType | null
    _sum: Student_assignmentsSumAggregateOutputType | null
    _min: Student_assignmentsMinAggregateOutputType | null
    _max: Student_assignmentsMaxAggregateOutputType | null
  }

  export type Student_assignmentsAvgAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type Student_assignmentsSumAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type Student_assignmentsMinAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type Student_assignmentsMaxAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type Student_assignmentsCountAggregateOutputType = {
    id: number
    assignment_id: number
    student_id: number
    _all: number
  }


  export type Student_assignmentsAvgAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type Student_assignmentsSumAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type Student_assignmentsMinAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type Student_assignmentsMaxAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type Student_assignmentsCountAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
    _all?: true
  }

  export type Student_assignmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student_assignments to aggregate.
     */
    where?: student_assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_assignments to fetch.
     */
    orderBy?: student_assignmentsOrderByWithRelationInput | student_assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: student_assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned student_assignments
    **/
    _count?: true | Student_assignmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student_assignmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student_assignmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student_assignmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student_assignmentsMaxAggregateInputType
  }

  export type GetStudent_assignmentsAggregateType<T extends Student_assignmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent_assignments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent_assignments[P]>
      : GetScalarType<T[P], AggregateStudent_assignments[P]>
  }




  export type student_assignmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: student_assignmentsWhereInput
    orderBy?: student_assignmentsOrderByWithAggregationInput | student_assignmentsOrderByWithAggregationInput[]
    by: Student_assignmentsScalarFieldEnum[] | Student_assignmentsScalarFieldEnum
    having?: student_assignmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student_assignmentsCountAggregateInputType | true
    _avg?: Student_assignmentsAvgAggregateInputType
    _sum?: Student_assignmentsSumAggregateInputType
    _min?: Student_assignmentsMinAggregateInputType
    _max?: Student_assignmentsMaxAggregateInputType
  }

  export type Student_assignmentsGroupByOutputType = {
    id: number
    assignment_id: number
    student_id: number
    _count: Student_assignmentsCountAggregateOutputType | null
    _avg: Student_assignmentsAvgAggregateOutputType | null
    _sum: Student_assignmentsSumAggregateOutputType | null
    _min: Student_assignmentsMinAggregateOutputType | null
    _max: Student_assignmentsMaxAggregateOutputType | null
  }

  type GetStudent_assignmentsGroupByPayload<T extends student_assignmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student_assignmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student_assignmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student_assignmentsGroupByOutputType[P]>
            : GetScalarType<T[P], Student_assignmentsGroupByOutputType[P]>
        }
      >
    >


  export type student_assignmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
    assignment?: boolean | assignmentsDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_assignments"]>

  export type student_assignmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
    assignment?: boolean | assignmentsDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_assignments"]>

  export type student_assignmentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
    assignment?: boolean | assignmentsDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student_assignments"]>

  export type student_assignmentsSelectScalar = {
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
  }

  export type student_assignmentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assignment_id" | "student_id", ExtArgs["result"]["student_assignments"]>
  export type student_assignmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | assignmentsDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type student_assignmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | assignmentsDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type student_assignmentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | assignmentsDefaultArgs<ExtArgs>
    student?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $student_assignmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "student_assignments"
    objects: {
      assignment: Prisma.$assignmentsPayload<ExtArgs>
      student: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      assignment_id: number
      student_id: number
    }, ExtArgs["result"]["student_assignments"]>
    composites: {}
  }

  type student_assignmentsGetPayload<S extends boolean | null | undefined | student_assignmentsDefaultArgs> = $Result.GetResult<Prisma.$student_assignmentsPayload, S>

  type student_assignmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<student_assignmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Student_assignmentsCountAggregateInputType | true
    }

  export interface student_assignmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['student_assignments'], meta: { name: 'student_assignments' } }
    /**
     * Find zero or one Student_assignments that matches the filter.
     * @param {student_assignmentsFindUniqueArgs} args - Arguments to find a Student_assignments
     * @example
     * // Get one Student_assignments
     * const student_assignments = await prisma.student_assignments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends student_assignmentsFindUniqueArgs>(args: SelectSubset<T, student_assignmentsFindUniqueArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Student_assignments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {student_assignmentsFindUniqueOrThrowArgs} args - Arguments to find a Student_assignments
     * @example
     * // Get one Student_assignments
     * const student_assignments = await prisma.student_assignments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends student_assignmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, student_assignmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Student_assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_assignmentsFindFirstArgs} args - Arguments to find a Student_assignments
     * @example
     * // Get one Student_assignments
     * const student_assignments = await prisma.student_assignments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends student_assignmentsFindFirstArgs>(args?: SelectSubset<T, student_assignmentsFindFirstArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Student_assignments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_assignmentsFindFirstOrThrowArgs} args - Arguments to find a Student_assignments
     * @example
     * // Get one Student_assignments
     * const student_assignments = await prisma.student_assignments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends student_assignmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, student_assignmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Student_assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_assignmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student_assignments
     * const student_assignments = await prisma.student_assignments.findMany()
     * 
     * // Get first 10 Student_assignments
     * const student_assignments = await prisma.student_assignments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const student_assignmentsWithIdOnly = await prisma.student_assignments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends student_assignmentsFindManyArgs>(args?: SelectSubset<T, student_assignmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Student_assignments.
     * @param {student_assignmentsCreateArgs} args - Arguments to create a Student_assignments.
     * @example
     * // Create one Student_assignments
     * const Student_assignments = await prisma.student_assignments.create({
     *   data: {
     *     // ... data to create a Student_assignments
     *   }
     * })
     * 
     */
    create<T extends student_assignmentsCreateArgs>(args: SelectSubset<T, student_assignmentsCreateArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Student_assignments.
     * @param {student_assignmentsCreateManyArgs} args - Arguments to create many Student_assignments.
     * @example
     * // Create many Student_assignments
     * const student_assignments = await prisma.student_assignments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends student_assignmentsCreateManyArgs>(args?: SelectSubset<T, student_assignmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Student_assignments and returns the data saved in the database.
     * @param {student_assignmentsCreateManyAndReturnArgs} args - Arguments to create many Student_assignments.
     * @example
     * // Create many Student_assignments
     * const student_assignments = await prisma.student_assignments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Student_assignments and only return the `id`
     * const student_assignmentsWithIdOnly = await prisma.student_assignments.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends student_assignmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, student_assignmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Student_assignments.
     * @param {student_assignmentsDeleteArgs} args - Arguments to delete one Student_assignments.
     * @example
     * // Delete one Student_assignments
     * const Student_assignments = await prisma.student_assignments.delete({
     *   where: {
     *     // ... filter to delete one Student_assignments
     *   }
     * })
     * 
     */
    delete<T extends student_assignmentsDeleteArgs>(args: SelectSubset<T, student_assignmentsDeleteArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Student_assignments.
     * @param {student_assignmentsUpdateArgs} args - Arguments to update one Student_assignments.
     * @example
     * // Update one Student_assignments
     * const student_assignments = await prisma.student_assignments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends student_assignmentsUpdateArgs>(args: SelectSubset<T, student_assignmentsUpdateArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Student_assignments.
     * @param {student_assignmentsDeleteManyArgs} args - Arguments to filter Student_assignments to delete.
     * @example
     * // Delete a few Student_assignments
     * const { count } = await prisma.student_assignments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends student_assignmentsDeleteManyArgs>(args?: SelectSubset<T, student_assignmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_assignmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student_assignments
     * const student_assignments = await prisma.student_assignments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends student_assignmentsUpdateManyArgs>(args: SelectSubset<T, student_assignmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student_assignments and returns the data updated in the database.
     * @param {student_assignmentsUpdateManyAndReturnArgs} args - Arguments to update many Student_assignments.
     * @example
     * // Update many Student_assignments
     * const student_assignments = await prisma.student_assignments.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Student_assignments and only return the `id`
     * const student_assignmentsWithIdOnly = await prisma.student_assignments.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends student_assignmentsUpdateManyAndReturnArgs>(args: SelectSubset<T, student_assignmentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Student_assignments.
     * @param {student_assignmentsUpsertArgs} args - Arguments to update or create a Student_assignments.
     * @example
     * // Update or create a Student_assignments
     * const student_assignments = await prisma.student_assignments.upsert({
     *   create: {
     *     // ... data to create a Student_assignments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student_assignments we want to update
     *   }
     * })
     */
    upsert<T extends student_assignmentsUpsertArgs>(args: SelectSubset<T, student_assignmentsUpsertArgs<ExtArgs>>): Prisma__student_assignmentsClient<$Result.GetResult<Prisma.$student_assignmentsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Student_assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_assignmentsCountArgs} args - Arguments to filter Student_assignments to count.
     * @example
     * // Count the number of Student_assignments
     * const count = await prisma.student_assignments.count({
     *   where: {
     *     // ... the filter for the Student_assignments we want to count
     *   }
     * })
    **/
    count<T extends student_assignmentsCountArgs>(
      args?: Subset<T, student_assignmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student_assignmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student_assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student_assignmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student_assignmentsAggregateArgs>(args: Subset<T, Student_assignmentsAggregateArgs>): Prisma.PrismaPromise<GetStudent_assignmentsAggregateType<T>>

    /**
     * Group by Student_assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {student_assignmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends student_assignmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: student_assignmentsGroupByArgs['orderBy'] }
        : { orderBy?: student_assignmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, student_assignmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent_assignmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the student_assignments model
   */
  readonly fields: student_assignmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for student_assignments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__student_assignmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends assignmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, assignmentsDefaultArgs<ExtArgs>>): Prisma__assignmentsClient<$Result.GetResult<Prisma.$assignmentsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    student<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the student_assignments model
   */ 
  interface student_assignmentsFieldRefs {
    readonly id: FieldRef<"student_assignments", 'Int'>
    readonly assignment_id: FieldRef<"student_assignments", 'Int'>
    readonly student_id: FieldRef<"student_assignments", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * student_assignments findUnique
   */
  export type student_assignmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which student_assignments to fetch.
     */
    where: student_assignmentsWhereUniqueInput
  }

  /**
   * student_assignments findUniqueOrThrow
   */
  export type student_assignmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which student_assignments to fetch.
     */
    where: student_assignmentsWhereUniqueInput
  }

  /**
   * student_assignments findFirst
   */
  export type student_assignmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which student_assignments to fetch.
     */
    where?: student_assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_assignments to fetch.
     */
    orderBy?: student_assignmentsOrderByWithRelationInput | student_assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for student_assignments.
     */
    cursor?: student_assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of student_assignments.
     */
    distinct?: Student_assignmentsScalarFieldEnum | Student_assignmentsScalarFieldEnum[]
  }

  /**
   * student_assignments findFirstOrThrow
   */
  export type student_assignmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which student_assignments to fetch.
     */
    where?: student_assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_assignments to fetch.
     */
    orderBy?: student_assignmentsOrderByWithRelationInput | student_assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for student_assignments.
     */
    cursor?: student_assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of student_assignments.
     */
    distinct?: Student_assignmentsScalarFieldEnum | Student_assignmentsScalarFieldEnum[]
  }

  /**
   * student_assignments findMany
   */
  export type student_assignmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * Filter, which student_assignments to fetch.
     */
    where?: student_assignmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of student_assignments to fetch.
     */
    orderBy?: student_assignmentsOrderByWithRelationInput | student_assignmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing student_assignments.
     */
    cursor?: student_assignmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` student_assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` student_assignments.
     */
    skip?: number
    distinct?: Student_assignmentsScalarFieldEnum | Student_assignmentsScalarFieldEnum[]
  }

  /**
   * student_assignments create
   */
  export type student_assignmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a student_assignments.
     */
    data: XOR<student_assignmentsCreateInput, student_assignmentsUncheckedCreateInput>
  }

  /**
   * student_assignments createMany
   */
  export type student_assignmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many student_assignments.
     */
    data: student_assignmentsCreateManyInput | student_assignmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * student_assignments createManyAndReturn
   */
  export type student_assignmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * The data used to create many student_assignments.
     */
    data: student_assignmentsCreateManyInput | student_assignmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * student_assignments update
   */
  export type student_assignmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a student_assignments.
     */
    data: XOR<student_assignmentsUpdateInput, student_assignmentsUncheckedUpdateInput>
    /**
     * Choose, which student_assignments to update.
     */
    where: student_assignmentsWhereUniqueInput
  }

  /**
   * student_assignments updateMany
   */
  export type student_assignmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update student_assignments.
     */
    data: XOR<student_assignmentsUpdateManyMutationInput, student_assignmentsUncheckedUpdateManyInput>
    /**
     * Filter which student_assignments to update
     */
    where?: student_assignmentsWhereInput
    /**
     * Limit how many student_assignments to update.
     */
    limit?: number
  }

  /**
   * student_assignments updateManyAndReturn
   */
  export type student_assignmentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * The data used to update student_assignments.
     */
    data: XOR<student_assignmentsUpdateManyMutationInput, student_assignmentsUncheckedUpdateManyInput>
    /**
     * Filter which student_assignments to update
     */
    where?: student_assignmentsWhereInput
    /**
     * Limit how many student_assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * student_assignments upsert
   */
  export type student_assignmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the student_assignments to update in case it exists.
     */
    where: student_assignmentsWhereUniqueInput
    /**
     * In case the student_assignments found by the `where` argument doesn't exist, create a new student_assignments with this data.
     */
    create: XOR<student_assignmentsCreateInput, student_assignmentsUncheckedCreateInput>
    /**
     * In case the student_assignments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<student_assignmentsUpdateInput, student_assignmentsUncheckedUpdateInput>
  }

  /**
   * student_assignments delete
   */
  export type student_assignmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
    /**
     * Filter which student_assignments to delete.
     */
    where: student_assignmentsWhereUniqueInput
  }

  /**
   * student_assignments deleteMany
   */
  export type student_assignmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student_assignments to delete
     */
    where?: student_assignmentsWhereInput
    /**
     * Limit how many student_assignments to delete.
     */
    limit?: number
  }

  /**
   * student_assignments without action
   */
  export type student_assignmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student_assignments
     */
    select?: student_assignmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the student_assignments
     */
    omit?: student_assignmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: student_assignmentsInclude<ExtArgs> | null
  }


  /**
   * Model weekly_schedules
   */

  export type AggregateWeekly_schedules = {
    _count: Weekly_schedulesCountAggregateOutputType | null
    _avg: Weekly_schedulesAvgAggregateOutputType | null
    _sum: Weekly_schedulesSumAggregateOutputType | null
    _min: Weekly_schedulesMinAggregateOutputType | null
    _max: Weekly_schedulesMaxAggregateOutputType | null
  }

  export type Weekly_schedulesAvgAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type Weekly_schedulesSumAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type Weekly_schedulesMinAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type Weekly_schedulesMaxAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type Weekly_schedulesCountAggregateOutputType = {
    id: number
    class_id: number
    teacher_id: number
    subject_id: number
    _all: number
  }


  export type Weekly_schedulesAvgAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type Weekly_schedulesSumAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type Weekly_schedulesMinAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type Weekly_schedulesMaxAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type Weekly_schedulesCountAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
    _all?: true
  }

  export type Weekly_schedulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which weekly_schedules to aggregate.
     */
    where?: weekly_schedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weekly_schedules to fetch.
     */
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: weekly_schedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weekly_schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weekly_schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned weekly_schedules
    **/
    _count?: true | Weekly_schedulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Weekly_schedulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Weekly_schedulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Weekly_schedulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Weekly_schedulesMaxAggregateInputType
  }

  export type GetWeekly_schedulesAggregateType<T extends Weekly_schedulesAggregateArgs> = {
        [P in keyof T & keyof AggregateWeekly_schedules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeekly_schedules[P]>
      : GetScalarType<T[P], AggregateWeekly_schedules[P]>
  }




  export type weekly_schedulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: weekly_schedulesWhereInput
    orderBy?: weekly_schedulesOrderByWithAggregationInput | weekly_schedulesOrderByWithAggregationInput[]
    by: Weekly_schedulesScalarFieldEnum[] | Weekly_schedulesScalarFieldEnum
    having?: weekly_schedulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Weekly_schedulesCountAggregateInputType | true
    _avg?: Weekly_schedulesAvgAggregateInputType
    _sum?: Weekly_schedulesSumAggregateInputType
    _min?: Weekly_schedulesMinAggregateInputType
    _max?: Weekly_schedulesMaxAggregateInputType
  }

  export type Weekly_schedulesGroupByOutputType = {
    id: number
    class_id: number
    teacher_id: number
    subject_id: number
    _count: Weekly_schedulesCountAggregateOutputType | null
    _avg: Weekly_schedulesAvgAggregateOutputType | null
    _sum: Weekly_schedulesSumAggregateOutputType | null
    _min: Weekly_schedulesMinAggregateOutputType | null
    _max: Weekly_schedulesMaxAggregateOutputType | null
  }

  type GetWeekly_schedulesGroupByPayload<T extends weekly_schedulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Weekly_schedulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Weekly_schedulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Weekly_schedulesGroupByOutputType[P]>
            : GetScalarType<T[P], Weekly_schedulesGroupByOutputType[P]>
        }
      >
    >


  export type weekly_schedulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weekly_schedules"]>

  export type weekly_schedulesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weekly_schedules"]>

  export type weekly_schedulesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weekly_schedules"]>

  export type weekly_schedulesSelectScalar = {
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
  }

  export type weekly_schedulesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "class_id" | "teacher_id" | "subject_id", ExtArgs["result"]["weekly_schedules"]>
  export type weekly_schedulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type weekly_schedulesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type weekly_schedulesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | classesDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
    teacher?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $weekly_schedulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "weekly_schedules"
    objects: {
      class: Prisma.$classesPayload<ExtArgs>
      subject: Prisma.$subjectsPayload<ExtArgs>
      teacher: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      class_id: number
      teacher_id: number
      subject_id: number
    }, ExtArgs["result"]["weekly_schedules"]>
    composites: {}
  }

  type weekly_schedulesGetPayload<S extends boolean | null | undefined | weekly_schedulesDefaultArgs> = $Result.GetResult<Prisma.$weekly_schedulesPayload, S>

  type weekly_schedulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<weekly_schedulesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Weekly_schedulesCountAggregateInputType | true
    }

  export interface weekly_schedulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['weekly_schedules'], meta: { name: 'weekly_schedules' } }
    /**
     * Find zero or one Weekly_schedules that matches the filter.
     * @param {weekly_schedulesFindUniqueArgs} args - Arguments to find a Weekly_schedules
     * @example
     * // Get one Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends weekly_schedulesFindUniqueArgs>(args: SelectSubset<T, weekly_schedulesFindUniqueArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Weekly_schedules that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {weekly_schedulesFindUniqueOrThrowArgs} args - Arguments to find a Weekly_schedules
     * @example
     * // Get one Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends weekly_schedulesFindUniqueOrThrowArgs>(args: SelectSubset<T, weekly_schedulesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Weekly_schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weekly_schedulesFindFirstArgs} args - Arguments to find a Weekly_schedules
     * @example
     * // Get one Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends weekly_schedulesFindFirstArgs>(args?: SelectSubset<T, weekly_schedulesFindFirstArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Weekly_schedules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weekly_schedulesFindFirstOrThrowArgs} args - Arguments to find a Weekly_schedules
     * @example
     * // Get one Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends weekly_schedulesFindFirstOrThrowArgs>(args?: SelectSubset<T, weekly_schedulesFindFirstOrThrowArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Weekly_schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weekly_schedulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.findMany()
     * 
     * // Get first 10 Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weekly_schedulesWithIdOnly = await prisma.weekly_schedules.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends weekly_schedulesFindManyArgs>(args?: SelectSubset<T, weekly_schedulesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Weekly_schedules.
     * @param {weekly_schedulesCreateArgs} args - Arguments to create a Weekly_schedules.
     * @example
     * // Create one Weekly_schedules
     * const Weekly_schedules = await prisma.weekly_schedules.create({
     *   data: {
     *     // ... data to create a Weekly_schedules
     *   }
     * })
     * 
     */
    create<T extends weekly_schedulesCreateArgs>(args: SelectSubset<T, weekly_schedulesCreateArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Weekly_schedules.
     * @param {weekly_schedulesCreateManyArgs} args - Arguments to create many Weekly_schedules.
     * @example
     * // Create many Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends weekly_schedulesCreateManyArgs>(args?: SelectSubset<T, weekly_schedulesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Weekly_schedules and returns the data saved in the database.
     * @param {weekly_schedulesCreateManyAndReturnArgs} args - Arguments to create many Weekly_schedules.
     * @example
     * // Create many Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Weekly_schedules and only return the `id`
     * const weekly_schedulesWithIdOnly = await prisma.weekly_schedules.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends weekly_schedulesCreateManyAndReturnArgs>(args?: SelectSubset<T, weekly_schedulesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Weekly_schedules.
     * @param {weekly_schedulesDeleteArgs} args - Arguments to delete one Weekly_schedules.
     * @example
     * // Delete one Weekly_schedules
     * const Weekly_schedules = await prisma.weekly_schedules.delete({
     *   where: {
     *     // ... filter to delete one Weekly_schedules
     *   }
     * })
     * 
     */
    delete<T extends weekly_schedulesDeleteArgs>(args: SelectSubset<T, weekly_schedulesDeleteArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Weekly_schedules.
     * @param {weekly_schedulesUpdateArgs} args - Arguments to update one Weekly_schedules.
     * @example
     * // Update one Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends weekly_schedulesUpdateArgs>(args: SelectSubset<T, weekly_schedulesUpdateArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Weekly_schedules.
     * @param {weekly_schedulesDeleteManyArgs} args - Arguments to filter Weekly_schedules to delete.
     * @example
     * // Delete a few Weekly_schedules
     * const { count } = await prisma.weekly_schedules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends weekly_schedulesDeleteManyArgs>(args?: SelectSubset<T, weekly_schedulesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weekly_schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weekly_schedulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends weekly_schedulesUpdateManyArgs>(args: SelectSubset<T, weekly_schedulesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weekly_schedules and returns the data updated in the database.
     * @param {weekly_schedulesUpdateManyAndReturnArgs} args - Arguments to update many Weekly_schedules.
     * @example
     * // Update many Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Weekly_schedules and only return the `id`
     * const weekly_schedulesWithIdOnly = await prisma.weekly_schedules.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends weekly_schedulesUpdateManyAndReturnArgs>(args: SelectSubset<T, weekly_schedulesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Weekly_schedules.
     * @param {weekly_schedulesUpsertArgs} args - Arguments to update or create a Weekly_schedules.
     * @example
     * // Update or create a Weekly_schedules
     * const weekly_schedules = await prisma.weekly_schedules.upsert({
     *   create: {
     *     // ... data to create a Weekly_schedules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Weekly_schedules we want to update
     *   }
     * })
     */
    upsert<T extends weekly_schedulesUpsertArgs>(args: SelectSubset<T, weekly_schedulesUpsertArgs<ExtArgs>>): Prisma__weekly_schedulesClient<$Result.GetResult<Prisma.$weekly_schedulesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Weekly_schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weekly_schedulesCountArgs} args - Arguments to filter Weekly_schedules to count.
     * @example
     * // Count the number of Weekly_schedules
     * const count = await prisma.weekly_schedules.count({
     *   where: {
     *     // ... the filter for the Weekly_schedules we want to count
     *   }
     * })
    **/
    count<T extends weekly_schedulesCountArgs>(
      args?: Subset<T, weekly_schedulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Weekly_schedulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Weekly_schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Weekly_schedulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Weekly_schedulesAggregateArgs>(args: Subset<T, Weekly_schedulesAggregateArgs>): Prisma.PrismaPromise<GetWeekly_schedulesAggregateType<T>>

    /**
     * Group by Weekly_schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weekly_schedulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends weekly_schedulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: weekly_schedulesGroupByArgs['orderBy'] }
        : { orderBy?: weekly_schedulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, weekly_schedulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeekly_schedulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the weekly_schedules model
   */
  readonly fields: weekly_schedulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for weekly_schedules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__weekly_schedulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends classesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classesDefaultArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subject<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    teacher<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the weekly_schedules model
   */ 
  interface weekly_schedulesFieldRefs {
    readonly id: FieldRef<"weekly_schedules", 'Int'>
    readonly class_id: FieldRef<"weekly_schedules", 'Int'>
    readonly teacher_id: FieldRef<"weekly_schedules", 'Int'>
    readonly subject_id: FieldRef<"weekly_schedules", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * weekly_schedules findUnique
   */
  export type weekly_schedulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * Filter, which weekly_schedules to fetch.
     */
    where: weekly_schedulesWhereUniqueInput
  }

  /**
   * weekly_schedules findUniqueOrThrow
   */
  export type weekly_schedulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * Filter, which weekly_schedules to fetch.
     */
    where: weekly_schedulesWhereUniqueInput
  }

  /**
   * weekly_schedules findFirst
   */
  export type weekly_schedulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * Filter, which weekly_schedules to fetch.
     */
    where?: weekly_schedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weekly_schedules to fetch.
     */
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for weekly_schedules.
     */
    cursor?: weekly_schedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weekly_schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weekly_schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of weekly_schedules.
     */
    distinct?: Weekly_schedulesScalarFieldEnum | Weekly_schedulesScalarFieldEnum[]
  }

  /**
   * weekly_schedules findFirstOrThrow
   */
  export type weekly_schedulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * Filter, which weekly_schedules to fetch.
     */
    where?: weekly_schedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weekly_schedules to fetch.
     */
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for weekly_schedules.
     */
    cursor?: weekly_schedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weekly_schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weekly_schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of weekly_schedules.
     */
    distinct?: Weekly_schedulesScalarFieldEnum | Weekly_schedulesScalarFieldEnum[]
  }

  /**
   * weekly_schedules findMany
   */
  export type weekly_schedulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * Filter, which weekly_schedules to fetch.
     */
    where?: weekly_schedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weekly_schedules to fetch.
     */
    orderBy?: weekly_schedulesOrderByWithRelationInput | weekly_schedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing weekly_schedules.
     */
    cursor?: weekly_schedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weekly_schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weekly_schedules.
     */
    skip?: number
    distinct?: Weekly_schedulesScalarFieldEnum | Weekly_schedulesScalarFieldEnum[]
  }

  /**
   * weekly_schedules create
   */
  export type weekly_schedulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * The data needed to create a weekly_schedules.
     */
    data: XOR<weekly_schedulesCreateInput, weekly_schedulesUncheckedCreateInput>
  }

  /**
   * weekly_schedules createMany
   */
  export type weekly_schedulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many weekly_schedules.
     */
    data: weekly_schedulesCreateManyInput | weekly_schedulesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * weekly_schedules createManyAndReturn
   */
  export type weekly_schedulesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * The data used to create many weekly_schedules.
     */
    data: weekly_schedulesCreateManyInput | weekly_schedulesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * weekly_schedules update
   */
  export type weekly_schedulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * The data needed to update a weekly_schedules.
     */
    data: XOR<weekly_schedulesUpdateInput, weekly_schedulesUncheckedUpdateInput>
    /**
     * Choose, which weekly_schedules to update.
     */
    where: weekly_schedulesWhereUniqueInput
  }

  /**
   * weekly_schedules updateMany
   */
  export type weekly_schedulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update weekly_schedules.
     */
    data: XOR<weekly_schedulesUpdateManyMutationInput, weekly_schedulesUncheckedUpdateManyInput>
    /**
     * Filter which weekly_schedules to update
     */
    where?: weekly_schedulesWhereInput
    /**
     * Limit how many weekly_schedules to update.
     */
    limit?: number
  }

  /**
   * weekly_schedules updateManyAndReturn
   */
  export type weekly_schedulesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * The data used to update weekly_schedules.
     */
    data: XOR<weekly_schedulesUpdateManyMutationInput, weekly_schedulesUncheckedUpdateManyInput>
    /**
     * Filter which weekly_schedules to update
     */
    where?: weekly_schedulesWhereInput
    /**
     * Limit how many weekly_schedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * weekly_schedules upsert
   */
  export type weekly_schedulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * The filter to search for the weekly_schedules to update in case it exists.
     */
    where: weekly_schedulesWhereUniqueInput
    /**
     * In case the weekly_schedules found by the `where` argument doesn't exist, create a new weekly_schedules with this data.
     */
    create: XOR<weekly_schedulesCreateInput, weekly_schedulesUncheckedCreateInput>
    /**
     * In case the weekly_schedules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<weekly_schedulesUpdateInput, weekly_schedulesUncheckedUpdateInput>
  }

  /**
   * weekly_schedules delete
   */
  export type weekly_schedulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
    /**
     * Filter which weekly_schedules to delete.
     */
    where: weekly_schedulesWhereUniqueInput
  }

  /**
   * weekly_schedules deleteMany
   */
  export type weekly_schedulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which weekly_schedules to delete
     */
    where?: weekly_schedulesWhereInput
    /**
     * Limit how many weekly_schedules to delete.
     */
    limit?: number
  }

  /**
   * weekly_schedules without action
   */
  export type weekly_schedulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weekly_schedules
     */
    select?: weekly_schedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the weekly_schedules
     */
    omit?: weekly_schedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weekly_schedulesInclude<ExtArgs> | null
  }


  /**
   * Model study_timetables
   */

  export type AggregateStudy_timetables = {
    _count: Study_timetablesCountAggregateOutputType | null
    _avg: Study_timetablesAvgAggregateOutputType | null
    _sum: Study_timetablesSumAggregateOutputType | null
    _min: Study_timetablesMinAggregateOutputType | null
    _max: Study_timetablesMaxAggregateOutputType | null
  }

  export type Study_timetablesAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type Study_timetablesSumAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type Study_timetablesMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type Study_timetablesMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type Study_timetablesCountAggregateOutputType = {
    id: number
    student_id: number
    subject_id: number
    _all: number
  }


  export type Study_timetablesAvgAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type Study_timetablesSumAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type Study_timetablesMinAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type Study_timetablesMaxAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type Study_timetablesCountAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    _all?: true
  }

  export type Study_timetablesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which study_timetables to aggregate.
     */
    where?: study_timetablesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of study_timetables to fetch.
     */
    orderBy?: study_timetablesOrderByWithRelationInput | study_timetablesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: study_timetablesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` study_timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` study_timetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned study_timetables
    **/
    _count?: true | Study_timetablesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Study_timetablesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Study_timetablesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Study_timetablesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Study_timetablesMaxAggregateInputType
  }

  export type GetStudy_timetablesAggregateType<T extends Study_timetablesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudy_timetables]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudy_timetables[P]>
      : GetScalarType<T[P], AggregateStudy_timetables[P]>
  }




  export type study_timetablesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: study_timetablesWhereInput
    orderBy?: study_timetablesOrderByWithAggregationInput | study_timetablesOrderByWithAggregationInput[]
    by: Study_timetablesScalarFieldEnum[] | Study_timetablesScalarFieldEnum
    having?: study_timetablesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Study_timetablesCountAggregateInputType | true
    _avg?: Study_timetablesAvgAggregateInputType
    _sum?: Study_timetablesSumAggregateInputType
    _min?: Study_timetablesMinAggregateInputType
    _max?: Study_timetablesMaxAggregateInputType
  }

  export type Study_timetablesGroupByOutputType = {
    id: number
    student_id: number
    subject_id: number
    _count: Study_timetablesCountAggregateOutputType | null
    _avg: Study_timetablesAvgAggregateOutputType | null
    _sum: Study_timetablesSumAggregateOutputType | null
    _min: Study_timetablesMinAggregateOutputType | null
    _max: Study_timetablesMaxAggregateOutputType | null
  }

  type GetStudy_timetablesGroupByPayload<T extends study_timetablesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Study_timetablesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Study_timetablesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Study_timetablesGroupByOutputType[P]>
            : GetScalarType<T[P], Study_timetablesGroupByOutputType[P]>
        }
      >
    >


  export type study_timetablesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study_timetables"]>

  export type study_timetablesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study_timetables"]>

  export type study_timetablesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study_timetables"]>

  export type study_timetablesSelectScalar = {
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
  }

  export type study_timetablesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "subject_id", ExtArgs["result"]["study_timetables"]>
  export type study_timetablesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }
  export type study_timetablesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }
  export type study_timetablesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }

  export type $study_timetablesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "study_timetables"
    objects: {
      student: Prisma.$usersPayload<ExtArgs>
      subject: Prisma.$subjectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      subject_id: number
    }, ExtArgs["result"]["study_timetables"]>
    composites: {}
  }

  type study_timetablesGetPayload<S extends boolean | null | undefined | study_timetablesDefaultArgs> = $Result.GetResult<Prisma.$study_timetablesPayload, S>

  type study_timetablesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<study_timetablesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Study_timetablesCountAggregateInputType | true
    }

  export interface study_timetablesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['study_timetables'], meta: { name: 'study_timetables' } }
    /**
     * Find zero or one Study_timetables that matches the filter.
     * @param {study_timetablesFindUniqueArgs} args - Arguments to find a Study_timetables
     * @example
     * // Get one Study_timetables
     * const study_timetables = await prisma.study_timetables.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends study_timetablesFindUniqueArgs>(args: SelectSubset<T, study_timetablesFindUniqueArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Study_timetables that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {study_timetablesFindUniqueOrThrowArgs} args - Arguments to find a Study_timetables
     * @example
     * // Get one Study_timetables
     * const study_timetables = await prisma.study_timetables.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends study_timetablesFindUniqueOrThrowArgs>(args: SelectSubset<T, study_timetablesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Study_timetables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {study_timetablesFindFirstArgs} args - Arguments to find a Study_timetables
     * @example
     * // Get one Study_timetables
     * const study_timetables = await prisma.study_timetables.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends study_timetablesFindFirstArgs>(args?: SelectSubset<T, study_timetablesFindFirstArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Study_timetables that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {study_timetablesFindFirstOrThrowArgs} args - Arguments to find a Study_timetables
     * @example
     * // Get one Study_timetables
     * const study_timetables = await prisma.study_timetables.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends study_timetablesFindFirstOrThrowArgs>(args?: SelectSubset<T, study_timetablesFindFirstOrThrowArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Study_timetables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {study_timetablesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Study_timetables
     * const study_timetables = await prisma.study_timetables.findMany()
     * 
     * // Get first 10 Study_timetables
     * const study_timetables = await prisma.study_timetables.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const study_timetablesWithIdOnly = await prisma.study_timetables.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends study_timetablesFindManyArgs>(args?: SelectSubset<T, study_timetablesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Study_timetables.
     * @param {study_timetablesCreateArgs} args - Arguments to create a Study_timetables.
     * @example
     * // Create one Study_timetables
     * const Study_timetables = await prisma.study_timetables.create({
     *   data: {
     *     // ... data to create a Study_timetables
     *   }
     * })
     * 
     */
    create<T extends study_timetablesCreateArgs>(args: SelectSubset<T, study_timetablesCreateArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Study_timetables.
     * @param {study_timetablesCreateManyArgs} args - Arguments to create many Study_timetables.
     * @example
     * // Create many Study_timetables
     * const study_timetables = await prisma.study_timetables.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends study_timetablesCreateManyArgs>(args?: SelectSubset<T, study_timetablesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Study_timetables and returns the data saved in the database.
     * @param {study_timetablesCreateManyAndReturnArgs} args - Arguments to create many Study_timetables.
     * @example
     * // Create many Study_timetables
     * const study_timetables = await prisma.study_timetables.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Study_timetables and only return the `id`
     * const study_timetablesWithIdOnly = await prisma.study_timetables.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends study_timetablesCreateManyAndReturnArgs>(args?: SelectSubset<T, study_timetablesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Study_timetables.
     * @param {study_timetablesDeleteArgs} args - Arguments to delete one Study_timetables.
     * @example
     * // Delete one Study_timetables
     * const Study_timetables = await prisma.study_timetables.delete({
     *   where: {
     *     // ... filter to delete one Study_timetables
     *   }
     * })
     * 
     */
    delete<T extends study_timetablesDeleteArgs>(args: SelectSubset<T, study_timetablesDeleteArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Study_timetables.
     * @param {study_timetablesUpdateArgs} args - Arguments to update one Study_timetables.
     * @example
     * // Update one Study_timetables
     * const study_timetables = await prisma.study_timetables.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends study_timetablesUpdateArgs>(args: SelectSubset<T, study_timetablesUpdateArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Study_timetables.
     * @param {study_timetablesDeleteManyArgs} args - Arguments to filter Study_timetables to delete.
     * @example
     * // Delete a few Study_timetables
     * const { count } = await prisma.study_timetables.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends study_timetablesDeleteManyArgs>(args?: SelectSubset<T, study_timetablesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Study_timetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {study_timetablesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Study_timetables
     * const study_timetables = await prisma.study_timetables.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends study_timetablesUpdateManyArgs>(args: SelectSubset<T, study_timetablesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Study_timetables and returns the data updated in the database.
     * @param {study_timetablesUpdateManyAndReturnArgs} args - Arguments to update many Study_timetables.
     * @example
     * // Update many Study_timetables
     * const study_timetables = await prisma.study_timetables.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Study_timetables and only return the `id`
     * const study_timetablesWithIdOnly = await prisma.study_timetables.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends study_timetablesUpdateManyAndReturnArgs>(args: SelectSubset<T, study_timetablesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Study_timetables.
     * @param {study_timetablesUpsertArgs} args - Arguments to update or create a Study_timetables.
     * @example
     * // Update or create a Study_timetables
     * const study_timetables = await prisma.study_timetables.upsert({
     *   create: {
     *     // ... data to create a Study_timetables
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Study_timetables we want to update
     *   }
     * })
     */
    upsert<T extends study_timetablesUpsertArgs>(args: SelectSubset<T, study_timetablesUpsertArgs<ExtArgs>>): Prisma__study_timetablesClient<$Result.GetResult<Prisma.$study_timetablesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Study_timetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {study_timetablesCountArgs} args - Arguments to filter Study_timetables to count.
     * @example
     * // Count the number of Study_timetables
     * const count = await prisma.study_timetables.count({
     *   where: {
     *     // ... the filter for the Study_timetables we want to count
     *   }
     * })
    **/
    count<T extends study_timetablesCountArgs>(
      args?: Subset<T, study_timetablesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Study_timetablesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Study_timetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Study_timetablesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Study_timetablesAggregateArgs>(args: Subset<T, Study_timetablesAggregateArgs>): Prisma.PrismaPromise<GetStudy_timetablesAggregateType<T>>

    /**
     * Group by Study_timetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {study_timetablesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends study_timetablesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: study_timetablesGroupByArgs['orderBy'] }
        : { orderBy?: study_timetablesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, study_timetablesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudy_timetablesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the study_timetables model
   */
  readonly fields: study_timetablesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for study_timetables.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__study_timetablesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subject<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the study_timetables model
   */ 
  interface study_timetablesFieldRefs {
    readonly id: FieldRef<"study_timetables", 'Int'>
    readonly student_id: FieldRef<"study_timetables", 'Int'>
    readonly subject_id: FieldRef<"study_timetables", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * study_timetables findUnique
   */
  export type study_timetablesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * Filter, which study_timetables to fetch.
     */
    where: study_timetablesWhereUniqueInput
  }

  /**
   * study_timetables findUniqueOrThrow
   */
  export type study_timetablesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * Filter, which study_timetables to fetch.
     */
    where: study_timetablesWhereUniqueInput
  }

  /**
   * study_timetables findFirst
   */
  export type study_timetablesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * Filter, which study_timetables to fetch.
     */
    where?: study_timetablesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of study_timetables to fetch.
     */
    orderBy?: study_timetablesOrderByWithRelationInput | study_timetablesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for study_timetables.
     */
    cursor?: study_timetablesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` study_timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` study_timetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of study_timetables.
     */
    distinct?: Study_timetablesScalarFieldEnum | Study_timetablesScalarFieldEnum[]
  }

  /**
   * study_timetables findFirstOrThrow
   */
  export type study_timetablesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * Filter, which study_timetables to fetch.
     */
    where?: study_timetablesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of study_timetables to fetch.
     */
    orderBy?: study_timetablesOrderByWithRelationInput | study_timetablesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for study_timetables.
     */
    cursor?: study_timetablesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` study_timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` study_timetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of study_timetables.
     */
    distinct?: Study_timetablesScalarFieldEnum | Study_timetablesScalarFieldEnum[]
  }

  /**
   * study_timetables findMany
   */
  export type study_timetablesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * Filter, which study_timetables to fetch.
     */
    where?: study_timetablesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of study_timetables to fetch.
     */
    orderBy?: study_timetablesOrderByWithRelationInput | study_timetablesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing study_timetables.
     */
    cursor?: study_timetablesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` study_timetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` study_timetables.
     */
    skip?: number
    distinct?: Study_timetablesScalarFieldEnum | Study_timetablesScalarFieldEnum[]
  }

  /**
   * study_timetables create
   */
  export type study_timetablesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * The data needed to create a study_timetables.
     */
    data: XOR<study_timetablesCreateInput, study_timetablesUncheckedCreateInput>
  }

  /**
   * study_timetables createMany
   */
  export type study_timetablesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many study_timetables.
     */
    data: study_timetablesCreateManyInput | study_timetablesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * study_timetables createManyAndReturn
   */
  export type study_timetablesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * The data used to create many study_timetables.
     */
    data: study_timetablesCreateManyInput | study_timetablesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * study_timetables update
   */
  export type study_timetablesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * The data needed to update a study_timetables.
     */
    data: XOR<study_timetablesUpdateInput, study_timetablesUncheckedUpdateInput>
    /**
     * Choose, which study_timetables to update.
     */
    where: study_timetablesWhereUniqueInput
  }

  /**
   * study_timetables updateMany
   */
  export type study_timetablesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update study_timetables.
     */
    data: XOR<study_timetablesUpdateManyMutationInput, study_timetablesUncheckedUpdateManyInput>
    /**
     * Filter which study_timetables to update
     */
    where?: study_timetablesWhereInput
    /**
     * Limit how many study_timetables to update.
     */
    limit?: number
  }

  /**
   * study_timetables updateManyAndReturn
   */
  export type study_timetablesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * The data used to update study_timetables.
     */
    data: XOR<study_timetablesUpdateManyMutationInput, study_timetablesUncheckedUpdateManyInput>
    /**
     * Filter which study_timetables to update
     */
    where?: study_timetablesWhereInput
    /**
     * Limit how many study_timetables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * study_timetables upsert
   */
  export type study_timetablesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * The filter to search for the study_timetables to update in case it exists.
     */
    where: study_timetablesWhereUniqueInput
    /**
     * In case the study_timetables found by the `where` argument doesn't exist, create a new study_timetables with this data.
     */
    create: XOR<study_timetablesCreateInput, study_timetablesUncheckedCreateInput>
    /**
     * In case the study_timetables was found with the provided `where` argument, update it with this data.
     */
    update: XOR<study_timetablesUpdateInput, study_timetablesUncheckedUpdateInput>
  }

  /**
   * study_timetables delete
   */
  export type study_timetablesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
    /**
     * Filter which study_timetables to delete.
     */
    where: study_timetablesWhereUniqueInput
  }

  /**
   * study_timetables deleteMany
   */
  export type study_timetablesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which study_timetables to delete
     */
    where?: study_timetablesWhereInput
    /**
     * Limit how many study_timetables to delete.
     */
    limit?: number
  }

  /**
   * study_timetables without action
   */
  export type study_timetablesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the study_timetables
     */
    select?: study_timetablesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the study_timetables
     */
    omit?: study_timetablesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: study_timetablesInclude<ExtArgs> | null
  }


  /**
   * Model scores
   */

  export type AggregateScores = {
    _count: ScoresCountAggregateOutputType | null
    _avg: ScoresAvgAggregateOutputType | null
    _sum: ScoresSumAggregateOutputType | null
    _min: ScoresMinAggregateOutputType | null
    _max: ScoresMaxAggregateOutputType | null
  }

  export type ScoresAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoresSumAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoresMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoresMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoresCountAggregateOutputType = {
    id: number
    student_id: number
    subject_id: number
    marks: number
    _all: number
  }


  export type ScoresAvgAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoresSumAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoresMinAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoresMaxAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoresCountAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
    _all?: true
  }

  export type ScoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which scores to aggregate.
     */
    where?: scoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of scores to fetch.
     */
    orderBy?: scoresOrderByWithRelationInput | scoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: scoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned scores
    **/
    _count?: true | ScoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoresMaxAggregateInputType
  }

  export type GetScoresAggregateType<T extends ScoresAggregateArgs> = {
        [P in keyof T & keyof AggregateScores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScores[P]>
      : GetScalarType<T[P], AggregateScores[P]>
  }




  export type scoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: scoresWhereInput
    orderBy?: scoresOrderByWithAggregationInput | scoresOrderByWithAggregationInput[]
    by: ScoresScalarFieldEnum[] | ScoresScalarFieldEnum
    having?: scoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoresCountAggregateInputType | true
    _avg?: ScoresAvgAggregateInputType
    _sum?: ScoresSumAggregateInputType
    _min?: ScoresMinAggregateInputType
    _max?: ScoresMaxAggregateInputType
  }

  export type ScoresGroupByOutputType = {
    id: number
    student_id: number
    subject_id: number
    marks: number
    _count: ScoresCountAggregateOutputType | null
    _avg: ScoresAvgAggregateOutputType | null
    _sum: ScoresSumAggregateOutputType | null
    _min: ScoresMinAggregateOutputType | null
    _max: ScoresMaxAggregateOutputType | null
  }

  type GetScoresGroupByPayload<T extends scoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoresGroupByOutputType[P]>
            : GetScalarType<T[P], ScoresGroupByOutputType[P]>
        }
      >
    >


  export type scoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scores"]>

  export type scoresSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scores"]>

  export type scoresSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scores"]>

  export type scoresSelectScalar = {
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
  }

  export type scoresOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "subject_id" | "marks", ExtArgs["result"]["scores"]>
  export type scoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }
  export type scoresIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }
  export type scoresIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | usersDefaultArgs<ExtArgs>
    subject?: boolean | subjectsDefaultArgs<ExtArgs>
  }

  export type $scoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "scores"
    objects: {
      student: Prisma.$usersPayload<ExtArgs>
      subject: Prisma.$subjectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      subject_id: number
      marks: number
    }, ExtArgs["result"]["scores"]>
    composites: {}
  }

  type scoresGetPayload<S extends boolean | null | undefined | scoresDefaultArgs> = $Result.GetResult<Prisma.$scoresPayload, S>

  type scoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<scoresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoresCountAggregateInputType | true
    }

  export interface scoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['scores'], meta: { name: 'scores' } }
    /**
     * Find zero or one Scores that matches the filter.
     * @param {scoresFindUniqueArgs} args - Arguments to find a Scores
     * @example
     * // Get one Scores
     * const scores = await prisma.scores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends scoresFindUniqueArgs>(args: SelectSubset<T, scoresFindUniqueArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Scores that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {scoresFindUniqueOrThrowArgs} args - Arguments to find a Scores
     * @example
     * // Get one Scores
     * const scores = await prisma.scores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends scoresFindUniqueOrThrowArgs>(args: SelectSubset<T, scoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Scores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scoresFindFirstArgs} args - Arguments to find a Scores
     * @example
     * // Get one Scores
     * const scores = await prisma.scores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends scoresFindFirstArgs>(args?: SelectSubset<T, scoresFindFirstArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Scores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scoresFindFirstOrThrowArgs} args - Arguments to find a Scores
     * @example
     * // Get one Scores
     * const scores = await prisma.scores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends scoresFindFirstOrThrowArgs>(args?: SelectSubset<T, scoresFindFirstOrThrowArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Scores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scores
     * const scores = await prisma.scores.findMany()
     * 
     * // Get first 10 Scores
     * const scores = await prisma.scores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoresWithIdOnly = await prisma.scores.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends scoresFindManyArgs>(args?: SelectSubset<T, scoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Scores.
     * @param {scoresCreateArgs} args - Arguments to create a Scores.
     * @example
     * // Create one Scores
     * const Scores = await prisma.scores.create({
     *   data: {
     *     // ... data to create a Scores
     *   }
     * })
     * 
     */
    create<T extends scoresCreateArgs>(args: SelectSubset<T, scoresCreateArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Scores.
     * @param {scoresCreateManyArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const scores = await prisma.scores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends scoresCreateManyArgs>(args?: SelectSubset<T, scoresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scores and returns the data saved in the database.
     * @param {scoresCreateManyAndReturnArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const scores = await prisma.scores.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scores and only return the `id`
     * const scoresWithIdOnly = await prisma.scores.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends scoresCreateManyAndReturnArgs>(args?: SelectSubset<T, scoresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Scores.
     * @param {scoresDeleteArgs} args - Arguments to delete one Scores.
     * @example
     * // Delete one Scores
     * const Scores = await prisma.scores.delete({
     *   where: {
     *     // ... filter to delete one Scores
     *   }
     * })
     * 
     */
    delete<T extends scoresDeleteArgs>(args: SelectSubset<T, scoresDeleteArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Scores.
     * @param {scoresUpdateArgs} args - Arguments to update one Scores.
     * @example
     * // Update one Scores
     * const scores = await prisma.scores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends scoresUpdateArgs>(args: SelectSubset<T, scoresUpdateArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Scores.
     * @param {scoresDeleteManyArgs} args - Arguments to filter Scores to delete.
     * @example
     * // Delete a few Scores
     * const { count } = await prisma.scores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends scoresDeleteManyArgs>(args?: SelectSubset<T, scoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scores
     * const scores = await prisma.scores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends scoresUpdateManyArgs>(args: SelectSubset<T, scoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores and returns the data updated in the database.
     * @param {scoresUpdateManyAndReturnArgs} args - Arguments to update many Scores.
     * @example
     * // Update many Scores
     * const scores = await prisma.scores.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Scores and only return the `id`
     * const scoresWithIdOnly = await prisma.scores.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends scoresUpdateManyAndReturnArgs>(args: SelectSubset<T, scoresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Scores.
     * @param {scoresUpsertArgs} args - Arguments to update or create a Scores.
     * @example
     * // Update or create a Scores
     * const scores = await prisma.scores.upsert({
     *   create: {
     *     // ... data to create a Scores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scores we want to update
     *   }
     * })
     */
    upsert<T extends scoresUpsertArgs>(args: SelectSubset<T, scoresUpsertArgs<ExtArgs>>): Prisma__scoresClient<$Result.GetResult<Prisma.$scoresPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scoresCountArgs} args - Arguments to filter Scores to count.
     * @example
     * // Count the number of Scores
     * const count = await prisma.scores.count({
     *   where: {
     *     // ... the filter for the Scores we want to count
     *   }
     * })
    **/
    count<T extends scoresCountArgs>(
      args?: Subset<T, scoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoresAggregateArgs>(args: Subset<T, ScoresAggregateArgs>): Prisma.PrismaPromise<GetScoresAggregateType<T>>

    /**
     * Group by Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends scoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: scoresGroupByArgs['orderBy'] }
        : { orderBy?: scoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, scoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the scores model
   */
  readonly fields: scoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for scores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__scoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subject<T extends subjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, subjectsDefaultArgs<ExtArgs>>): Prisma__subjectsClient<$Result.GetResult<Prisma.$subjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the scores model
   */ 
  interface scoresFieldRefs {
    readonly id: FieldRef<"scores", 'Int'>
    readonly student_id: FieldRef<"scores", 'Int'>
    readonly subject_id: FieldRef<"scores", 'Int'>
    readonly marks: FieldRef<"scores", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * scores findUnique
   */
  export type scoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * Filter, which scores to fetch.
     */
    where: scoresWhereUniqueInput
  }

  /**
   * scores findUniqueOrThrow
   */
  export type scoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * Filter, which scores to fetch.
     */
    where: scoresWhereUniqueInput
  }

  /**
   * scores findFirst
   */
  export type scoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * Filter, which scores to fetch.
     */
    where?: scoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of scores to fetch.
     */
    orderBy?: scoresOrderByWithRelationInput | scoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for scores.
     */
    cursor?: scoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of scores.
     */
    distinct?: ScoresScalarFieldEnum | ScoresScalarFieldEnum[]
  }

  /**
   * scores findFirstOrThrow
   */
  export type scoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * Filter, which scores to fetch.
     */
    where?: scoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of scores to fetch.
     */
    orderBy?: scoresOrderByWithRelationInput | scoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for scores.
     */
    cursor?: scoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of scores.
     */
    distinct?: ScoresScalarFieldEnum | ScoresScalarFieldEnum[]
  }

  /**
   * scores findMany
   */
  export type scoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * Filter, which scores to fetch.
     */
    where?: scoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of scores to fetch.
     */
    orderBy?: scoresOrderByWithRelationInput | scoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing scores.
     */
    cursor?: scoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` scores.
     */
    skip?: number
    distinct?: ScoresScalarFieldEnum | ScoresScalarFieldEnum[]
  }

  /**
   * scores create
   */
  export type scoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * The data needed to create a scores.
     */
    data: XOR<scoresCreateInput, scoresUncheckedCreateInput>
  }

  /**
   * scores createMany
   */
  export type scoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many scores.
     */
    data: scoresCreateManyInput | scoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * scores createManyAndReturn
   */
  export type scoresCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * The data used to create many scores.
     */
    data: scoresCreateManyInput | scoresCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * scores update
   */
  export type scoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * The data needed to update a scores.
     */
    data: XOR<scoresUpdateInput, scoresUncheckedUpdateInput>
    /**
     * Choose, which scores to update.
     */
    where: scoresWhereUniqueInput
  }

  /**
   * scores updateMany
   */
  export type scoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update scores.
     */
    data: XOR<scoresUpdateManyMutationInput, scoresUncheckedUpdateManyInput>
    /**
     * Filter which scores to update
     */
    where?: scoresWhereInput
    /**
     * Limit how many scores to update.
     */
    limit?: number
  }

  /**
   * scores updateManyAndReturn
   */
  export type scoresUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * The data used to update scores.
     */
    data: XOR<scoresUpdateManyMutationInput, scoresUncheckedUpdateManyInput>
    /**
     * Filter which scores to update
     */
    where?: scoresWhereInput
    /**
     * Limit how many scores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * scores upsert
   */
  export type scoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * The filter to search for the scores to update in case it exists.
     */
    where: scoresWhereUniqueInput
    /**
     * In case the scores found by the `where` argument doesn't exist, create a new scores with this data.
     */
    create: XOR<scoresCreateInput, scoresUncheckedCreateInput>
    /**
     * In case the scores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<scoresUpdateInput, scoresUncheckedUpdateInput>
  }

  /**
   * scores delete
   */
  export type scoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
    /**
     * Filter which scores to delete.
     */
    where: scoresWhereUniqueInput
  }

  /**
   * scores deleteMany
   */
  export type scoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which scores to delete
     */
    where?: scoresWhereInput
    /**
     * Limit how many scores to delete.
     */
    limit?: number
  }

  /**
   * scores without action
   */
  export type scoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the scores
     */
    select?: scoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the scores
     */
    omit?: scoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scoresInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    roll_no: 'roll_no',
    role: 'role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ClassesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    class_teacher_id: 'class_teacher_id'
  };

  export type ClassesScalarFieldEnum = (typeof ClassesScalarFieldEnum)[keyof typeof ClassesScalarFieldEnum]


  export const SubjectsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SubjectsScalarFieldEnum = (typeof SubjectsScalarFieldEnum)[keyof typeof SubjectsScalarFieldEnum]


  export const Question_banksScalarFieldEnum: {
    id: 'id',
    teacher_id: 'teacher_id',
    subject_id: 'subject_id',
    class_id: 'class_id'
  };

  export type Question_banksScalarFieldEnum = (typeof Question_banksScalarFieldEnum)[keyof typeof Question_banksScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    content: 'content',
    question_bank_id: 'question_bank_id'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const QuizzesScalarFieldEnum: {
    id: 'id',
    class_id: 'class_id',
    subject_id: 'subject_id',
    question_bank_id: 'question_bank_id'
  };

  export type QuizzesScalarFieldEnum = (typeof QuizzesScalarFieldEnum)[keyof typeof QuizzesScalarFieldEnum]


  export const Quiz_questionsScalarFieldEnum: {
    id: 'id',
    quiz_id: 'quiz_id',
    question_id: 'question_id'
  };

  export type Quiz_questionsScalarFieldEnum = (typeof Quiz_questionsScalarFieldEnum)[keyof typeof Quiz_questionsScalarFieldEnum]


  export const Student_quizzesScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    quiz_id: 'quiz_id'
  };

  export type Student_quizzesScalarFieldEnum = (typeof Student_quizzesScalarFieldEnum)[keyof typeof Student_quizzesScalarFieldEnum]


  export const AssignmentsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    teacher_id: 'teacher_id',
    class_id: 'class_id',
    subject_id: 'subject_id'
  };

  export type AssignmentsScalarFieldEnum = (typeof AssignmentsScalarFieldEnum)[keyof typeof AssignmentsScalarFieldEnum]


  export const Student_assignmentsScalarFieldEnum: {
    id: 'id',
    assignment_id: 'assignment_id',
    student_id: 'student_id'
  };

  export type Student_assignmentsScalarFieldEnum = (typeof Student_assignmentsScalarFieldEnum)[keyof typeof Student_assignmentsScalarFieldEnum]


  export const Weekly_schedulesScalarFieldEnum: {
    id: 'id',
    class_id: 'class_id',
    teacher_id: 'teacher_id',
    subject_id: 'subject_id'
  };

  export type Weekly_schedulesScalarFieldEnum = (typeof Weekly_schedulesScalarFieldEnum)[keyof typeof Weekly_schedulesScalarFieldEnum]


  export const Study_timetablesScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    subject_id: 'subject_id'
  };

  export type Study_timetablesScalarFieldEnum = (typeof Study_timetablesScalarFieldEnum)[keyof typeof Study_timetablesScalarFieldEnum]


  export const ScoresScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    subject_id: 'subject_id',
    marks: 'marks'
  };

  export type ScoresScalarFieldEnum = (typeof ScoresScalarFieldEnum)[keyof typeof ScoresScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    roll_no?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    assignments?: AssignmentsListRelationFilter
    teacher_classes?: ClassesListRelationFilter
    question_banks?: Question_banksListRelationFilter
    scores?: ScoresListRelationFilter
    student_assignments?: Student_assignmentsListRelationFilter
    student_quizzes?: Student_quizzesListRelationFilter
    study_timetables?: Study_timetablesListRelationFilter
    weekly_schedules?: Weekly_schedulesListRelationFilter
    student_classes?: ClassesListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
    assignments?: assignmentsOrderByRelationAggregateInput
    teacher_classes?: classesOrderByRelationAggregateInput
    question_banks?: question_banksOrderByRelationAggregateInput
    scores?: scoresOrderByRelationAggregateInput
    student_assignments?: student_assignmentsOrderByRelationAggregateInput
    student_quizzes?: student_quizzesOrderByRelationAggregateInput
    study_timetables?: study_timetablesOrderByRelationAggregateInput
    weekly_schedules?: weekly_schedulesOrderByRelationAggregateInput
    student_classes?: classesOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    roll_no?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    assignments?: AssignmentsListRelationFilter
    teacher_classes?: ClassesListRelationFilter
    question_banks?: Question_banksListRelationFilter
    scores?: ScoresListRelationFilter
    student_assignments?: Student_assignmentsListRelationFilter
    student_quizzes?: Student_quizzesListRelationFilter
    study_timetables?: Study_timetablesListRelationFilter
    weekly_schedules?: Weekly_schedulesListRelationFilter
    student_classes?: ClassesListRelationFilter
  }, "id" | "email" | "roll_no">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    roll_no?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
  }

  export type classesWhereInput = {
    AND?: classesWhereInput | classesWhereInput[]
    OR?: classesWhereInput[]
    NOT?: classesWhereInput | classesWhereInput[]
    id?: IntFilter<"classes"> | number
    name?: StringFilter<"classes"> | string
    class_teacher_id?: IntNullableFilter<"classes"> | number | null
    assignments?: AssignmentsListRelationFilter
    teacher?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    question_banks?: Question_banksListRelationFilter
    quizzes?: QuizzesListRelationFilter
    weekly_schedules?: Weekly_schedulesListRelationFilter
    students?: UsersListRelationFilter
  }

  export type classesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrderInput | SortOrder
    assignments?: assignmentsOrderByRelationAggregateInput
    teacher?: usersOrderByWithRelationInput
    question_banks?: question_banksOrderByRelationAggregateInput
    quizzes?: quizzesOrderByRelationAggregateInput
    weekly_schedules?: weekly_schedulesOrderByRelationAggregateInput
    students?: usersOrderByRelationAggregateInput
  }

  export type classesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: classesWhereInput | classesWhereInput[]
    OR?: classesWhereInput[]
    NOT?: classesWhereInput | classesWhereInput[]
    name?: StringFilter<"classes"> | string
    class_teacher_id?: IntNullableFilter<"classes"> | number | null
    assignments?: AssignmentsListRelationFilter
    teacher?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    question_banks?: Question_banksListRelationFilter
    quizzes?: QuizzesListRelationFilter
    weekly_schedules?: Weekly_schedulesListRelationFilter
    students?: UsersListRelationFilter
  }, "id">

  export type classesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrderInput | SortOrder
    _count?: classesCountOrderByAggregateInput
    _avg?: classesAvgOrderByAggregateInput
    _max?: classesMaxOrderByAggregateInput
    _min?: classesMinOrderByAggregateInput
    _sum?: classesSumOrderByAggregateInput
  }

  export type classesScalarWhereWithAggregatesInput = {
    AND?: classesScalarWhereWithAggregatesInput | classesScalarWhereWithAggregatesInput[]
    OR?: classesScalarWhereWithAggregatesInput[]
    NOT?: classesScalarWhereWithAggregatesInput | classesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"classes"> | number
    name?: StringWithAggregatesFilter<"classes"> | string
    class_teacher_id?: IntNullableWithAggregatesFilter<"classes"> | number | null
  }

  export type subjectsWhereInput = {
    AND?: subjectsWhereInput | subjectsWhereInput[]
    OR?: subjectsWhereInput[]
    NOT?: subjectsWhereInput | subjectsWhereInput[]
    id?: IntFilter<"subjects"> | number
    name?: StringFilter<"subjects"> | string
    assignments?: AssignmentsListRelationFilter
    question_banks?: Question_banksListRelationFilter
    quizzes?: QuizzesListRelationFilter
    scores?: ScoresListRelationFilter
    study_timetables?: Study_timetablesListRelationFilter
    weekly_schedules?: Weekly_schedulesListRelationFilter
  }

  export type subjectsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    assignments?: assignmentsOrderByRelationAggregateInput
    question_banks?: question_banksOrderByRelationAggregateInput
    quizzes?: quizzesOrderByRelationAggregateInput
    scores?: scoresOrderByRelationAggregateInput
    study_timetables?: study_timetablesOrderByRelationAggregateInput
    weekly_schedules?: weekly_schedulesOrderByRelationAggregateInput
  }

  export type subjectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: subjectsWhereInput | subjectsWhereInput[]
    OR?: subjectsWhereInput[]
    NOT?: subjectsWhereInput | subjectsWhereInput[]
    name?: StringFilter<"subjects"> | string
    assignments?: AssignmentsListRelationFilter
    question_banks?: Question_banksListRelationFilter
    quizzes?: QuizzesListRelationFilter
    scores?: ScoresListRelationFilter
    study_timetables?: Study_timetablesListRelationFilter
    weekly_schedules?: Weekly_schedulesListRelationFilter
  }, "id">

  export type subjectsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: subjectsCountOrderByAggregateInput
    _avg?: subjectsAvgOrderByAggregateInput
    _max?: subjectsMaxOrderByAggregateInput
    _min?: subjectsMinOrderByAggregateInput
    _sum?: subjectsSumOrderByAggregateInput
  }

  export type subjectsScalarWhereWithAggregatesInput = {
    AND?: subjectsScalarWhereWithAggregatesInput | subjectsScalarWhereWithAggregatesInput[]
    OR?: subjectsScalarWhereWithAggregatesInput[]
    NOT?: subjectsScalarWhereWithAggregatesInput | subjectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"subjects"> | number
    name?: StringWithAggregatesFilter<"subjects"> | string
  }

  export type question_banksWhereInput = {
    AND?: question_banksWhereInput | question_banksWhereInput[]
    OR?: question_banksWhereInput[]
    NOT?: question_banksWhereInput | question_banksWhereInput[]
    id?: IntFilter<"question_banks"> | number
    teacher_id?: IntFilter<"question_banks"> | number
    subject_id?: IntFilter<"question_banks"> | number
    class_id?: IntFilter<"question_banks"> | number
    questions?: QuestionsListRelationFilter
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    teacher?: XOR<UsersScalarRelationFilter, usersWhereInput>
    quizzes?: QuizzesListRelationFilter
  }

  export type question_banksOrderByWithRelationInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
    questions?: questionsOrderByRelationAggregateInput
    class?: classesOrderByWithRelationInput
    subject?: subjectsOrderByWithRelationInput
    teacher?: usersOrderByWithRelationInput
    quizzes?: quizzesOrderByRelationAggregateInput
  }

  export type question_banksWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: question_banksWhereInput | question_banksWhereInput[]
    OR?: question_banksWhereInput[]
    NOT?: question_banksWhereInput | question_banksWhereInput[]
    teacher_id?: IntFilter<"question_banks"> | number
    subject_id?: IntFilter<"question_banks"> | number
    class_id?: IntFilter<"question_banks"> | number
    questions?: QuestionsListRelationFilter
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    teacher?: XOR<UsersScalarRelationFilter, usersWhereInput>
    quizzes?: QuizzesListRelationFilter
  }, "id">

  export type question_banksOrderByWithAggregationInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
    _count?: question_banksCountOrderByAggregateInput
    _avg?: question_banksAvgOrderByAggregateInput
    _max?: question_banksMaxOrderByAggregateInput
    _min?: question_banksMinOrderByAggregateInput
    _sum?: question_banksSumOrderByAggregateInput
  }

  export type question_banksScalarWhereWithAggregatesInput = {
    AND?: question_banksScalarWhereWithAggregatesInput | question_banksScalarWhereWithAggregatesInput[]
    OR?: question_banksScalarWhereWithAggregatesInput[]
    NOT?: question_banksScalarWhereWithAggregatesInput | question_banksScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"question_banks"> | number
    teacher_id?: IntWithAggregatesFilter<"question_banks"> | number
    subject_id?: IntWithAggregatesFilter<"question_banks"> | number
    class_id?: IntWithAggregatesFilter<"question_banks"> | number
  }

  export type questionsWhereInput = {
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    id?: IntFilter<"questions"> | number
    content?: StringFilter<"questions"> | string
    question_bank_id?: IntFilter<"questions"> | number
    question_bank?: XOR<Question_banksScalarRelationFilter, question_banksWhereInput>
    quiz_questions?: Quiz_questionsListRelationFilter
  }

  export type questionsOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
    question_bank?: question_banksOrderByWithRelationInput
    quiz_questions?: quiz_questionsOrderByRelationAggregateInput
  }

  export type questionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    content?: StringFilter<"questions"> | string
    question_bank_id?: IntFilter<"questions"> | number
    question_bank?: XOR<Question_banksScalarRelationFilter, question_banksWhereInput>
    quiz_questions?: Quiz_questionsListRelationFilter
  }, "id">

  export type questionsOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
    _count?: questionsCountOrderByAggregateInput
    _avg?: questionsAvgOrderByAggregateInput
    _max?: questionsMaxOrderByAggregateInput
    _min?: questionsMinOrderByAggregateInput
    _sum?: questionsSumOrderByAggregateInput
  }

  export type questionsScalarWhereWithAggregatesInput = {
    AND?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    OR?: questionsScalarWhereWithAggregatesInput[]
    NOT?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"questions"> | number
    content?: StringWithAggregatesFilter<"questions"> | string
    question_bank_id?: IntWithAggregatesFilter<"questions"> | number
  }

  export type quizzesWhereInput = {
    AND?: quizzesWhereInput | quizzesWhereInput[]
    OR?: quizzesWhereInput[]
    NOT?: quizzesWhereInput | quizzesWhereInput[]
    id?: IntFilter<"quizzes"> | number
    class_id?: IntFilter<"quizzes"> | number
    subject_id?: IntFilter<"quizzes"> | number
    question_bank_id?: IntFilter<"quizzes"> | number
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    question_bank?: XOR<Question_banksScalarRelationFilter, question_banksWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    quiz_questions?: Quiz_questionsListRelationFilter
    student_quizzes?: Student_quizzesListRelationFilter
  }

  export type quizzesOrderByWithRelationInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
    class?: classesOrderByWithRelationInput
    question_bank?: question_banksOrderByWithRelationInput
    subject?: subjectsOrderByWithRelationInput
    quiz_questions?: quiz_questionsOrderByRelationAggregateInput
    student_quizzes?: student_quizzesOrderByRelationAggregateInput
  }

  export type quizzesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: quizzesWhereInput | quizzesWhereInput[]
    OR?: quizzesWhereInput[]
    NOT?: quizzesWhereInput | quizzesWhereInput[]
    class_id?: IntFilter<"quizzes"> | number
    subject_id?: IntFilter<"quizzes"> | number
    question_bank_id?: IntFilter<"quizzes"> | number
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    question_bank?: XOR<Question_banksScalarRelationFilter, question_banksWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    quiz_questions?: Quiz_questionsListRelationFilter
    student_quizzes?: Student_quizzesListRelationFilter
  }, "id">

  export type quizzesOrderByWithAggregationInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
    _count?: quizzesCountOrderByAggregateInput
    _avg?: quizzesAvgOrderByAggregateInput
    _max?: quizzesMaxOrderByAggregateInput
    _min?: quizzesMinOrderByAggregateInput
    _sum?: quizzesSumOrderByAggregateInput
  }

  export type quizzesScalarWhereWithAggregatesInput = {
    AND?: quizzesScalarWhereWithAggregatesInput | quizzesScalarWhereWithAggregatesInput[]
    OR?: quizzesScalarWhereWithAggregatesInput[]
    NOT?: quizzesScalarWhereWithAggregatesInput | quizzesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"quizzes"> | number
    class_id?: IntWithAggregatesFilter<"quizzes"> | number
    subject_id?: IntWithAggregatesFilter<"quizzes"> | number
    question_bank_id?: IntWithAggregatesFilter<"quizzes"> | number
  }

  export type quiz_questionsWhereInput = {
    AND?: quiz_questionsWhereInput | quiz_questionsWhereInput[]
    OR?: quiz_questionsWhereInput[]
    NOT?: quiz_questionsWhereInput | quiz_questionsWhereInput[]
    id?: IntFilter<"quiz_questions"> | number
    quiz_id?: IntFilter<"quiz_questions"> | number
    question_id?: IntFilter<"quiz_questions"> | number
    question?: XOR<QuestionsScalarRelationFilter, questionsWhereInput>
    quiz?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
  }

  export type quiz_questionsOrderByWithRelationInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
    question?: questionsOrderByWithRelationInput
    quiz?: quizzesOrderByWithRelationInput
  }

  export type quiz_questionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: quiz_questionsWhereInput | quiz_questionsWhereInput[]
    OR?: quiz_questionsWhereInput[]
    NOT?: quiz_questionsWhereInput | quiz_questionsWhereInput[]
    quiz_id?: IntFilter<"quiz_questions"> | number
    question_id?: IntFilter<"quiz_questions"> | number
    question?: XOR<QuestionsScalarRelationFilter, questionsWhereInput>
    quiz?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
  }, "id">

  export type quiz_questionsOrderByWithAggregationInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
    _count?: quiz_questionsCountOrderByAggregateInput
    _avg?: quiz_questionsAvgOrderByAggregateInput
    _max?: quiz_questionsMaxOrderByAggregateInput
    _min?: quiz_questionsMinOrderByAggregateInput
    _sum?: quiz_questionsSumOrderByAggregateInput
  }

  export type quiz_questionsScalarWhereWithAggregatesInput = {
    AND?: quiz_questionsScalarWhereWithAggregatesInput | quiz_questionsScalarWhereWithAggregatesInput[]
    OR?: quiz_questionsScalarWhereWithAggregatesInput[]
    NOT?: quiz_questionsScalarWhereWithAggregatesInput | quiz_questionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"quiz_questions"> | number
    quiz_id?: IntWithAggregatesFilter<"quiz_questions"> | number
    question_id?: IntWithAggregatesFilter<"quiz_questions"> | number
  }

  export type student_quizzesWhereInput = {
    AND?: student_quizzesWhereInput | student_quizzesWhereInput[]
    OR?: student_quizzesWhereInput[]
    NOT?: student_quizzesWhereInput | student_quizzesWhereInput[]
    id?: IntFilter<"student_quizzes"> | number
    student_id?: IntFilter<"student_quizzes"> | number
    quiz_id?: IntFilter<"student_quizzes"> | number
    quiz?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type student_quizzesOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
    quiz?: quizzesOrderByWithRelationInput
    student?: usersOrderByWithRelationInput
  }

  export type student_quizzesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: student_quizzesWhereInput | student_quizzesWhereInput[]
    OR?: student_quizzesWhereInput[]
    NOT?: student_quizzesWhereInput | student_quizzesWhereInput[]
    student_id?: IntFilter<"student_quizzes"> | number
    quiz_id?: IntFilter<"student_quizzes"> | number
    quiz?: XOR<QuizzesScalarRelationFilter, quizzesWhereInput>
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type student_quizzesOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
    _count?: student_quizzesCountOrderByAggregateInput
    _avg?: student_quizzesAvgOrderByAggregateInput
    _max?: student_quizzesMaxOrderByAggregateInput
    _min?: student_quizzesMinOrderByAggregateInput
    _sum?: student_quizzesSumOrderByAggregateInput
  }

  export type student_quizzesScalarWhereWithAggregatesInput = {
    AND?: student_quizzesScalarWhereWithAggregatesInput | student_quizzesScalarWhereWithAggregatesInput[]
    OR?: student_quizzesScalarWhereWithAggregatesInput[]
    NOT?: student_quizzesScalarWhereWithAggregatesInput | student_quizzesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"student_quizzes"> | number
    student_id?: IntWithAggregatesFilter<"student_quizzes"> | number
    quiz_id?: IntWithAggregatesFilter<"student_quizzes"> | number
  }

  export type assignmentsWhereInput = {
    AND?: assignmentsWhereInput | assignmentsWhereInput[]
    OR?: assignmentsWhereInput[]
    NOT?: assignmentsWhereInput | assignmentsWhereInput[]
    id?: IntFilter<"assignments"> | number
    title?: StringFilter<"assignments"> | string
    description?: StringFilter<"assignments"> | string
    teacher_id?: IntFilter<"assignments"> | number
    class_id?: IntFilter<"assignments"> | number
    subject_id?: IntFilter<"assignments"> | number
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    teacher?: XOR<UsersScalarRelationFilter, usersWhereInput>
    student_assignments?: Student_assignmentsListRelationFilter
  }

  export type assignmentsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    class?: classesOrderByWithRelationInput
    subject?: subjectsOrderByWithRelationInput
    teacher?: usersOrderByWithRelationInput
    student_assignments?: student_assignmentsOrderByRelationAggregateInput
  }

  export type assignmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: assignmentsWhereInput | assignmentsWhereInput[]
    OR?: assignmentsWhereInput[]
    NOT?: assignmentsWhereInput | assignmentsWhereInput[]
    title?: StringFilter<"assignments"> | string
    description?: StringFilter<"assignments"> | string
    teacher_id?: IntFilter<"assignments"> | number
    class_id?: IntFilter<"assignments"> | number
    subject_id?: IntFilter<"assignments"> | number
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    teacher?: XOR<UsersScalarRelationFilter, usersWhereInput>
    student_assignments?: Student_assignmentsListRelationFilter
  }, "id">

  export type assignmentsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    _count?: assignmentsCountOrderByAggregateInput
    _avg?: assignmentsAvgOrderByAggregateInput
    _max?: assignmentsMaxOrderByAggregateInput
    _min?: assignmentsMinOrderByAggregateInput
    _sum?: assignmentsSumOrderByAggregateInput
  }

  export type assignmentsScalarWhereWithAggregatesInput = {
    AND?: assignmentsScalarWhereWithAggregatesInput | assignmentsScalarWhereWithAggregatesInput[]
    OR?: assignmentsScalarWhereWithAggregatesInput[]
    NOT?: assignmentsScalarWhereWithAggregatesInput | assignmentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"assignments"> | number
    title?: StringWithAggregatesFilter<"assignments"> | string
    description?: StringWithAggregatesFilter<"assignments"> | string
    teacher_id?: IntWithAggregatesFilter<"assignments"> | number
    class_id?: IntWithAggregatesFilter<"assignments"> | number
    subject_id?: IntWithAggregatesFilter<"assignments"> | number
  }

  export type student_assignmentsWhereInput = {
    AND?: student_assignmentsWhereInput | student_assignmentsWhereInput[]
    OR?: student_assignmentsWhereInput[]
    NOT?: student_assignmentsWhereInput | student_assignmentsWhereInput[]
    id?: IntFilter<"student_assignments"> | number
    assignment_id?: IntFilter<"student_assignments"> | number
    student_id?: IntFilter<"student_assignments"> | number
    assignment?: XOR<AssignmentsScalarRelationFilter, assignmentsWhereInput>
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type student_assignmentsOrderByWithRelationInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
    assignment?: assignmentsOrderByWithRelationInput
    student?: usersOrderByWithRelationInput
  }

  export type student_assignmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: student_assignmentsWhereInput | student_assignmentsWhereInput[]
    OR?: student_assignmentsWhereInput[]
    NOT?: student_assignmentsWhereInput | student_assignmentsWhereInput[]
    assignment_id?: IntFilter<"student_assignments"> | number
    student_id?: IntFilter<"student_assignments"> | number
    assignment?: XOR<AssignmentsScalarRelationFilter, assignmentsWhereInput>
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type student_assignmentsOrderByWithAggregationInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
    _count?: student_assignmentsCountOrderByAggregateInput
    _avg?: student_assignmentsAvgOrderByAggregateInput
    _max?: student_assignmentsMaxOrderByAggregateInput
    _min?: student_assignmentsMinOrderByAggregateInput
    _sum?: student_assignmentsSumOrderByAggregateInput
  }

  export type student_assignmentsScalarWhereWithAggregatesInput = {
    AND?: student_assignmentsScalarWhereWithAggregatesInput | student_assignmentsScalarWhereWithAggregatesInput[]
    OR?: student_assignmentsScalarWhereWithAggregatesInput[]
    NOT?: student_assignmentsScalarWhereWithAggregatesInput | student_assignmentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"student_assignments"> | number
    assignment_id?: IntWithAggregatesFilter<"student_assignments"> | number
    student_id?: IntWithAggregatesFilter<"student_assignments"> | number
  }

  export type weekly_schedulesWhereInput = {
    AND?: weekly_schedulesWhereInput | weekly_schedulesWhereInput[]
    OR?: weekly_schedulesWhereInput[]
    NOT?: weekly_schedulesWhereInput | weekly_schedulesWhereInput[]
    id?: IntFilter<"weekly_schedules"> | number
    class_id?: IntFilter<"weekly_schedules"> | number
    teacher_id?: IntFilter<"weekly_schedules"> | number
    subject_id?: IntFilter<"weekly_schedules"> | number
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    teacher?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type weekly_schedulesOrderByWithRelationInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class?: classesOrderByWithRelationInput
    subject?: subjectsOrderByWithRelationInput
    teacher?: usersOrderByWithRelationInput
  }

  export type weekly_schedulesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: weekly_schedulesWhereInput | weekly_schedulesWhereInput[]
    OR?: weekly_schedulesWhereInput[]
    NOT?: weekly_schedulesWhereInput | weekly_schedulesWhereInput[]
    class_id?: IntFilter<"weekly_schedules"> | number
    teacher_id?: IntFilter<"weekly_schedules"> | number
    subject_id?: IntFilter<"weekly_schedules"> | number
    class?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
    teacher?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type weekly_schedulesOrderByWithAggregationInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    _count?: weekly_schedulesCountOrderByAggregateInput
    _avg?: weekly_schedulesAvgOrderByAggregateInput
    _max?: weekly_schedulesMaxOrderByAggregateInput
    _min?: weekly_schedulesMinOrderByAggregateInput
    _sum?: weekly_schedulesSumOrderByAggregateInput
  }

  export type weekly_schedulesScalarWhereWithAggregatesInput = {
    AND?: weekly_schedulesScalarWhereWithAggregatesInput | weekly_schedulesScalarWhereWithAggregatesInput[]
    OR?: weekly_schedulesScalarWhereWithAggregatesInput[]
    NOT?: weekly_schedulesScalarWhereWithAggregatesInput | weekly_schedulesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"weekly_schedules"> | number
    class_id?: IntWithAggregatesFilter<"weekly_schedules"> | number
    teacher_id?: IntWithAggregatesFilter<"weekly_schedules"> | number
    subject_id?: IntWithAggregatesFilter<"weekly_schedules"> | number
  }

  export type study_timetablesWhereInput = {
    AND?: study_timetablesWhereInput | study_timetablesWhereInput[]
    OR?: study_timetablesWhereInput[]
    NOT?: study_timetablesWhereInput | study_timetablesWhereInput[]
    id?: IntFilter<"study_timetables"> | number
    student_id?: IntFilter<"study_timetables"> | number
    subject_id?: IntFilter<"study_timetables"> | number
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
  }

  export type study_timetablesOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    student?: usersOrderByWithRelationInput
    subject?: subjectsOrderByWithRelationInput
  }

  export type study_timetablesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: study_timetablesWhereInput | study_timetablesWhereInput[]
    OR?: study_timetablesWhereInput[]
    NOT?: study_timetablesWhereInput | study_timetablesWhereInput[]
    student_id?: IntFilter<"study_timetables"> | number
    subject_id?: IntFilter<"study_timetables"> | number
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
  }, "id">

  export type study_timetablesOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    _count?: study_timetablesCountOrderByAggregateInput
    _avg?: study_timetablesAvgOrderByAggregateInput
    _max?: study_timetablesMaxOrderByAggregateInput
    _min?: study_timetablesMinOrderByAggregateInput
    _sum?: study_timetablesSumOrderByAggregateInput
  }

  export type study_timetablesScalarWhereWithAggregatesInput = {
    AND?: study_timetablesScalarWhereWithAggregatesInput | study_timetablesScalarWhereWithAggregatesInput[]
    OR?: study_timetablesScalarWhereWithAggregatesInput[]
    NOT?: study_timetablesScalarWhereWithAggregatesInput | study_timetablesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"study_timetables"> | number
    student_id?: IntWithAggregatesFilter<"study_timetables"> | number
    subject_id?: IntWithAggregatesFilter<"study_timetables"> | number
  }

  export type scoresWhereInput = {
    AND?: scoresWhereInput | scoresWhereInput[]
    OR?: scoresWhereInput[]
    NOT?: scoresWhereInput | scoresWhereInput[]
    id?: IntFilter<"scores"> | number
    student_id?: IntFilter<"scores"> | number
    subject_id?: IntFilter<"scores"> | number
    marks?: IntFilter<"scores"> | number
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
  }

  export type scoresOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
    student?: usersOrderByWithRelationInput
    subject?: subjectsOrderByWithRelationInput
  }

  export type scoresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: scoresWhereInput | scoresWhereInput[]
    OR?: scoresWhereInput[]
    NOT?: scoresWhereInput | scoresWhereInput[]
    student_id?: IntFilter<"scores"> | number
    subject_id?: IntFilter<"scores"> | number
    marks?: IntFilter<"scores"> | number
    student?: XOR<UsersScalarRelationFilter, usersWhereInput>
    subject?: XOR<SubjectsScalarRelationFilter, subjectsWhereInput>
  }, "id">

  export type scoresOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
    _count?: scoresCountOrderByAggregateInput
    _avg?: scoresAvgOrderByAggregateInput
    _max?: scoresMaxOrderByAggregateInput
    _min?: scoresMinOrderByAggregateInput
    _sum?: scoresSumOrderByAggregateInput
  }

  export type scoresScalarWhereWithAggregatesInput = {
    AND?: scoresScalarWhereWithAggregatesInput | scoresScalarWhereWithAggregatesInput[]
    OR?: scoresScalarWhereWithAggregatesInput[]
    NOT?: scoresScalarWhereWithAggregatesInput | scoresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"scores"> | number
    student_id?: IntWithAggregatesFilter<"scores"> | number
    subject_id?: IntWithAggregatesFilter<"scores"> | number
    marks?: IntWithAggregatesFilter<"scores"> | number
  }

  export type usersCreateInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type classesCreateInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutClassInput
    teacher?: usersCreateNestedOneWithoutTeacher_classesInput
    question_banks?: question_banksCreateNestedManyWithoutClassInput
    quizzes?: quizzesCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutClassInput
    students?: usersCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUncheckedCreateInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutClassInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutClassInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutClassInput
    students?: usersUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutClassNestedInput
    teacher?: usersUpdateOneWithoutTeacher_classesNestedInput
    question_banks?: question_banksUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutClassNestedInput
    students?: usersUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: assignmentsUncheckedUpdateManyWithoutClassNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput
    students?: usersUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesCreateManyInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
  }

  export type classesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type classesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type subjectsCreateInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesCreateNestedManyWithoutSubjectInput
    scores?: scoresCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutSubjectInput
    scores?: scoresUncheckedCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUpdateManyWithoutSubjectNestedInput
    scores?: scoresUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: scoresUncheckedUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsCreateManyInput = {
    id?: number
    name: string
  }

  export type subjectsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type subjectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type question_banksCreateInput = {
    questions?: questionsCreateNestedManyWithoutQuestion_bankInput
    class: classesCreateNestedOneWithoutQuestion_banksInput
    subject: subjectsCreateNestedOneWithoutQuestion_banksInput
    teacher: usersCreateNestedOneWithoutQuestion_banksInput
    quizzes?: quizzesCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksUncheckedCreateInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksUpdateInput = {
    questions?: questionsUpdateManyWithoutQuestion_bankNestedInput
    class?: classesUpdateOneRequiredWithoutQuestion_banksNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuestion_banksNestedInput
    teacher?: usersUpdateOneRequiredWithoutQuestion_banksNestedInput
    quizzes?: quizzesUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksCreateManyInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
  }

  export type question_banksUpdateManyMutationInput = {

  }

  export type question_banksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type questionsCreateInput = {
    content: string
    question_bank: question_banksCreateNestedOneWithoutQuestionsInput
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuestionInput
  }

  export type questionsUncheckedCreateInput = {
    id?: number
    content: string
    question_bank_id: number
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type questionsUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    question_bank?: question_banksUpdateOneRequiredWithoutQuestionsNestedInput
    quiz_questions?: quiz_questionsUpdateManyWithoutQuestionNestedInput
  }

  export type questionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type questionsCreateManyInput = {
    id?: number
    content: string
    question_bank_id: number
  }

  export type questionsUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type questionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesCreateInput = {
    class: classesCreateNestedOneWithoutQuizzesInput
    question_bank: question_banksCreateNestedOneWithoutQuizzesInput
    subject: subjectsCreateNestedOneWithoutQuizzesInput
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutQuizInput
  }

  export type quizzesUncheckedCreateInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizzesUpdateInput = {
    class?: classesUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: question_banksUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuizzesNestedInput
    quiz_questions?: quiz_questionsUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizzesCreateManyInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
  }

  export type quizzesUpdateManyMutationInput = {

  }

  export type quizzesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_questionsCreateInput = {
    question: questionsCreateNestedOneWithoutQuiz_questionsInput
    quiz: quizzesCreateNestedOneWithoutQuiz_questionsInput
  }

  export type quiz_questionsUncheckedCreateInput = {
    id?: number
    quiz_id: number
    question_id: number
  }

  export type quiz_questionsUpdateInput = {
    question?: questionsUpdateOneRequiredWithoutQuiz_questionsNestedInput
    quiz?: quizzesUpdateOneRequiredWithoutQuiz_questionsNestedInput
  }

  export type quiz_questionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_questionsCreateManyInput = {
    id?: number
    quiz_id: number
    question_id: number
  }

  export type quiz_questionsUpdateManyMutationInput = {

  }

  export type quiz_questionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_quizzesCreateInput = {
    quiz: quizzesCreateNestedOneWithoutStudent_quizzesInput
    student: usersCreateNestedOneWithoutStudent_quizzesInput
  }

  export type student_quizzesUncheckedCreateInput = {
    id?: number
    student_id: number
    quiz_id: number
  }

  export type student_quizzesUpdateInput = {
    quiz?: quizzesUpdateOneRequiredWithoutStudent_quizzesNestedInput
    student?: usersUpdateOneRequiredWithoutStudent_quizzesNestedInput
  }

  export type student_quizzesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_quizzesCreateManyInput = {
    id?: number
    student_id: number
    quiz_id: number
  }

  export type student_quizzesUpdateManyMutationInput = {

  }

  export type student_quizzesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type assignmentsCreateInput = {
    title: string
    description: string
    class: classesCreateNestedOneWithoutAssignmentsInput
    subject: subjectsCreateNestedOneWithoutAssignmentsInput
    teacher: usersCreateNestedOneWithoutAssignmentsInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: classesUpdateOneRequiredWithoutAssignmentsNestedInput
    subject?: subjectsUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: usersUpdateOneRequiredWithoutAssignmentsNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsCreateManyInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
  }

  export type assignmentsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type assignmentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_assignmentsCreateInput = {
    assignment: assignmentsCreateNestedOneWithoutStudent_assignmentsInput
    student: usersCreateNestedOneWithoutStudent_assignmentsInput
  }

  export type student_assignmentsUncheckedCreateInput = {
    id?: number
    assignment_id: number
    student_id: number
  }

  export type student_assignmentsUpdateInput = {
    assignment?: assignmentsUpdateOneRequiredWithoutStudent_assignmentsNestedInput
    student?: usersUpdateOneRequiredWithoutStudent_assignmentsNestedInput
  }

  export type student_assignmentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_assignmentsCreateManyInput = {
    id?: number
    assignment_id: number
    student_id: number
  }

  export type student_assignmentsUpdateManyMutationInput = {

  }

  export type student_assignmentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesCreateInput = {
    class: classesCreateNestedOneWithoutWeekly_schedulesInput
    subject: subjectsCreateNestedOneWithoutWeekly_schedulesInput
    teacher: usersCreateNestedOneWithoutWeekly_schedulesInput
  }

  export type weekly_schedulesUncheckedCreateInput = {
    id?: number
    class_id: number
    teacher_id: number
    subject_id: number
  }

  export type weekly_schedulesUpdateInput = {
    class?: classesUpdateOneRequiredWithoutWeekly_schedulesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutWeekly_schedulesNestedInput
    teacher?: usersUpdateOneRequiredWithoutWeekly_schedulesNestedInput
  }

  export type weekly_schedulesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesCreateManyInput = {
    id?: number
    class_id: number
    teacher_id: number
    subject_id: number
  }

  export type weekly_schedulesUpdateManyMutationInput = {

  }

  export type weekly_schedulesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type study_timetablesCreateInput = {
    student: usersCreateNestedOneWithoutStudy_timetablesInput
    subject: subjectsCreateNestedOneWithoutStudy_timetablesInput
  }

  export type study_timetablesUncheckedCreateInput = {
    id?: number
    student_id: number
    subject_id: number
  }

  export type study_timetablesUpdateInput = {
    student?: usersUpdateOneRequiredWithoutStudy_timetablesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutStudy_timetablesNestedInput
  }

  export type study_timetablesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type study_timetablesCreateManyInput = {
    id?: number
    student_id: number
    subject_id: number
  }

  export type study_timetablesUpdateManyMutationInput = {

  }

  export type study_timetablesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type scoresCreateInput = {
    marks: number
    student: usersCreateNestedOneWithoutScoresInput
    subject: subjectsCreateNestedOneWithoutScoresInput
  }

  export type scoresUncheckedCreateInput = {
    id?: number
    student_id: number
    subject_id: number
    marks: number
  }

  export type scoresUpdateInput = {
    marks?: IntFieldUpdateOperationsInput | number
    student?: usersUpdateOneRequiredWithoutScoresNestedInput
    subject?: subjectsUpdateOneRequiredWithoutScoresNestedInput
  }

  export type scoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type scoresCreateManyInput = {
    id?: number
    student_id: number
    subject_id: number
    marks: number
  }

  export type scoresUpdateManyMutationInput = {
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type scoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AssignmentsListRelationFilter = {
    every?: assignmentsWhereInput
    some?: assignmentsWhereInput
    none?: assignmentsWhereInput
  }

  export type ClassesListRelationFilter = {
    every?: classesWhereInput
    some?: classesWhereInput
    none?: classesWhereInput
  }

  export type Question_banksListRelationFilter = {
    every?: question_banksWhereInput
    some?: question_banksWhereInput
    none?: question_banksWhereInput
  }

  export type ScoresListRelationFilter = {
    every?: scoresWhereInput
    some?: scoresWhereInput
    none?: scoresWhereInput
  }

  export type Student_assignmentsListRelationFilter = {
    every?: student_assignmentsWhereInput
    some?: student_assignmentsWhereInput
    none?: student_assignmentsWhereInput
  }

  export type Student_quizzesListRelationFilter = {
    every?: student_quizzesWhereInput
    some?: student_quizzesWhereInput
    none?: student_quizzesWhereInput
  }

  export type Study_timetablesListRelationFilter = {
    every?: study_timetablesWhereInput
    some?: study_timetablesWhereInput
    none?: study_timetablesWhereInput
  }

  export type Weekly_schedulesListRelationFilter = {
    every?: weekly_schedulesWhereInput
    some?: weekly_schedulesWhereInput
    none?: weekly_schedulesWhereInput
  }

  export type assignmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type classesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type question_banksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type scoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type student_assignmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type student_quizzesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type study_timetablesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type weekly_schedulesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type QuizzesListRelationFilter = {
    every?: quizzesWhereInput
    some?: quizzesWhereInput
    none?: quizzesWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type quizzesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type classesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type classesAvgOrderByAggregateInput = {
    id?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type classesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type classesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type classesSumOrderByAggregateInput = {
    id?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type subjectsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type subjectsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type subjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type subjectsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type subjectsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type ClassesScalarRelationFilter = {
    is?: classesWhereInput
    isNot?: classesWhereInput
  }

  export type SubjectsScalarRelationFilter = {
    is?: subjectsWhereInput
    isNot?: subjectsWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type question_banksCountOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type question_banksAvgOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type question_banksMaxOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type question_banksMinOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type question_banksSumOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type Question_banksScalarRelationFilter = {
    is?: question_banksWhereInput
    isNot?: question_banksWhereInput
  }

  export type Quiz_questionsListRelationFilter = {
    every?: quiz_questionsWhereInput
    some?: quiz_questionsWhereInput
    none?: quiz_questionsWhereInput
  }

  export type quiz_questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionsCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
  }

  export type questionsAvgOrderByAggregateInput = {
    id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type questionsMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
  }

  export type questionsMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
  }

  export type questionsSumOrderByAggregateInput = {
    id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type quizzesCountOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type quizzesAvgOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type quizzesMaxOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type quizzesMinOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type quizzesSumOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuestionsScalarRelationFilter = {
    is?: questionsWhereInput
    isNot?: questionsWhereInput
  }

  export type QuizzesScalarRelationFilter = {
    is?: quizzesWhereInput
    isNot?: quizzesWhereInput
  }

  export type quiz_questionsCountOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type quiz_questionsAvgOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type quiz_questionsMaxOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type quiz_questionsMinOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type quiz_questionsSumOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type student_quizzesCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type student_quizzesAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type student_quizzesMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type student_quizzesMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type student_quizzesSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type assignmentsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type assignmentsAvgOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type assignmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type assignmentsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type assignmentsSumOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type AssignmentsScalarRelationFilter = {
    is?: assignmentsWhereInput
    isNot?: assignmentsWhereInput
  }

  export type student_assignmentsCountOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type student_assignmentsAvgOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type student_assignmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type student_assignmentsMinOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type student_assignmentsSumOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type weekly_schedulesCountOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type weekly_schedulesAvgOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type weekly_schedulesMaxOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type weekly_schedulesMinOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type weekly_schedulesSumOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type study_timetablesCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type study_timetablesAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type study_timetablesMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type study_timetablesMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type study_timetablesSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type scoresCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type scoresAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type scoresMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type scoresMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type scoresSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type assignmentsCreateNestedManyWithoutTeacherInput = {
    create?: XOR<assignmentsCreateWithoutTeacherInput, assignmentsUncheckedCreateWithoutTeacherInput> | assignmentsCreateWithoutTeacherInput[] | assignmentsUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutTeacherInput | assignmentsCreateOrConnectWithoutTeacherInput[]
    createMany?: assignmentsCreateManyTeacherInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type classesCreateNestedManyWithoutTeacherInput = {
    create?: XOR<classesCreateWithoutTeacherInput, classesUncheckedCreateWithoutTeacherInput> | classesCreateWithoutTeacherInput[] | classesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: classesCreateOrConnectWithoutTeacherInput | classesCreateOrConnectWithoutTeacherInput[]
    createMany?: classesCreateManyTeacherInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type question_banksCreateNestedManyWithoutTeacherInput = {
    create?: XOR<question_banksCreateWithoutTeacherInput, question_banksUncheckedCreateWithoutTeacherInput> | question_banksCreateWithoutTeacherInput[] | question_banksUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutTeacherInput | question_banksCreateOrConnectWithoutTeacherInput[]
    createMany?: question_banksCreateManyTeacherInputEnvelope
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
  }

  export type scoresCreateNestedManyWithoutStudentInput = {
    create?: XOR<scoresCreateWithoutStudentInput, scoresUncheckedCreateWithoutStudentInput> | scoresCreateWithoutStudentInput[] | scoresUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutStudentInput | scoresCreateOrConnectWithoutStudentInput[]
    createMany?: scoresCreateManyStudentInputEnvelope
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
  }

  export type student_assignmentsCreateNestedManyWithoutStudentInput = {
    create?: XOR<student_assignmentsCreateWithoutStudentInput, student_assignmentsUncheckedCreateWithoutStudentInput> | student_assignmentsCreateWithoutStudentInput[] | student_assignmentsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutStudentInput | student_assignmentsCreateOrConnectWithoutStudentInput[]
    createMany?: student_assignmentsCreateManyStudentInputEnvelope
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
  }

  export type student_quizzesCreateNestedManyWithoutStudentInput = {
    create?: XOR<student_quizzesCreateWithoutStudentInput, student_quizzesUncheckedCreateWithoutStudentInput> | student_quizzesCreateWithoutStudentInput[] | student_quizzesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutStudentInput | student_quizzesCreateOrConnectWithoutStudentInput[]
    createMany?: student_quizzesCreateManyStudentInputEnvelope
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
  }

  export type study_timetablesCreateNestedManyWithoutStudentInput = {
    create?: XOR<study_timetablesCreateWithoutStudentInput, study_timetablesUncheckedCreateWithoutStudentInput> | study_timetablesCreateWithoutStudentInput[] | study_timetablesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutStudentInput | study_timetablesCreateOrConnectWithoutStudentInput[]
    createMany?: study_timetablesCreateManyStudentInputEnvelope
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
  }

  export type weekly_schedulesCreateNestedManyWithoutTeacherInput = {
    create?: XOR<weekly_schedulesCreateWithoutTeacherInput, weekly_schedulesUncheckedCreateWithoutTeacherInput> | weekly_schedulesCreateWithoutTeacherInput[] | weekly_schedulesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutTeacherInput | weekly_schedulesCreateOrConnectWithoutTeacherInput[]
    createMany?: weekly_schedulesCreateManyTeacherInputEnvelope
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
  }

  export type classesCreateNestedManyWithoutStudentsInput = {
    create?: XOR<classesCreateWithoutStudentsInput, classesUncheckedCreateWithoutStudentsInput> | classesCreateWithoutStudentsInput[] | classesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutStudentsInput | classesCreateOrConnectWithoutStudentsInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type assignmentsUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<assignmentsCreateWithoutTeacherInput, assignmentsUncheckedCreateWithoutTeacherInput> | assignmentsCreateWithoutTeacherInput[] | assignmentsUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutTeacherInput | assignmentsCreateOrConnectWithoutTeacherInput[]
    createMany?: assignmentsCreateManyTeacherInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type classesUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<classesCreateWithoutTeacherInput, classesUncheckedCreateWithoutTeacherInput> | classesCreateWithoutTeacherInput[] | classesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: classesCreateOrConnectWithoutTeacherInput | classesCreateOrConnectWithoutTeacherInput[]
    createMany?: classesCreateManyTeacherInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type question_banksUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<question_banksCreateWithoutTeacherInput, question_banksUncheckedCreateWithoutTeacherInput> | question_banksCreateWithoutTeacherInput[] | question_banksUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutTeacherInput | question_banksCreateOrConnectWithoutTeacherInput[]
    createMany?: question_banksCreateManyTeacherInputEnvelope
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
  }

  export type scoresUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<scoresCreateWithoutStudentInput, scoresUncheckedCreateWithoutStudentInput> | scoresCreateWithoutStudentInput[] | scoresUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutStudentInput | scoresCreateOrConnectWithoutStudentInput[]
    createMany?: scoresCreateManyStudentInputEnvelope
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
  }

  export type student_assignmentsUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<student_assignmentsCreateWithoutStudentInput, student_assignmentsUncheckedCreateWithoutStudentInput> | student_assignmentsCreateWithoutStudentInput[] | student_assignmentsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutStudentInput | student_assignmentsCreateOrConnectWithoutStudentInput[]
    createMany?: student_assignmentsCreateManyStudentInputEnvelope
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
  }

  export type student_quizzesUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<student_quizzesCreateWithoutStudentInput, student_quizzesUncheckedCreateWithoutStudentInput> | student_quizzesCreateWithoutStudentInput[] | student_quizzesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutStudentInput | student_quizzesCreateOrConnectWithoutStudentInput[]
    createMany?: student_quizzesCreateManyStudentInputEnvelope
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
  }

  export type study_timetablesUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<study_timetablesCreateWithoutStudentInput, study_timetablesUncheckedCreateWithoutStudentInput> | study_timetablesCreateWithoutStudentInput[] | study_timetablesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutStudentInput | study_timetablesCreateOrConnectWithoutStudentInput[]
    createMany?: study_timetablesCreateManyStudentInputEnvelope
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
  }

  export type weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<weekly_schedulesCreateWithoutTeacherInput, weekly_schedulesUncheckedCreateWithoutTeacherInput> | weekly_schedulesCreateWithoutTeacherInput[] | weekly_schedulesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutTeacherInput | weekly_schedulesCreateOrConnectWithoutTeacherInput[]
    createMany?: weekly_schedulesCreateManyTeacherInputEnvelope
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
  }

  export type classesUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<classesCreateWithoutStudentsInput, classesUncheckedCreateWithoutStudentsInput> | classesCreateWithoutStudentsInput[] | classesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutStudentsInput | classesCreateOrConnectWithoutStudentsInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type assignmentsUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<assignmentsCreateWithoutTeacherInput, assignmentsUncheckedCreateWithoutTeacherInput> | assignmentsCreateWithoutTeacherInput[] | assignmentsUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutTeacherInput | assignmentsCreateOrConnectWithoutTeacherInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutTeacherInput | assignmentsUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: assignmentsCreateManyTeacherInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutTeacherInput | assignmentsUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutTeacherInput | assignmentsUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type classesUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<classesCreateWithoutTeacherInput, classesUncheckedCreateWithoutTeacherInput> | classesCreateWithoutTeacherInput[] | classesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: classesCreateOrConnectWithoutTeacherInput | classesCreateOrConnectWithoutTeacherInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutTeacherInput | classesUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: classesCreateManyTeacherInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutTeacherInput | classesUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: classesUpdateManyWithWhereWithoutTeacherInput | classesUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type question_banksUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<question_banksCreateWithoutTeacherInput, question_banksUncheckedCreateWithoutTeacherInput> | question_banksCreateWithoutTeacherInput[] | question_banksUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutTeacherInput | question_banksCreateOrConnectWithoutTeacherInput[]
    upsert?: question_banksUpsertWithWhereUniqueWithoutTeacherInput | question_banksUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: question_banksCreateManyTeacherInputEnvelope
    set?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    disconnect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    delete?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    update?: question_banksUpdateWithWhereUniqueWithoutTeacherInput | question_banksUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: question_banksUpdateManyWithWhereWithoutTeacherInput | question_banksUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
  }

  export type scoresUpdateManyWithoutStudentNestedInput = {
    create?: XOR<scoresCreateWithoutStudentInput, scoresUncheckedCreateWithoutStudentInput> | scoresCreateWithoutStudentInput[] | scoresUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutStudentInput | scoresCreateOrConnectWithoutStudentInput[]
    upsert?: scoresUpsertWithWhereUniqueWithoutStudentInput | scoresUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: scoresCreateManyStudentInputEnvelope
    set?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    disconnect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    delete?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    update?: scoresUpdateWithWhereUniqueWithoutStudentInput | scoresUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: scoresUpdateManyWithWhereWithoutStudentInput | scoresUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: scoresScalarWhereInput | scoresScalarWhereInput[]
  }

  export type student_assignmentsUpdateManyWithoutStudentNestedInput = {
    create?: XOR<student_assignmentsCreateWithoutStudentInput, student_assignmentsUncheckedCreateWithoutStudentInput> | student_assignmentsCreateWithoutStudentInput[] | student_assignmentsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutStudentInput | student_assignmentsCreateOrConnectWithoutStudentInput[]
    upsert?: student_assignmentsUpsertWithWhereUniqueWithoutStudentInput | student_assignmentsUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: student_assignmentsCreateManyStudentInputEnvelope
    set?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    disconnect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    delete?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    update?: student_assignmentsUpdateWithWhereUniqueWithoutStudentInput | student_assignmentsUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: student_assignmentsUpdateManyWithWhereWithoutStudentInput | student_assignmentsUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: student_assignmentsScalarWhereInput | student_assignmentsScalarWhereInput[]
  }

  export type student_quizzesUpdateManyWithoutStudentNestedInput = {
    create?: XOR<student_quizzesCreateWithoutStudentInput, student_quizzesUncheckedCreateWithoutStudentInput> | student_quizzesCreateWithoutStudentInput[] | student_quizzesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutStudentInput | student_quizzesCreateOrConnectWithoutStudentInput[]
    upsert?: student_quizzesUpsertWithWhereUniqueWithoutStudentInput | student_quizzesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: student_quizzesCreateManyStudentInputEnvelope
    set?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    disconnect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    delete?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    update?: student_quizzesUpdateWithWhereUniqueWithoutStudentInput | student_quizzesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: student_quizzesUpdateManyWithWhereWithoutStudentInput | student_quizzesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: student_quizzesScalarWhereInput | student_quizzesScalarWhereInput[]
  }

  export type study_timetablesUpdateManyWithoutStudentNestedInput = {
    create?: XOR<study_timetablesCreateWithoutStudentInput, study_timetablesUncheckedCreateWithoutStudentInput> | study_timetablesCreateWithoutStudentInput[] | study_timetablesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutStudentInput | study_timetablesCreateOrConnectWithoutStudentInput[]
    upsert?: study_timetablesUpsertWithWhereUniqueWithoutStudentInput | study_timetablesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: study_timetablesCreateManyStudentInputEnvelope
    set?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    disconnect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    delete?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    update?: study_timetablesUpdateWithWhereUniqueWithoutStudentInput | study_timetablesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: study_timetablesUpdateManyWithWhereWithoutStudentInput | study_timetablesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: study_timetablesScalarWhereInput | study_timetablesScalarWhereInput[]
  }

  export type weekly_schedulesUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<weekly_schedulesCreateWithoutTeacherInput, weekly_schedulesUncheckedCreateWithoutTeacherInput> | weekly_schedulesCreateWithoutTeacherInput[] | weekly_schedulesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutTeacherInput | weekly_schedulesCreateOrConnectWithoutTeacherInput[]
    upsert?: weekly_schedulesUpsertWithWhereUniqueWithoutTeacherInput | weekly_schedulesUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: weekly_schedulesCreateManyTeacherInputEnvelope
    set?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    disconnect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    delete?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    update?: weekly_schedulesUpdateWithWhereUniqueWithoutTeacherInput | weekly_schedulesUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: weekly_schedulesUpdateManyWithWhereWithoutTeacherInput | weekly_schedulesUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
  }

  export type classesUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<classesCreateWithoutStudentsInput, classesUncheckedCreateWithoutStudentsInput> | classesCreateWithoutStudentsInput[] | classesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutStudentsInput | classesCreateOrConnectWithoutStudentsInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutStudentsInput | classesUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutStudentsInput | classesUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: classesUpdateManyWithWhereWithoutStudentsInput | classesUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type assignmentsUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<assignmentsCreateWithoutTeacherInput, assignmentsUncheckedCreateWithoutTeacherInput> | assignmentsCreateWithoutTeacherInput[] | assignmentsUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutTeacherInput | assignmentsCreateOrConnectWithoutTeacherInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutTeacherInput | assignmentsUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: assignmentsCreateManyTeacherInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutTeacherInput | assignmentsUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutTeacherInput | assignmentsUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type classesUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<classesCreateWithoutTeacherInput, classesUncheckedCreateWithoutTeacherInput> | classesCreateWithoutTeacherInput[] | classesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: classesCreateOrConnectWithoutTeacherInput | classesCreateOrConnectWithoutTeacherInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutTeacherInput | classesUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: classesCreateManyTeacherInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutTeacherInput | classesUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: classesUpdateManyWithWhereWithoutTeacherInput | classesUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type question_banksUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<question_banksCreateWithoutTeacherInput, question_banksUncheckedCreateWithoutTeacherInput> | question_banksCreateWithoutTeacherInput[] | question_banksUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutTeacherInput | question_banksCreateOrConnectWithoutTeacherInput[]
    upsert?: question_banksUpsertWithWhereUniqueWithoutTeacherInput | question_banksUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: question_banksCreateManyTeacherInputEnvelope
    set?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    disconnect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    delete?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    update?: question_banksUpdateWithWhereUniqueWithoutTeacherInput | question_banksUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: question_banksUpdateManyWithWhereWithoutTeacherInput | question_banksUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
  }

  export type scoresUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<scoresCreateWithoutStudentInput, scoresUncheckedCreateWithoutStudentInput> | scoresCreateWithoutStudentInput[] | scoresUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutStudentInput | scoresCreateOrConnectWithoutStudentInput[]
    upsert?: scoresUpsertWithWhereUniqueWithoutStudentInput | scoresUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: scoresCreateManyStudentInputEnvelope
    set?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    disconnect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    delete?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    update?: scoresUpdateWithWhereUniqueWithoutStudentInput | scoresUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: scoresUpdateManyWithWhereWithoutStudentInput | scoresUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: scoresScalarWhereInput | scoresScalarWhereInput[]
  }

  export type student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<student_assignmentsCreateWithoutStudentInput, student_assignmentsUncheckedCreateWithoutStudentInput> | student_assignmentsCreateWithoutStudentInput[] | student_assignmentsUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutStudentInput | student_assignmentsCreateOrConnectWithoutStudentInput[]
    upsert?: student_assignmentsUpsertWithWhereUniqueWithoutStudentInput | student_assignmentsUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: student_assignmentsCreateManyStudentInputEnvelope
    set?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    disconnect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    delete?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    update?: student_assignmentsUpdateWithWhereUniqueWithoutStudentInput | student_assignmentsUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: student_assignmentsUpdateManyWithWhereWithoutStudentInput | student_assignmentsUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: student_assignmentsScalarWhereInput | student_assignmentsScalarWhereInput[]
  }

  export type student_quizzesUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<student_quizzesCreateWithoutStudentInput, student_quizzesUncheckedCreateWithoutStudentInput> | student_quizzesCreateWithoutStudentInput[] | student_quizzesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutStudentInput | student_quizzesCreateOrConnectWithoutStudentInput[]
    upsert?: student_quizzesUpsertWithWhereUniqueWithoutStudentInput | student_quizzesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: student_quizzesCreateManyStudentInputEnvelope
    set?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    disconnect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    delete?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    update?: student_quizzesUpdateWithWhereUniqueWithoutStudentInput | student_quizzesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: student_quizzesUpdateManyWithWhereWithoutStudentInput | student_quizzesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: student_quizzesScalarWhereInput | student_quizzesScalarWhereInput[]
  }

  export type study_timetablesUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<study_timetablesCreateWithoutStudentInput, study_timetablesUncheckedCreateWithoutStudentInput> | study_timetablesCreateWithoutStudentInput[] | study_timetablesUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutStudentInput | study_timetablesCreateOrConnectWithoutStudentInput[]
    upsert?: study_timetablesUpsertWithWhereUniqueWithoutStudentInput | study_timetablesUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: study_timetablesCreateManyStudentInputEnvelope
    set?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    disconnect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    delete?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    update?: study_timetablesUpdateWithWhereUniqueWithoutStudentInput | study_timetablesUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: study_timetablesUpdateManyWithWhereWithoutStudentInput | study_timetablesUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: study_timetablesScalarWhereInput | study_timetablesScalarWhereInput[]
  }

  export type weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<weekly_schedulesCreateWithoutTeacherInput, weekly_schedulesUncheckedCreateWithoutTeacherInput> | weekly_schedulesCreateWithoutTeacherInput[] | weekly_schedulesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutTeacherInput | weekly_schedulesCreateOrConnectWithoutTeacherInput[]
    upsert?: weekly_schedulesUpsertWithWhereUniqueWithoutTeacherInput | weekly_schedulesUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: weekly_schedulesCreateManyTeacherInputEnvelope
    set?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    disconnect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    delete?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    update?: weekly_schedulesUpdateWithWhereUniqueWithoutTeacherInput | weekly_schedulesUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: weekly_schedulesUpdateManyWithWhereWithoutTeacherInput | weekly_schedulesUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
  }

  export type classesUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<classesCreateWithoutStudentsInput, classesUncheckedCreateWithoutStudentsInput> | classesCreateWithoutStudentsInput[] | classesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutStudentsInput | classesCreateOrConnectWithoutStudentsInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutStudentsInput | classesUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutStudentsInput | classesUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: classesUpdateManyWithWhereWithoutStudentsInput | classesUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type assignmentsCreateNestedManyWithoutClassInput = {
    create?: XOR<assignmentsCreateWithoutClassInput, assignmentsUncheckedCreateWithoutClassInput> | assignmentsCreateWithoutClassInput[] | assignmentsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutClassInput | assignmentsCreateOrConnectWithoutClassInput[]
    createMany?: assignmentsCreateManyClassInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutTeacher_classesInput = {
    create?: XOR<usersCreateWithoutTeacher_classesInput, usersUncheckedCreateWithoutTeacher_classesInput>
    connectOrCreate?: usersCreateOrConnectWithoutTeacher_classesInput
    connect?: usersWhereUniqueInput
  }

  export type question_banksCreateNestedManyWithoutClassInput = {
    create?: XOR<question_banksCreateWithoutClassInput, question_banksUncheckedCreateWithoutClassInput> | question_banksCreateWithoutClassInput[] | question_banksUncheckedCreateWithoutClassInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutClassInput | question_banksCreateOrConnectWithoutClassInput[]
    createMany?: question_banksCreateManyClassInputEnvelope
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
  }

  export type quizzesCreateNestedManyWithoutClassInput = {
    create?: XOR<quizzesCreateWithoutClassInput, quizzesUncheckedCreateWithoutClassInput> | quizzesCreateWithoutClassInput[] | quizzesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutClassInput | quizzesCreateOrConnectWithoutClassInput[]
    createMany?: quizzesCreateManyClassInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type weekly_schedulesCreateNestedManyWithoutClassInput = {
    create?: XOR<weekly_schedulesCreateWithoutClassInput, weekly_schedulesUncheckedCreateWithoutClassInput> | weekly_schedulesCreateWithoutClassInput[] | weekly_schedulesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutClassInput | weekly_schedulesCreateOrConnectWithoutClassInput[]
    createMany?: weekly_schedulesCreateManyClassInputEnvelope
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutStudent_classesInput = {
    create?: XOR<usersCreateWithoutStudent_classesInput, usersUncheckedCreateWithoutStudent_classesInput> | usersCreateWithoutStudent_classesInput[] | usersUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutStudent_classesInput | usersCreateOrConnectWithoutStudent_classesInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type assignmentsUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<assignmentsCreateWithoutClassInput, assignmentsUncheckedCreateWithoutClassInput> | assignmentsCreateWithoutClassInput[] | assignmentsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutClassInput | assignmentsCreateOrConnectWithoutClassInput[]
    createMany?: assignmentsCreateManyClassInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type question_banksUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<question_banksCreateWithoutClassInput, question_banksUncheckedCreateWithoutClassInput> | question_banksCreateWithoutClassInput[] | question_banksUncheckedCreateWithoutClassInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutClassInput | question_banksCreateOrConnectWithoutClassInput[]
    createMany?: question_banksCreateManyClassInputEnvelope
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
  }

  export type quizzesUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<quizzesCreateWithoutClassInput, quizzesUncheckedCreateWithoutClassInput> | quizzesCreateWithoutClassInput[] | quizzesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutClassInput | quizzesCreateOrConnectWithoutClassInput[]
    createMany?: quizzesCreateManyClassInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type weekly_schedulesUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<weekly_schedulesCreateWithoutClassInput, weekly_schedulesUncheckedCreateWithoutClassInput> | weekly_schedulesCreateWithoutClassInput[] | weekly_schedulesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutClassInput | weekly_schedulesCreateOrConnectWithoutClassInput[]
    createMany?: weekly_schedulesCreateManyClassInputEnvelope
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutStudent_classesInput = {
    create?: XOR<usersCreateWithoutStudent_classesInput, usersUncheckedCreateWithoutStudent_classesInput> | usersCreateWithoutStudent_classesInput[] | usersUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutStudent_classesInput | usersCreateOrConnectWithoutStudent_classesInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type assignmentsUpdateManyWithoutClassNestedInput = {
    create?: XOR<assignmentsCreateWithoutClassInput, assignmentsUncheckedCreateWithoutClassInput> | assignmentsCreateWithoutClassInput[] | assignmentsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutClassInput | assignmentsCreateOrConnectWithoutClassInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutClassInput | assignmentsUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: assignmentsCreateManyClassInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutClassInput | assignmentsUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutClassInput | assignmentsUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type usersUpdateOneWithoutTeacher_classesNestedInput = {
    create?: XOR<usersCreateWithoutTeacher_classesInput, usersUncheckedCreateWithoutTeacher_classesInput>
    connectOrCreate?: usersCreateOrConnectWithoutTeacher_classesInput
    upsert?: usersUpsertWithoutTeacher_classesInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTeacher_classesInput, usersUpdateWithoutTeacher_classesInput>, usersUncheckedUpdateWithoutTeacher_classesInput>
  }

  export type question_banksUpdateManyWithoutClassNestedInput = {
    create?: XOR<question_banksCreateWithoutClassInput, question_banksUncheckedCreateWithoutClassInput> | question_banksCreateWithoutClassInput[] | question_banksUncheckedCreateWithoutClassInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutClassInput | question_banksCreateOrConnectWithoutClassInput[]
    upsert?: question_banksUpsertWithWhereUniqueWithoutClassInput | question_banksUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: question_banksCreateManyClassInputEnvelope
    set?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    disconnect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    delete?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    update?: question_banksUpdateWithWhereUniqueWithoutClassInput | question_banksUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: question_banksUpdateManyWithWhereWithoutClassInput | question_banksUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
  }

  export type quizzesUpdateManyWithoutClassNestedInput = {
    create?: XOR<quizzesCreateWithoutClassInput, quizzesUncheckedCreateWithoutClassInput> | quizzesCreateWithoutClassInput[] | quizzesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutClassInput | quizzesCreateOrConnectWithoutClassInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutClassInput | quizzesUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: quizzesCreateManyClassInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutClassInput | quizzesUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutClassInput | quizzesUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type weekly_schedulesUpdateManyWithoutClassNestedInput = {
    create?: XOR<weekly_schedulesCreateWithoutClassInput, weekly_schedulesUncheckedCreateWithoutClassInput> | weekly_schedulesCreateWithoutClassInput[] | weekly_schedulesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutClassInput | weekly_schedulesCreateOrConnectWithoutClassInput[]
    upsert?: weekly_schedulesUpsertWithWhereUniqueWithoutClassInput | weekly_schedulesUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: weekly_schedulesCreateManyClassInputEnvelope
    set?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    disconnect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    delete?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    update?: weekly_schedulesUpdateWithWhereUniqueWithoutClassInput | weekly_schedulesUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: weekly_schedulesUpdateManyWithWhereWithoutClassInput | weekly_schedulesUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
  }

  export type usersUpdateManyWithoutStudent_classesNestedInput = {
    create?: XOR<usersCreateWithoutStudent_classesInput, usersUncheckedCreateWithoutStudent_classesInput> | usersCreateWithoutStudent_classesInput[] | usersUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutStudent_classesInput | usersCreateOrConnectWithoutStudent_classesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutStudent_classesInput | usersUpsertWithWhereUniqueWithoutStudent_classesInput[]
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutStudent_classesInput | usersUpdateWithWhereUniqueWithoutStudent_classesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutStudent_classesInput | usersUpdateManyWithWhereWithoutStudent_classesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type assignmentsUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<assignmentsCreateWithoutClassInput, assignmentsUncheckedCreateWithoutClassInput> | assignmentsCreateWithoutClassInput[] | assignmentsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutClassInput | assignmentsCreateOrConnectWithoutClassInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutClassInput | assignmentsUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: assignmentsCreateManyClassInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutClassInput | assignmentsUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutClassInput | assignmentsUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type question_banksUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<question_banksCreateWithoutClassInput, question_banksUncheckedCreateWithoutClassInput> | question_banksCreateWithoutClassInput[] | question_banksUncheckedCreateWithoutClassInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutClassInput | question_banksCreateOrConnectWithoutClassInput[]
    upsert?: question_banksUpsertWithWhereUniqueWithoutClassInput | question_banksUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: question_banksCreateManyClassInputEnvelope
    set?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    disconnect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    delete?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    update?: question_banksUpdateWithWhereUniqueWithoutClassInput | question_banksUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: question_banksUpdateManyWithWhereWithoutClassInput | question_banksUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
  }

  export type quizzesUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<quizzesCreateWithoutClassInput, quizzesUncheckedCreateWithoutClassInput> | quizzesCreateWithoutClassInput[] | quizzesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutClassInput | quizzesCreateOrConnectWithoutClassInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutClassInput | quizzesUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: quizzesCreateManyClassInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutClassInput | quizzesUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutClassInput | quizzesUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<weekly_schedulesCreateWithoutClassInput, weekly_schedulesUncheckedCreateWithoutClassInput> | weekly_schedulesCreateWithoutClassInput[] | weekly_schedulesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutClassInput | weekly_schedulesCreateOrConnectWithoutClassInput[]
    upsert?: weekly_schedulesUpsertWithWhereUniqueWithoutClassInput | weekly_schedulesUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: weekly_schedulesCreateManyClassInputEnvelope
    set?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    disconnect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    delete?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    update?: weekly_schedulesUpdateWithWhereUniqueWithoutClassInput | weekly_schedulesUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: weekly_schedulesUpdateManyWithWhereWithoutClassInput | weekly_schedulesUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutStudent_classesNestedInput = {
    create?: XOR<usersCreateWithoutStudent_classesInput, usersUncheckedCreateWithoutStudent_classesInput> | usersCreateWithoutStudent_classesInput[] | usersUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutStudent_classesInput | usersCreateOrConnectWithoutStudent_classesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutStudent_classesInput | usersUpsertWithWhereUniqueWithoutStudent_classesInput[]
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutStudent_classesInput | usersUpdateWithWhereUniqueWithoutStudent_classesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutStudent_classesInput | usersUpdateManyWithWhereWithoutStudent_classesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type assignmentsCreateNestedManyWithoutSubjectInput = {
    create?: XOR<assignmentsCreateWithoutSubjectInput, assignmentsUncheckedCreateWithoutSubjectInput> | assignmentsCreateWithoutSubjectInput[] | assignmentsUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutSubjectInput | assignmentsCreateOrConnectWithoutSubjectInput[]
    createMany?: assignmentsCreateManySubjectInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type question_banksCreateNestedManyWithoutSubjectInput = {
    create?: XOR<question_banksCreateWithoutSubjectInput, question_banksUncheckedCreateWithoutSubjectInput> | question_banksCreateWithoutSubjectInput[] | question_banksUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutSubjectInput | question_banksCreateOrConnectWithoutSubjectInput[]
    createMany?: question_banksCreateManySubjectInputEnvelope
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
  }

  export type quizzesCreateNestedManyWithoutSubjectInput = {
    create?: XOR<quizzesCreateWithoutSubjectInput, quizzesUncheckedCreateWithoutSubjectInput> | quizzesCreateWithoutSubjectInput[] | quizzesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutSubjectInput | quizzesCreateOrConnectWithoutSubjectInput[]
    createMany?: quizzesCreateManySubjectInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type scoresCreateNestedManyWithoutSubjectInput = {
    create?: XOR<scoresCreateWithoutSubjectInput, scoresUncheckedCreateWithoutSubjectInput> | scoresCreateWithoutSubjectInput[] | scoresUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutSubjectInput | scoresCreateOrConnectWithoutSubjectInput[]
    createMany?: scoresCreateManySubjectInputEnvelope
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
  }

  export type study_timetablesCreateNestedManyWithoutSubjectInput = {
    create?: XOR<study_timetablesCreateWithoutSubjectInput, study_timetablesUncheckedCreateWithoutSubjectInput> | study_timetablesCreateWithoutSubjectInput[] | study_timetablesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutSubjectInput | study_timetablesCreateOrConnectWithoutSubjectInput[]
    createMany?: study_timetablesCreateManySubjectInputEnvelope
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
  }

  export type weekly_schedulesCreateNestedManyWithoutSubjectInput = {
    create?: XOR<weekly_schedulesCreateWithoutSubjectInput, weekly_schedulesUncheckedCreateWithoutSubjectInput> | weekly_schedulesCreateWithoutSubjectInput[] | weekly_schedulesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutSubjectInput | weekly_schedulesCreateOrConnectWithoutSubjectInput[]
    createMany?: weekly_schedulesCreateManySubjectInputEnvelope
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
  }

  export type assignmentsUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<assignmentsCreateWithoutSubjectInput, assignmentsUncheckedCreateWithoutSubjectInput> | assignmentsCreateWithoutSubjectInput[] | assignmentsUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutSubjectInput | assignmentsCreateOrConnectWithoutSubjectInput[]
    createMany?: assignmentsCreateManySubjectInputEnvelope
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
  }

  export type question_banksUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<question_banksCreateWithoutSubjectInput, question_banksUncheckedCreateWithoutSubjectInput> | question_banksCreateWithoutSubjectInput[] | question_banksUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutSubjectInput | question_banksCreateOrConnectWithoutSubjectInput[]
    createMany?: question_banksCreateManySubjectInputEnvelope
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
  }

  export type quizzesUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<quizzesCreateWithoutSubjectInput, quizzesUncheckedCreateWithoutSubjectInput> | quizzesCreateWithoutSubjectInput[] | quizzesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutSubjectInput | quizzesCreateOrConnectWithoutSubjectInput[]
    createMany?: quizzesCreateManySubjectInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type scoresUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<scoresCreateWithoutSubjectInput, scoresUncheckedCreateWithoutSubjectInput> | scoresCreateWithoutSubjectInput[] | scoresUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutSubjectInput | scoresCreateOrConnectWithoutSubjectInput[]
    createMany?: scoresCreateManySubjectInputEnvelope
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
  }

  export type study_timetablesUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<study_timetablesCreateWithoutSubjectInput, study_timetablesUncheckedCreateWithoutSubjectInput> | study_timetablesCreateWithoutSubjectInput[] | study_timetablesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutSubjectInput | study_timetablesCreateOrConnectWithoutSubjectInput[]
    createMany?: study_timetablesCreateManySubjectInputEnvelope
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
  }

  export type weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<weekly_schedulesCreateWithoutSubjectInput, weekly_schedulesUncheckedCreateWithoutSubjectInput> | weekly_schedulesCreateWithoutSubjectInput[] | weekly_schedulesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutSubjectInput | weekly_schedulesCreateOrConnectWithoutSubjectInput[]
    createMany?: weekly_schedulesCreateManySubjectInputEnvelope
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
  }

  export type assignmentsUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<assignmentsCreateWithoutSubjectInput, assignmentsUncheckedCreateWithoutSubjectInput> | assignmentsCreateWithoutSubjectInput[] | assignmentsUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutSubjectInput | assignmentsCreateOrConnectWithoutSubjectInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutSubjectInput | assignmentsUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: assignmentsCreateManySubjectInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutSubjectInput | assignmentsUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutSubjectInput | assignmentsUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type question_banksUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<question_banksCreateWithoutSubjectInput, question_banksUncheckedCreateWithoutSubjectInput> | question_banksCreateWithoutSubjectInput[] | question_banksUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutSubjectInput | question_banksCreateOrConnectWithoutSubjectInput[]
    upsert?: question_banksUpsertWithWhereUniqueWithoutSubjectInput | question_banksUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: question_banksCreateManySubjectInputEnvelope
    set?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    disconnect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    delete?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    update?: question_banksUpdateWithWhereUniqueWithoutSubjectInput | question_banksUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: question_banksUpdateManyWithWhereWithoutSubjectInput | question_banksUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
  }

  export type quizzesUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<quizzesCreateWithoutSubjectInput, quizzesUncheckedCreateWithoutSubjectInput> | quizzesCreateWithoutSubjectInput[] | quizzesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutSubjectInput | quizzesCreateOrConnectWithoutSubjectInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutSubjectInput | quizzesUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: quizzesCreateManySubjectInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutSubjectInput | quizzesUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutSubjectInput | quizzesUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type scoresUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<scoresCreateWithoutSubjectInput, scoresUncheckedCreateWithoutSubjectInput> | scoresCreateWithoutSubjectInput[] | scoresUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutSubjectInput | scoresCreateOrConnectWithoutSubjectInput[]
    upsert?: scoresUpsertWithWhereUniqueWithoutSubjectInput | scoresUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: scoresCreateManySubjectInputEnvelope
    set?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    disconnect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    delete?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    update?: scoresUpdateWithWhereUniqueWithoutSubjectInput | scoresUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: scoresUpdateManyWithWhereWithoutSubjectInput | scoresUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: scoresScalarWhereInput | scoresScalarWhereInput[]
  }

  export type study_timetablesUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<study_timetablesCreateWithoutSubjectInput, study_timetablesUncheckedCreateWithoutSubjectInput> | study_timetablesCreateWithoutSubjectInput[] | study_timetablesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutSubjectInput | study_timetablesCreateOrConnectWithoutSubjectInput[]
    upsert?: study_timetablesUpsertWithWhereUniqueWithoutSubjectInput | study_timetablesUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: study_timetablesCreateManySubjectInputEnvelope
    set?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    disconnect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    delete?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    update?: study_timetablesUpdateWithWhereUniqueWithoutSubjectInput | study_timetablesUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: study_timetablesUpdateManyWithWhereWithoutSubjectInput | study_timetablesUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: study_timetablesScalarWhereInput | study_timetablesScalarWhereInput[]
  }

  export type weekly_schedulesUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<weekly_schedulesCreateWithoutSubjectInput, weekly_schedulesUncheckedCreateWithoutSubjectInput> | weekly_schedulesCreateWithoutSubjectInput[] | weekly_schedulesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutSubjectInput | weekly_schedulesCreateOrConnectWithoutSubjectInput[]
    upsert?: weekly_schedulesUpsertWithWhereUniqueWithoutSubjectInput | weekly_schedulesUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: weekly_schedulesCreateManySubjectInputEnvelope
    set?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    disconnect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    delete?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    update?: weekly_schedulesUpdateWithWhereUniqueWithoutSubjectInput | weekly_schedulesUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: weekly_schedulesUpdateManyWithWhereWithoutSubjectInput | weekly_schedulesUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
  }

  export type assignmentsUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<assignmentsCreateWithoutSubjectInput, assignmentsUncheckedCreateWithoutSubjectInput> | assignmentsCreateWithoutSubjectInput[] | assignmentsUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: assignmentsCreateOrConnectWithoutSubjectInput | assignmentsCreateOrConnectWithoutSubjectInput[]
    upsert?: assignmentsUpsertWithWhereUniqueWithoutSubjectInput | assignmentsUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: assignmentsCreateManySubjectInputEnvelope
    set?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    disconnect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    delete?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    connect?: assignmentsWhereUniqueInput | assignmentsWhereUniqueInput[]
    update?: assignmentsUpdateWithWhereUniqueWithoutSubjectInput | assignmentsUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: assignmentsUpdateManyWithWhereWithoutSubjectInput | assignmentsUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
  }

  export type question_banksUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<question_banksCreateWithoutSubjectInput, question_banksUncheckedCreateWithoutSubjectInput> | question_banksCreateWithoutSubjectInput[] | question_banksUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: question_banksCreateOrConnectWithoutSubjectInput | question_banksCreateOrConnectWithoutSubjectInput[]
    upsert?: question_banksUpsertWithWhereUniqueWithoutSubjectInput | question_banksUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: question_banksCreateManySubjectInputEnvelope
    set?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    disconnect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    delete?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    connect?: question_banksWhereUniqueInput | question_banksWhereUniqueInput[]
    update?: question_banksUpdateWithWhereUniqueWithoutSubjectInput | question_banksUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: question_banksUpdateManyWithWhereWithoutSubjectInput | question_banksUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
  }

  export type quizzesUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<quizzesCreateWithoutSubjectInput, quizzesUncheckedCreateWithoutSubjectInput> | quizzesCreateWithoutSubjectInput[] | quizzesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutSubjectInput | quizzesCreateOrConnectWithoutSubjectInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutSubjectInput | quizzesUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: quizzesCreateManySubjectInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutSubjectInput | quizzesUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutSubjectInput | quizzesUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type scoresUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<scoresCreateWithoutSubjectInput, scoresUncheckedCreateWithoutSubjectInput> | scoresCreateWithoutSubjectInput[] | scoresUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: scoresCreateOrConnectWithoutSubjectInput | scoresCreateOrConnectWithoutSubjectInput[]
    upsert?: scoresUpsertWithWhereUniqueWithoutSubjectInput | scoresUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: scoresCreateManySubjectInputEnvelope
    set?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    disconnect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    delete?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    connect?: scoresWhereUniqueInput | scoresWhereUniqueInput[]
    update?: scoresUpdateWithWhereUniqueWithoutSubjectInput | scoresUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: scoresUpdateManyWithWhereWithoutSubjectInput | scoresUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: scoresScalarWhereInput | scoresScalarWhereInput[]
  }

  export type study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<study_timetablesCreateWithoutSubjectInput, study_timetablesUncheckedCreateWithoutSubjectInput> | study_timetablesCreateWithoutSubjectInput[] | study_timetablesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: study_timetablesCreateOrConnectWithoutSubjectInput | study_timetablesCreateOrConnectWithoutSubjectInput[]
    upsert?: study_timetablesUpsertWithWhereUniqueWithoutSubjectInput | study_timetablesUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: study_timetablesCreateManySubjectInputEnvelope
    set?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    disconnect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    delete?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    connect?: study_timetablesWhereUniqueInput | study_timetablesWhereUniqueInput[]
    update?: study_timetablesUpdateWithWhereUniqueWithoutSubjectInput | study_timetablesUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: study_timetablesUpdateManyWithWhereWithoutSubjectInput | study_timetablesUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: study_timetablesScalarWhereInput | study_timetablesScalarWhereInput[]
  }

  export type weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<weekly_schedulesCreateWithoutSubjectInput, weekly_schedulesUncheckedCreateWithoutSubjectInput> | weekly_schedulesCreateWithoutSubjectInput[] | weekly_schedulesUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: weekly_schedulesCreateOrConnectWithoutSubjectInput | weekly_schedulesCreateOrConnectWithoutSubjectInput[]
    upsert?: weekly_schedulesUpsertWithWhereUniqueWithoutSubjectInput | weekly_schedulesUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: weekly_schedulesCreateManySubjectInputEnvelope
    set?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    disconnect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    delete?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    connect?: weekly_schedulesWhereUniqueInput | weekly_schedulesWhereUniqueInput[]
    update?: weekly_schedulesUpdateWithWhereUniqueWithoutSubjectInput | weekly_schedulesUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: weekly_schedulesUpdateManyWithWhereWithoutSubjectInput | weekly_schedulesUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
  }

  export type questionsCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<questionsCreateWithoutQuestion_bankInput, questionsUncheckedCreateWithoutQuestion_bankInput> | questionsCreateWithoutQuestion_bankInput[] | questionsUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuestion_bankInput | questionsCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: questionsCreateManyQuestion_bankInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type classesCreateNestedOneWithoutQuestion_banksInput = {
    create?: XOR<classesCreateWithoutQuestion_banksInput, classesUncheckedCreateWithoutQuestion_banksInput>
    connectOrCreate?: classesCreateOrConnectWithoutQuestion_banksInput
    connect?: classesWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutQuestion_banksInput = {
    create?: XOR<subjectsCreateWithoutQuestion_banksInput, subjectsUncheckedCreateWithoutQuestion_banksInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutQuestion_banksInput
    connect?: subjectsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutQuestion_banksInput = {
    create?: XOR<usersCreateWithoutQuestion_banksInput, usersUncheckedCreateWithoutQuestion_banksInput>
    connectOrCreate?: usersCreateOrConnectWithoutQuestion_banksInput
    connect?: usersWhereUniqueInput
  }

  export type quizzesCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<quizzesCreateWithoutQuestion_bankInput, quizzesUncheckedCreateWithoutQuestion_bankInput> | quizzesCreateWithoutQuestion_bankInput[] | quizzesUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestion_bankInput | quizzesCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: quizzesCreateManyQuestion_bankInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type questionsUncheckedCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<questionsCreateWithoutQuestion_bankInput, questionsUncheckedCreateWithoutQuestion_bankInput> | questionsCreateWithoutQuestion_bankInput[] | questionsUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuestion_bankInput | questionsCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: questionsCreateManyQuestion_bankInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type quizzesUncheckedCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<quizzesCreateWithoutQuestion_bankInput, quizzesUncheckedCreateWithoutQuestion_bankInput> | quizzesCreateWithoutQuestion_bankInput[] | quizzesUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestion_bankInput | quizzesCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: quizzesCreateManyQuestion_bankInputEnvelope
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
  }

  export type questionsUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<questionsCreateWithoutQuestion_bankInput, questionsUncheckedCreateWithoutQuestion_bankInput> | questionsCreateWithoutQuestion_bankInput[] | questionsUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuestion_bankInput | questionsCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutQuestion_bankInput | questionsUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: questionsCreateManyQuestion_bankInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutQuestion_bankInput | questionsUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutQuestion_bankInput | questionsUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type classesUpdateOneRequiredWithoutQuestion_banksNestedInput = {
    create?: XOR<classesCreateWithoutQuestion_banksInput, classesUncheckedCreateWithoutQuestion_banksInput>
    connectOrCreate?: classesCreateOrConnectWithoutQuestion_banksInput
    upsert?: classesUpsertWithoutQuestion_banksInput
    connect?: classesWhereUniqueInput
    update?: XOR<XOR<classesUpdateToOneWithWhereWithoutQuestion_banksInput, classesUpdateWithoutQuestion_banksInput>, classesUncheckedUpdateWithoutQuestion_banksInput>
  }

  export type subjectsUpdateOneRequiredWithoutQuestion_banksNestedInput = {
    create?: XOR<subjectsCreateWithoutQuestion_banksInput, subjectsUncheckedCreateWithoutQuestion_banksInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutQuestion_banksInput
    upsert?: subjectsUpsertWithoutQuestion_banksInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutQuestion_banksInput, subjectsUpdateWithoutQuestion_banksInput>, subjectsUncheckedUpdateWithoutQuestion_banksInput>
  }

  export type usersUpdateOneRequiredWithoutQuestion_banksNestedInput = {
    create?: XOR<usersCreateWithoutQuestion_banksInput, usersUncheckedCreateWithoutQuestion_banksInput>
    connectOrCreate?: usersCreateOrConnectWithoutQuestion_banksInput
    upsert?: usersUpsertWithoutQuestion_banksInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutQuestion_banksInput, usersUpdateWithoutQuestion_banksInput>, usersUncheckedUpdateWithoutQuestion_banksInput>
  }

  export type quizzesUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<quizzesCreateWithoutQuestion_bankInput, quizzesUncheckedCreateWithoutQuestion_bankInput> | quizzesCreateWithoutQuestion_bankInput[] | quizzesUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestion_bankInput | quizzesCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutQuestion_bankInput | quizzesUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: quizzesCreateManyQuestion_bankInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutQuestion_bankInput | quizzesUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutQuestion_bankInput | quizzesUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type questionsUncheckedUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<questionsCreateWithoutQuestion_bankInput, questionsUncheckedCreateWithoutQuestion_bankInput> | questionsCreateWithoutQuestion_bankInput[] | questionsUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutQuestion_bankInput | questionsCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutQuestion_bankInput | questionsUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: questionsCreateManyQuestion_bankInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutQuestion_bankInput | questionsUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutQuestion_bankInput | questionsUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type quizzesUncheckedUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<quizzesCreateWithoutQuestion_bankInput, quizzesUncheckedCreateWithoutQuestion_bankInput> | quizzesCreateWithoutQuestion_bankInput[] | quizzesUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: quizzesCreateOrConnectWithoutQuestion_bankInput | quizzesCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: quizzesUpsertWithWhereUniqueWithoutQuestion_bankInput | quizzesUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: quizzesCreateManyQuestion_bankInputEnvelope
    set?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    disconnect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    delete?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    connect?: quizzesWhereUniqueInput | quizzesWhereUniqueInput[]
    update?: quizzesUpdateWithWhereUniqueWithoutQuestion_bankInput | quizzesUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: quizzesUpdateManyWithWhereWithoutQuestion_bankInput | quizzesUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
  }

  export type question_banksCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<question_banksCreateWithoutQuestionsInput, question_banksUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: question_banksCreateOrConnectWithoutQuestionsInput
    connect?: question_banksWhereUniqueInput
  }

  export type quiz_questionsCreateNestedManyWithoutQuestionInput = {
    create?: XOR<quiz_questionsCreateWithoutQuestionInput, quiz_questionsUncheckedCreateWithoutQuestionInput> | quiz_questionsCreateWithoutQuestionInput[] | quiz_questionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuestionInput | quiz_questionsCreateOrConnectWithoutQuestionInput[]
    createMany?: quiz_questionsCreateManyQuestionInputEnvelope
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
  }

  export type quiz_questionsUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<quiz_questionsCreateWithoutQuestionInput, quiz_questionsUncheckedCreateWithoutQuestionInput> | quiz_questionsCreateWithoutQuestionInput[] | quiz_questionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuestionInput | quiz_questionsCreateOrConnectWithoutQuestionInput[]
    createMany?: quiz_questionsCreateManyQuestionInputEnvelope
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
  }

  export type question_banksUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<question_banksCreateWithoutQuestionsInput, question_banksUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: question_banksCreateOrConnectWithoutQuestionsInput
    upsert?: question_banksUpsertWithoutQuestionsInput
    connect?: question_banksWhereUniqueInput
    update?: XOR<XOR<question_banksUpdateToOneWithWhereWithoutQuestionsInput, question_banksUpdateWithoutQuestionsInput>, question_banksUncheckedUpdateWithoutQuestionsInput>
  }

  export type quiz_questionsUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<quiz_questionsCreateWithoutQuestionInput, quiz_questionsUncheckedCreateWithoutQuestionInput> | quiz_questionsCreateWithoutQuestionInput[] | quiz_questionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuestionInput | quiz_questionsCreateOrConnectWithoutQuestionInput[]
    upsert?: quiz_questionsUpsertWithWhereUniqueWithoutQuestionInput | quiz_questionsUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: quiz_questionsCreateManyQuestionInputEnvelope
    set?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    disconnect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    delete?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    update?: quiz_questionsUpdateWithWhereUniqueWithoutQuestionInput | quiz_questionsUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: quiz_questionsUpdateManyWithWhereWithoutQuestionInput | quiz_questionsUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: quiz_questionsScalarWhereInput | quiz_questionsScalarWhereInput[]
  }

  export type quiz_questionsUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<quiz_questionsCreateWithoutQuestionInput, quiz_questionsUncheckedCreateWithoutQuestionInput> | quiz_questionsCreateWithoutQuestionInput[] | quiz_questionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuestionInput | quiz_questionsCreateOrConnectWithoutQuestionInput[]
    upsert?: quiz_questionsUpsertWithWhereUniqueWithoutQuestionInput | quiz_questionsUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: quiz_questionsCreateManyQuestionInputEnvelope
    set?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    disconnect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    delete?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    update?: quiz_questionsUpdateWithWhereUniqueWithoutQuestionInput | quiz_questionsUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: quiz_questionsUpdateManyWithWhereWithoutQuestionInput | quiz_questionsUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: quiz_questionsScalarWhereInput | quiz_questionsScalarWhereInput[]
  }

  export type classesCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<classesCreateWithoutQuizzesInput, classesUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: classesCreateOrConnectWithoutQuizzesInput
    connect?: classesWhereUniqueInput
  }

  export type question_banksCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<question_banksCreateWithoutQuizzesInput, question_banksUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: question_banksCreateOrConnectWithoutQuizzesInput
    connect?: question_banksWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<subjectsCreateWithoutQuizzesInput, subjectsUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutQuizzesInput
    connect?: subjectsWhereUniqueInput
  }

  export type quiz_questionsCreateNestedManyWithoutQuizInput = {
    create?: XOR<quiz_questionsCreateWithoutQuizInput, quiz_questionsUncheckedCreateWithoutQuizInput> | quiz_questionsCreateWithoutQuizInput[] | quiz_questionsUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuizInput | quiz_questionsCreateOrConnectWithoutQuizInput[]
    createMany?: quiz_questionsCreateManyQuizInputEnvelope
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
  }

  export type student_quizzesCreateNestedManyWithoutQuizInput = {
    create?: XOR<student_quizzesCreateWithoutQuizInput, student_quizzesUncheckedCreateWithoutQuizInput> | student_quizzesCreateWithoutQuizInput[] | student_quizzesUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutQuizInput | student_quizzesCreateOrConnectWithoutQuizInput[]
    createMany?: student_quizzesCreateManyQuizInputEnvelope
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
  }

  export type quiz_questionsUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<quiz_questionsCreateWithoutQuizInput, quiz_questionsUncheckedCreateWithoutQuizInput> | quiz_questionsCreateWithoutQuizInput[] | quiz_questionsUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuizInput | quiz_questionsCreateOrConnectWithoutQuizInput[]
    createMany?: quiz_questionsCreateManyQuizInputEnvelope
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
  }

  export type student_quizzesUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<student_quizzesCreateWithoutQuizInput, student_quizzesUncheckedCreateWithoutQuizInput> | student_quizzesCreateWithoutQuizInput[] | student_quizzesUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutQuizInput | student_quizzesCreateOrConnectWithoutQuizInput[]
    createMany?: student_quizzesCreateManyQuizInputEnvelope
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
  }

  export type classesUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<classesCreateWithoutQuizzesInput, classesUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: classesCreateOrConnectWithoutQuizzesInput
    upsert?: classesUpsertWithoutQuizzesInput
    connect?: classesWhereUniqueInput
    update?: XOR<XOR<classesUpdateToOneWithWhereWithoutQuizzesInput, classesUpdateWithoutQuizzesInput>, classesUncheckedUpdateWithoutQuizzesInput>
  }

  export type question_banksUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<question_banksCreateWithoutQuizzesInput, question_banksUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: question_banksCreateOrConnectWithoutQuizzesInput
    upsert?: question_banksUpsertWithoutQuizzesInput
    connect?: question_banksWhereUniqueInput
    update?: XOR<XOR<question_banksUpdateToOneWithWhereWithoutQuizzesInput, question_banksUpdateWithoutQuizzesInput>, question_banksUncheckedUpdateWithoutQuizzesInput>
  }

  export type subjectsUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<subjectsCreateWithoutQuizzesInput, subjectsUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutQuizzesInput
    upsert?: subjectsUpsertWithoutQuizzesInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutQuizzesInput, subjectsUpdateWithoutQuizzesInput>, subjectsUncheckedUpdateWithoutQuizzesInput>
  }

  export type quiz_questionsUpdateManyWithoutQuizNestedInput = {
    create?: XOR<quiz_questionsCreateWithoutQuizInput, quiz_questionsUncheckedCreateWithoutQuizInput> | quiz_questionsCreateWithoutQuizInput[] | quiz_questionsUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuizInput | quiz_questionsCreateOrConnectWithoutQuizInput[]
    upsert?: quiz_questionsUpsertWithWhereUniqueWithoutQuizInput | quiz_questionsUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: quiz_questionsCreateManyQuizInputEnvelope
    set?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    disconnect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    delete?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    update?: quiz_questionsUpdateWithWhereUniqueWithoutQuizInput | quiz_questionsUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: quiz_questionsUpdateManyWithWhereWithoutQuizInput | quiz_questionsUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: quiz_questionsScalarWhereInput | quiz_questionsScalarWhereInput[]
  }

  export type student_quizzesUpdateManyWithoutQuizNestedInput = {
    create?: XOR<student_quizzesCreateWithoutQuizInput, student_quizzesUncheckedCreateWithoutQuizInput> | student_quizzesCreateWithoutQuizInput[] | student_quizzesUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutQuizInput | student_quizzesCreateOrConnectWithoutQuizInput[]
    upsert?: student_quizzesUpsertWithWhereUniqueWithoutQuizInput | student_quizzesUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: student_quizzesCreateManyQuizInputEnvelope
    set?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    disconnect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    delete?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    update?: student_quizzesUpdateWithWhereUniqueWithoutQuizInput | student_quizzesUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: student_quizzesUpdateManyWithWhereWithoutQuizInput | student_quizzesUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: student_quizzesScalarWhereInput | student_quizzesScalarWhereInput[]
  }

  export type quiz_questionsUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<quiz_questionsCreateWithoutQuizInput, quiz_questionsUncheckedCreateWithoutQuizInput> | quiz_questionsCreateWithoutQuizInput[] | quiz_questionsUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: quiz_questionsCreateOrConnectWithoutQuizInput | quiz_questionsCreateOrConnectWithoutQuizInput[]
    upsert?: quiz_questionsUpsertWithWhereUniqueWithoutQuizInput | quiz_questionsUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: quiz_questionsCreateManyQuizInputEnvelope
    set?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    disconnect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    delete?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    connect?: quiz_questionsWhereUniqueInput | quiz_questionsWhereUniqueInput[]
    update?: quiz_questionsUpdateWithWhereUniqueWithoutQuizInput | quiz_questionsUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: quiz_questionsUpdateManyWithWhereWithoutQuizInput | quiz_questionsUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: quiz_questionsScalarWhereInput | quiz_questionsScalarWhereInput[]
  }

  export type student_quizzesUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<student_quizzesCreateWithoutQuizInput, student_quizzesUncheckedCreateWithoutQuizInput> | student_quizzesCreateWithoutQuizInput[] | student_quizzesUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: student_quizzesCreateOrConnectWithoutQuizInput | student_quizzesCreateOrConnectWithoutQuizInput[]
    upsert?: student_quizzesUpsertWithWhereUniqueWithoutQuizInput | student_quizzesUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: student_quizzesCreateManyQuizInputEnvelope
    set?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    disconnect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    delete?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    connect?: student_quizzesWhereUniqueInput | student_quizzesWhereUniqueInput[]
    update?: student_quizzesUpdateWithWhereUniqueWithoutQuizInput | student_quizzesUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: student_quizzesUpdateManyWithWhereWithoutQuizInput | student_quizzesUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: student_quizzesScalarWhereInput | student_quizzesScalarWhereInput[]
  }

  export type questionsCreateNestedOneWithoutQuiz_questionsInput = {
    create?: XOR<questionsCreateWithoutQuiz_questionsInput, questionsUncheckedCreateWithoutQuiz_questionsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuiz_questionsInput
    connect?: questionsWhereUniqueInput
  }

  export type quizzesCreateNestedOneWithoutQuiz_questionsInput = {
    create?: XOR<quizzesCreateWithoutQuiz_questionsInput, quizzesUncheckedCreateWithoutQuiz_questionsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutQuiz_questionsInput
    connect?: quizzesWhereUniqueInput
  }

  export type questionsUpdateOneRequiredWithoutQuiz_questionsNestedInput = {
    create?: XOR<questionsCreateWithoutQuiz_questionsInput, questionsUncheckedCreateWithoutQuiz_questionsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuiz_questionsInput
    upsert?: questionsUpsertWithoutQuiz_questionsInput
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutQuiz_questionsInput, questionsUpdateWithoutQuiz_questionsInput>, questionsUncheckedUpdateWithoutQuiz_questionsInput>
  }

  export type quizzesUpdateOneRequiredWithoutQuiz_questionsNestedInput = {
    create?: XOR<quizzesCreateWithoutQuiz_questionsInput, quizzesUncheckedCreateWithoutQuiz_questionsInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutQuiz_questionsInput
    upsert?: quizzesUpsertWithoutQuiz_questionsInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutQuiz_questionsInput, quizzesUpdateWithoutQuiz_questionsInput>, quizzesUncheckedUpdateWithoutQuiz_questionsInput>
  }

  export type quizzesCreateNestedOneWithoutStudent_quizzesInput = {
    create?: XOR<quizzesCreateWithoutStudent_quizzesInput, quizzesUncheckedCreateWithoutStudent_quizzesInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutStudent_quizzesInput
    connect?: quizzesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutStudent_quizzesInput = {
    create?: XOR<usersCreateWithoutStudent_quizzesInput, usersUncheckedCreateWithoutStudent_quizzesInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudent_quizzesInput
    connect?: usersWhereUniqueInput
  }

  export type quizzesUpdateOneRequiredWithoutStudent_quizzesNestedInput = {
    create?: XOR<quizzesCreateWithoutStudent_quizzesInput, quizzesUncheckedCreateWithoutStudent_quizzesInput>
    connectOrCreate?: quizzesCreateOrConnectWithoutStudent_quizzesInput
    upsert?: quizzesUpsertWithoutStudent_quizzesInput
    connect?: quizzesWhereUniqueInput
    update?: XOR<XOR<quizzesUpdateToOneWithWhereWithoutStudent_quizzesInput, quizzesUpdateWithoutStudent_quizzesInput>, quizzesUncheckedUpdateWithoutStudent_quizzesInput>
  }

  export type usersUpdateOneRequiredWithoutStudent_quizzesNestedInput = {
    create?: XOR<usersCreateWithoutStudent_quizzesInput, usersUncheckedCreateWithoutStudent_quizzesInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudent_quizzesInput
    upsert?: usersUpsertWithoutStudent_quizzesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutStudent_quizzesInput, usersUpdateWithoutStudent_quizzesInput>, usersUncheckedUpdateWithoutStudent_quizzesInput>
  }

  export type classesCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<classesCreateWithoutAssignmentsInput, classesUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: classesCreateOrConnectWithoutAssignmentsInput
    connect?: classesWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<subjectsCreateWithoutAssignmentsInput, subjectsUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutAssignmentsInput
    connect?: subjectsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<usersCreateWithoutAssignmentsInput, usersUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutAssignmentsInput
    connect?: usersWhereUniqueInput
  }

  export type student_assignmentsCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<student_assignmentsCreateWithoutAssignmentInput, student_assignmentsUncheckedCreateWithoutAssignmentInput> | student_assignmentsCreateWithoutAssignmentInput[] | student_assignmentsUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutAssignmentInput | student_assignmentsCreateOrConnectWithoutAssignmentInput[]
    createMany?: student_assignmentsCreateManyAssignmentInputEnvelope
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
  }

  export type student_assignmentsUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<student_assignmentsCreateWithoutAssignmentInput, student_assignmentsUncheckedCreateWithoutAssignmentInput> | student_assignmentsCreateWithoutAssignmentInput[] | student_assignmentsUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutAssignmentInput | student_assignmentsCreateOrConnectWithoutAssignmentInput[]
    createMany?: student_assignmentsCreateManyAssignmentInputEnvelope
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
  }

  export type classesUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<classesCreateWithoutAssignmentsInput, classesUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: classesCreateOrConnectWithoutAssignmentsInput
    upsert?: classesUpsertWithoutAssignmentsInput
    connect?: classesWhereUniqueInput
    update?: XOR<XOR<classesUpdateToOneWithWhereWithoutAssignmentsInput, classesUpdateWithoutAssignmentsInput>, classesUncheckedUpdateWithoutAssignmentsInput>
  }

  export type subjectsUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<subjectsCreateWithoutAssignmentsInput, subjectsUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutAssignmentsInput
    upsert?: subjectsUpsertWithoutAssignmentsInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutAssignmentsInput, subjectsUpdateWithoutAssignmentsInput>, subjectsUncheckedUpdateWithoutAssignmentsInput>
  }

  export type usersUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<usersCreateWithoutAssignmentsInput, usersUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutAssignmentsInput
    upsert?: usersUpsertWithoutAssignmentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAssignmentsInput, usersUpdateWithoutAssignmentsInput>, usersUncheckedUpdateWithoutAssignmentsInput>
  }

  export type student_assignmentsUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<student_assignmentsCreateWithoutAssignmentInput, student_assignmentsUncheckedCreateWithoutAssignmentInput> | student_assignmentsCreateWithoutAssignmentInput[] | student_assignmentsUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutAssignmentInput | student_assignmentsCreateOrConnectWithoutAssignmentInput[]
    upsert?: student_assignmentsUpsertWithWhereUniqueWithoutAssignmentInput | student_assignmentsUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: student_assignmentsCreateManyAssignmentInputEnvelope
    set?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    disconnect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    delete?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    update?: student_assignmentsUpdateWithWhereUniqueWithoutAssignmentInput | student_assignmentsUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: student_assignmentsUpdateManyWithWhereWithoutAssignmentInput | student_assignmentsUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: student_assignmentsScalarWhereInput | student_assignmentsScalarWhereInput[]
  }

  export type student_assignmentsUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<student_assignmentsCreateWithoutAssignmentInput, student_assignmentsUncheckedCreateWithoutAssignmentInput> | student_assignmentsCreateWithoutAssignmentInput[] | student_assignmentsUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: student_assignmentsCreateOrConnectWithoutAssignmentInput | student_assignmentsCreateOrConnectWithoutAssignmentInput[]
    upsert?: student_assignmentsUpsertWithWhereUniqueWithoutAssignmentInput | student_assignmentsUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: student_assignmentsCreateManyAssignmentInputEnvelope
    set?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    disconnect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    delete?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    connect?: student_assignmentsWhereUniqueInput | student_assignmentsWhereUniqueInput[]
    update?: student_assignmentsUpdateWithWhereUniqueWithoutAssignmentInput | student_assignmentsUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: student_assignmentsUpdateManyWithWhereWithoutAssignmentInput | student_assignmentsUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: student_assignmentsScalarWhereInput | student_assignmentsScalarWhereInput[]
  }

  export type assignmentsCreateNestedOneWithoutStudent_assignmentsInput = {
    create?: XOR<assignmentsCreateWithoutStudent_assignmentsInput, assignmentsUncheckedCreateWithoutStudent_assignmentsInput>
    connectOrCreate?: assignmentsCreateOrConnectWithoutStudent_assignmentsInput
    connect?: assignmentsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutStudent_assignmentsInput = {
    create?: XOR<usersCreateWithoutStudent_assignmentsInput, usersUncheckedCreateWithoutStudent_assignmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudent_assignmentsInput
    connect?: usersWhereUniqueInput
  }

  export type assignmentsUpdateOneRequiredWithoutStudent_assignmentsNestedInput = {
    create?: XOR<assignmentsCreateWithoutStudent_assignmentsInput, assignmentsUncheckedCreateWithoutStudent_assignmentsInput>
    connectOrCreate?: assignmentsCreateOrConnectWithoutStudent_assignmentsInput
    upsert?: assignmentsUpsertWithoutStudent_assignmentsInput
    connect?: assignmentsWhereUniqueInput
    update?: XOR<XOR<assignmentsUpdateToOneWithWhereWithoutStudent_assignmentsInput, assignmentsUpdateWithoutStudent_assignmentsInput>, assignmentsUncheckedUpdateWithoutStudent_assignmentsInput>
  }

  export type usersUpdateOneRequiredWithoutStudent_assignmentsNestedInput = {
    create?: XOR<usersCreateWithoutStudent_assignmentsInput, usersUncheckedCreateWithoutStudent_assignmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudent_assignmentsInput
    upsert?: usersUpsertWithoutStudent_assignmentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutStudent_assignmentsInput, usersUpdateWithoutStudent_assignmentsInput>, usersUncheckedUpdateWithoutStudent_assignmentsInput>
  }

  export type classesCreateNestedOneWithoutWeekly_schedulesInput = {
    create?: XOR<classesCreateWithoutWeekly_schedulesInput, classesUncheckedCreateWithoutWeekly_schedulesInput>
    connectOrCreate?: classesCreateOrConnectWithoutWeekly_schedulesInput
    connect?: classesWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutWeekly_schedulesInput = {
    create?: XOR<subjectsCreateWithoutWeekly_schedulesInput, subjectsUncheckedCreateWithoutWeekly_schedulesInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutWeekly_schedulesInput
    connect?: subjectsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutWeekly_schedulesInput = {
    create?: XOR<usersCreateWithoutWeekly_schedulesInput, usersUncheckedCreateWithoutWeekly_schedulesInput>
    connectOrCreate?: usersCreateOrConnectWithoutWeekly_schedulesInput
    connect?: usersWhereUniqueInput
  }

  export type classesUpdateOneRequiredWithoutWeekly_schedulesNestedInput = {
    create?: XOR<classesCreateWithoutWeekly_schedulesInput, classesUncheckedCreateWithoutWeekly_schedulesInput>
    connectOrCreate?: classesCreateOrConnectWithoutWeekly_schedulesInput
    upsert?: classesUpsertWithoutWeekly_schedulesInput
    connect?: classesWhereUniqueInput
    update?: XOR<XOR<classesUpdateToOneWithWhereWithoutWeekly_schedulesInput, classesUpdateWithoutWeekly_schedulesInput>, classesUncheckedUpdateWithoutWeekly_schedulesInput>
  }

  export type subjectsUpdateOneRequiredWithoutWeekly_schedulesNestedInput = {
    create?: XOR<subjectsCreateWithoutWeekly_schedulesInput, subjectsUncheckedCreateWithoutWeekly_schedulesInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutWeekly_schedulesInput
    upsert?: subjectsUpsertWithoutWeekly_schedulesInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutWeekly_schedulesInput, subjectsUpdateWithoutWeekly_schedulesInput>, subjectsUncheckedUpdateWithoutWeekly_schedulesInput>
  }

  export type usersUpdateOneRequiredWithoutWeekly_schedulesNestedInput = {
    create?: XOR<usersCreateWithoutWeekly_schedulesInput, usersUncheckedCreateWithoutWeekly_schedulesInput>
    connectOrCreate?: usersCreateOrConnectWithoutWeekly_schedulesInput
    upsert?: usersUpsertWithoutWeekly_schedulesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutWeekly_schedulesInput, usersUpdateWithoutWeekly_schedulesInput>, usersUncheckedUpdateWithoutWeekly_schedulesInput>
  }

  export type usersCreateNestedOneWithoutStudy_timetablesInput = {
    create?: XOR<usersCreateWithoutStudy_timetablesInput, usersUncheckedCreateWithoutStudy_timetablesInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudy_timetablesInput
    connect?: usersWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutStudy_timetablesInput = {
    create?: XOR<subjectsCreateWithoutStudy_timetablesInput, subjectsUncheckedCreateWithoutStudy_timetablesInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutStudy_timetablesInput
    connect?: subjectsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutStudy_timetablesNestedInput = {
    create?: XOR<usersCreateWithoutStudy_timetablesInput, usersUncheckedCreateWithoutStudy_timetablesInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudy_timetablesInput
    upsert?: usersUpsertWithoutStudy_timetablesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutStudy_timetablesInput, usersUpdateWithoutStudy_timetablesInput>, usersUncheckedUpdateWithoutStudy_timetablesInput>
  }

  export type subjectsUpdateOneRequiredWithoutStudy_timetablesNestedInput = {
    create?: XOR<subjectsCreateWithoutStudy_timetablesInput, subjectsUncheckedCreateWithoutStudy_timetablesInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutStudy_timetablesInput
    upsert?: subjectsUpsertWithoutStudy_timetablesInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutStudy_timetablesInput, subjectsUpdateWithoutStudy_timetablesInput>, subjectsUncheckedUpdateWithoutStudy_timetablesInput>
  }

  export type usersCreateNestedOneWithoutScoresInput = {
    create?: XOR<usersCreateWithoutScoresInput, usersUncheckedCreateWithoutScoresInput>
    connectOrCreate?: usersCreateOrConnectWithoutScoresInput
    connect?: usersWhereUniqueInput
  }

  export type subjectsCreateNestedOneWithoutScoresInput = {
    create?: XOR<subjectsCreateWithoutScoresInput, subjectsUncheckedCreateWithoutScoresInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutScoresInput
    connect?: subjectsWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<usersCreateWithoutScoresInput, usersUncheckedCreateWithoutScoresInput>
    connectOrCreate?: usersCreateOrConnectWithoutScoresInput
    upsert?: usersUpsertWithoutScoresInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutScoresInput, usersUpdateWithoutScoresInput>, usersUncheckedUpdateWithoutScoresInput>
  }

  export type subjectsUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<subjectsCreateWithoutScoresInput, subjectsUncheckedCreateWithoutScoresInput>
    connectOrCreate?: subjectsCreateOrConnectWithoutScoresInput
    upsert?: subjectsUpsertWithoutScoresInput
    connect?: subjectsWhereUniqueInput
    update?: XOR<XOR<subjectsUpdateToOneWithWhereWithoutScoresInput, subjectsUpdateWithoutScoresInput>, subjectsUncheckedUpdateWithoutScoresInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type assignmentsCreateWithoutTeacherInput = {
    title: string
    description: string
    class: classesCreateNestedOneWithoutAssignmentsInput
    subject: subjectsCreateNestedOneWithoutAssignmentsInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsUncheckedCreateWithoutTeacherInput = {
    id?: number
    title: string
    description: string
    class_id: number
    subject_id: number
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsCreateOrConnectWithoutTeacherInput = {
    where: assignmentsWhereUniqueInput
    create: XOR<assignmentsCreateWithoutTeacherInput, assignmentsUncheckedCreateWithoutTeacherInput>
  }

  export type assignmentsCreateManyTeacherInputEnvelope = {
    data: assignmentsCreateManyTeacherInput | assignmentsCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type classesCreateWithoutTeacherInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutClassInput
    question_banks?: question_banksCreateNestedManyWithoutClassInput
    quizzes?: quizzesCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutClassInput
    students?: usersCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUncheckedCreateWithoutTeacherInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutClassInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutClassInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutClassInput
    students?: usersUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type classesCreateOrConnectWithoutTeacherInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutTeacherInput, classesUncheckedCreateWithoutTeacherInput>
  }

  export type classesCreateManyTeacherInputEnvelope = {
    data: classesCreateManyTeacherInput | classesCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type question_banksCreateWithoutTeacherInput = {
    questions?: questionsCreateNestedManyWithoutQuestion_bankInput
    class: classesCreateNestedOneWithoutQuestion_banksInput
    subject: subjectsCreateNestedOneWithoutQuestion_banksInput
    quizzes?: quizzesCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksUncheckedCreateWithoutTeacherInput = {
    id?: number
    subject_id: number
    class_id: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksCreateOrConnectWithoutTeacherInput = {
    where: question_banksWhereUniqueInput
    create: XOR<question_banksCreateWithoutTeacherInput, question_banksUncheckedCreateWithoutTeacherInput>
  }

  export type question_banksCreateManyTeacherInputEnvelope = {
    data: question_banksCreateManyTeacherInput | question_banksCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type scoresCreateWithoutStudentInput = {
    marks: number
    subject: subjectsCreateNestedOneWithoutScoresInput
  }

  export type scoresUncheckedCreateWithoutStudentInput = {
    id?: number
    subject_id: number
    marks: number
  }

  export type scoresCreateOrConnectWithoutStudentInput = {
    where: scoresWhereUniqueInput
    create: XOR<scoresCreateWithoutStudentInput, scoresUncheckedCreateWithoutStudentInput>
  }

  export type scoresCreateManyStudentInputEnvelope = {
    data: scoresCreateManyStudentInput | scoresCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type student_assignmentsCreateWithoutStudentInput = {
    assignment: assignmentsCreateNestedOneWithoutStudent_assignmentsInput
  }

  export type student_assignmentsUncheckedCreateWithoutStudentInput = {
    id?: number
    assignment_id: number
  }

  export type student_assignmentsCreateOrConnectWithoutStudentInput = {
    where: student_assignmentsWhereUniqueInput
    create: XOR<student_assignmentsCreateWithoutStudentInput, student_assignmentsUncheckedCreateWithoutStudentInput>
  }

  export type student_assignmentsCreateManyStudentInputEnvelope = {
    data: student_assignmentsCreateManyStudentInput | student_assignmentsCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type student_quizzesCreateWithoutStudentInput = {
    quiz: quizzesCreateNestedOneWithoutStudent_quizzesInput
  }

  export type student_quizzesUncheckedCreateWithoutStudentInput = {
    id?: number
    quiz_id: number
  }

  export type student_quizzesCreateOrConnectWithoutStudentInput = {
    where: student_quizzesWhereUniqueInput
    create: XOR<student_quizzesCreateWithoutStudentInput, student_quizzesUncheckedCreateWithoutStudentInput>
  }

  export type student_quizzesCreateManyStudentInputEnvelope = {
    data: student_quizzesCreateManyStudentInput | student_quizzesCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type study_timetablesCreateWithoutStudentInput = {
    subject: subjectsCreateNestedOneWithoutStudy_timetablesInput
  }

  export type study_timetablesUncheckedCreateWithoutStudentInput = {
    id?: number
    subject_id: number
  }

  export type study_timetablesCreateOrConnectWithoutStudentInput = {
    where: study_timetablesWhereUniqueInput
    create: XOR<study_timetablesCreateWithoutStudentInput, study_timetablesUncheckedCreateWithoutStudentInput>
  }

  export type study_timetablesCreateManyStudentInputEnvelope = {
    data: study_timetablesCreateManyStudentInput | study_timetablesCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type weekly_schedulesCreateWithoutTeacherInput = {
    class: classesCreateNestedOneWithoutWeekly_schedulesInput
    subject: subjectsCreateNestedOneWithoutWeekly_schedulesInput
  }

  export type weekly_schedulesUncheckedCreateWithoutTeacherInput = {
    id?: number
    class_id: number
    subject_id: number
  }

  export type weekly_schedulesCreateOrConnectWithoutTeacherInput = {
    where: weekly_schedulesWhereUniqueInput
    create: XOR<weekly_schedulesCreateWithoutTeacherInput, weekly_schedulesUncheckedCreateWithoutTeacherInput>
  }

  export type weekly_schedulesCreateManyTeacherInputEnvelope = {
    data: weekly_schedulesCreateManyTeacherInput | weekly_schedulesCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type classesCreateWithoutStudentsInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutClassInput
    teacher?: usersCreateNestedOneWithoutTeacher_classesInput
    question_banks?: question_banksCreateNestedManyWithoutClassInput
    quizzes?: quizzesCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutClassInput
  }

  export type classesUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutClassInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutClassInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutClassInput
  }

  export type classesCreateOrConnectWithoutStudentsInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutStudentsInput, classesUncheckedCreateWithoutStudentsInput>
  }

  export type assignmentsUpsertWithWhereUniqueWithoutTeacherInput = {
    where: assignmentsWhereUniqueInput
    update: XOR<assignmentsUpdateWithoutTeacherInput, assignmentsUncheckedUpdateWithoutTeacherInput>
    create: XOR<assignmentsCreateWithoutTeacherInput, assignmentsUncheckedCreateWithoutTeacherInput>
  }

  export type assignmentsUpdateWithWhereUniqueWithoutTeacherInput = {
    where: assignmentsWhereUniqueInput
    data: XOR<assignmentsUpdateWithoutTeacherInput, assignmentsUncheckedUpdateWithoutTeacherInput>
  }

  export type assignmentsUpdateManyWithWhereWithoutTeacherInput = {
    where: assignmentsScalarWhereInput
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyWithoutTeacherInput>
  }

  export type assignmentsScalarWhereInput = {
    AND?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
    OR?: assignmentsScalarWhereInput[]
    NOT?: assignmentsScalarWhereInput | assignmentsScalarWhereInput[]
    id?: IntFilter<"assignments"> | number
    title?: StringFilter<"assignments"> | string
    description?: StringFilter<"assignments"> | string
    teacher_id?: IntFilter<"assignments"> | number
    class_id?: IntFilter<"assignments"> | number
    subject_id?: IntFilter<"assignments"> | number
  }

  export type classesUpsertWithWhereUniqueWithoutTeacherInput = {
    where: classesWhereUniqueInput
    update: XOR<classesUpdateWithoutTeacherInput, classesUncheckedUpdateWithoutTeacherInput>
    create: XOR<classesCreateWithoutTeacherInput, classesUncheckedCreateWithoutTeacherInput>
  }

  export type classesUpdateWithWhereUniqueWithoutTeacherInput = {
    where: classesWhereUniqueInput
    data: XOR<classesUpdateWithoutTeacherInput, classesUncheckedUpdateWithoutTeacherInput>
  }

  export type classesUpdateManyWithWhereWithoutTeacherInput = {
    where: classesScalarWhereInput
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyWithoutTeacherInput>
  }

  export type classesScalarWhereInput = {
    AND?: classesScalarWhereInput | classesScalarWhereInput[]
    OR?: classesScalarWhereInput[]
    NOT?: classesScalarWhereInput | classesScalarWhereInput[]
    id?: IntFilter<"classes"> | number
    name?: StringFilter<"classes"> | string
    class_teacher_id?: IntNullableFilter<"classes"> | number | null
  }

  export type question_banksUpsertWithWhereUniqueWithoutTeacherInput = {
    where: question_banksWhereUniqueInput
    update: XOR<question_banksUpdateWithoutTeacherInput, question_banksUncheckedUpdateWithoutTeacherInput>
    create: XOR<question_banksCreateWithoutTeacherInput, question_banksUncheckedCreateWithoutTeacherInput>
  }

  export type question_banksUpdateWithWhereUniqueWithoutTeacherInput = {
    where: question_banksWhereUniqueInput
    data: XOR<question_banksUpdateWithoutTeacherInput, question_banksUncheckedUpdateWithoutTeacherInput>
  }

  export type question_banksUpdateManyWithWhereWithoutTeacherInput = {
    where: question_banksScalarWhereInput
    data: XOR<question_banksUpdateManyMutationInput, question_banksUncheckedUpdateManyWithoutTeacherInput>
  }

  export type question_banksScalarWhereInput = {
    AND?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
    OR?: question_banksScalarWhereInput[]
    NOT?: question_banksScalarWhereInput | question_banksScalarWhereInput[]
    id?: IntFilter<"question_banks"> | number
    teacher_id?: IntFilter<"question_banks"> | number
    subject_id?: IntFilter<"question_banks"> | number
    class_id?: IntFilter<"question_banks"> | number
  }

  export type scoresUpsertWithWhereUniqueWithoutStudentInput = {
    where: scoresWhereUniqueInput
    update: XOR<scoresUpdateWithoutStudentInput, scoresUncheckedUpdateWithoutStudentInput>
    create: XOR<scoresCreateWithoutStudentInput, scoresUncheckedCreateWithoutStudentInput>
  }

  export type scoresUpdateWithWhereUniqueWithoutStudentInput = {
    where: scoresWhereUniqueInput
    data: XOR<scoresUpdateWithoutStudentInput, scoresUncheckedUpdateWithoutStudentInput>
  }

  export type scoresUpdateManyWithWhereWithoutStudentInput = {
    where: scoresScalarWhereInput
    data: XOR<scoresUpdateManyMutationInput, scoresUncheckedUpdateManyWithoutStudentInput>
  }

  export type scoresScalarWhereInput = {
    AND?: scoresScalarWhereInput | scoresScalarWhereInput[]
    OR?: scoresScalarWhereInput[]
    NOT?: scoresScalarWhereInput | scoresScalarWhereInput[]
    id?: IntFilter<"scores"> | number
    student_id?: IntFilter<"scores"> | number
    subject_id?: IntFilter<"scores"> | number
    marks?: IntFilter<"scores"> | number
  }

  export type student_assignmentsUpsertWithWhereUniqueWithoutStudentInput = {
    where: student_assignmentsWhereUniqueInput
    update: XOR<student_assignmentsUpdateWithoutStudentInput, student_assignmentsUncheckedUpdateWithoutStudentInput>
    create: XOR<student_assignmentsCreateWithoutStudentInput, student_assignmentsUncheckedCreateWithoutStudentInput>
  }

  export type student_assignmentsUpdateWithWhereUniqueWithoutStudentInput = {
    where: student_assignmentsWhereUniqueInput
    data: XOR<student_assignmentsUpdateWithoutStudentInput, student_assignmentsUncheckedUpdateWithoutStudentInput>
  }

  export type student_assignmentsUpdateManyWithWhereWithoutStudentInput = {
    where: student_assignmentsScalarWhereInput
    data: XOR<student_assignmentsUpdateManyMutationInput, student_assignmentsUncheckedUpdateManyWithoutStudentInput>
  }

  export type student_assignmentsScalarWhereInput = {
    AND?: student_assignmentsScalarWhereInput | student_assignmentsScalarWhereInput[]
    OR?: student_assignmentsScalarWhereInput[]
    NOT?: student_assignmentsScalarWhereInput | student_assignmentsScalarWhereInput[]
    id?: IntFilter<"student_assignments"> | number
    assignment_id?: IntFilter<"student_assignments"> | number
    student_id?: IntFilter<"student_assignments"> | number
  }

  export type student_quizzesUpsertWithWhereUniqueWithoutStudentInput = {
    where: student_quizzesWhereUniqueInput
    update: XOR<student_quizzesUpdateWithoutStudentInput, student_quizzesUncheckedUpdateWithoutStudentInput>
    create: XOR<student_quizzesCreateWithoutStudentInput, student_quizzesUncheckedCreateWithoutStudentInput>
  }

  export type student_quizzesUpdateWithWhereUniqueWithoutStudentInput = {
    where: student_quizzesWhereUniqueInput
    data: XOR<student_quizzesUpdateWithoutStudentInput, student_quizzesUncheckedUpdateWithoutStudentInput>
  }

  export type student_quizzesUpdateManyWithWhereWithoutStudentInput = {
    where: student_quizzesScalarWhereInput
    data: XOR<student_quizzesUpdateManyMutationInput, student_quizzesUncheckedUpdateManyWithoutStudentInput>
  }

  export type student_quizzesScalarWhereInput = {
    AND?: student_quizzesScalarWhereInput | student_quizzesScalarWhereInput[]
    OR?: student_quizzesScalarWhereInput[]
    NOT?: student_quizzesScalarWhereInput | student_quizzesScalarWhereInput[]
    id?: IntFilter<"student_quizzes"> | number
    student_id?: IntFilter<"student_quizzes"> | number
    quiz_id?: IntFilter<"student_quizzes"> | number
  }

  export type study_timetablesUpsertWithWhereUniqueWithoutStudentInput = {
    where: study_timetablesWhereUniqueInput
    update: XOR<study_timetablesUpdateWithoutStudentInput, study_timetablesUncheckedUpdateWithoutStudentInput>
    create: XOR<study_timetablesCreateWithoutStudentInput, study_timetablesUncheckedCreateWithoutStudentInput>
  }

  export type study_timetablesUpdateWithWhereUniqueWithoutStudentInput = {
    where: study_timetablesWhereUniqueInput
    data: XOR<study_timetablesUpdateWithoutStudentInput, study_timetablesUncheckedUpdateWithoutStudentInput>
  }

  export type study_timetablesUpdateManyWithWhereWithoutStudentInput = {
    where: study_timetablesScalarWhereInput
    data: XOR<study_timetablesUpdateManyMutationInput, study_timetablesUncheckedUpdateManyWithoutStudentInput>
  }

  export type study_timetablesScalarWhereInput = {
    AND?: study_timetablesScalarWhereInput | study_timetablesScalarWhereInput[]
    OR?: study_timetablesScalarWhereInput[]
    NOT?: study_timetablesScalarWhereInput | study_timetablesScalarWhereInput[]
    id?: IntFilter<"study_timetables"> | number
    student_id?: IntFilter<"study_timetables"> | number
    subject_id?: IntFilter<"study_timetables"> | number
  }

  export type weekly_schedulesUpsertWithWhereUniqueWithoutTeacherInput = {
    where: weekly_schedulesWhereUniqueInput
    update: XOR<weekly_schedulesUpdateWithoutTeacherInput, weekly_schedulesUncheckedUpdateWithoutTeacherInput>
    create: XOR<weekly_schedulesCreateWithoutTeacherInput, weekly_schedulesUncheckedCreateWithoutTeacherInput>
  }

  export type weekly_schedulesUpdateWithWhereUniqueWithoutTeacherInput = {
    where: weekly_schedulesWhereUniqueInput
    data: XOR<weekly_schedulesUpdateWithoutTeacherInput, weekly_schedulesUncheckedUpdateWithoutTeacherInput>
  }

  export type weekly_schedulesUpdateManyWithWhereWithoutTeacherInput = {
    where: weekly_schedulesScalarWhereInput
    data: XOR<weekly_schedulesUpdateManyMutationInput, weekly_schedulesUncheckedUpdateManyWithoutTeacherInput>
  }

  export type weekly_schedulesScalarWhereInput = {
    AND?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
    OR?: weekly_schedulesScalarWhereInput[]
    NOT?: weekly_schedulesScalarWhereInput | weekly_schedulesScalarWhereInput[]
    id?: IntFilter<"weekly_schedules"> | number
    class_id?: IntFilter<"weekly_schedules"> | number
    teacher_id?: IntFilter<"weekly_schedules"> | number
    subject_id?: IntFilter<"weekly_schedules"> | number
  }

  export type classesUpsertWithWhereUniqueWithoutStudentsInput = {
    where: classesWhereUniqueInput
    update: XOR<classesUpdateWithoutStudentsInput, classesUncheckedUpdateWithoutStudentsInput>
    create: XOR<classesCreateWithoutStudentsInput, classesUncheckedCreateWithoutStudentsInput>
  }

  export type classesUpdateWithWhereUniqueWithoutStudentsInput = {
    where: classesWhereUniqueInput
    data: XOR<classesUpdateWithoutStudentsInput, classesUncheckedUpdateWithoutStudentsInput>
  }

  export type classesUpdateManyWithWhereWithoutStudentsInput = {
    where: classesScalarWhereInput
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyWithoutStudentsInput>
  }

  export type assignmentsCreateWithoutClassInput = {
    title: string
    description: string
    subject: subjectsCreateNestedOneWithoutAssignmentsInput
    teacher: usersCreateNestedOneWithoutAssignmentsInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    subject_id: number
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsCreateOrConnectWithoutClassInput = {
    where: assignmentsWhereUniqueInput
    create: XOR<assignmentsCreateWithoutClassInput, assignmentsUncheckedCreateWithoutClassInput>
  }

  export type assignmentsCreateManyClassInputEnvelope = {
    data: assignmentsCreateManyClassInput | assignmentsCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutTeacher_classesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutTeacher_classesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutTeacher_classesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTeacher_classesInput, usersUncheckedCreateWithoutTeacher_classesInput>
  }

  export type question_banksCreateWithoutClassInput = {
    questions?: questionsCreateNestedManyWithoutQuestion_bankInput
    subject: subjectsCreateNestedOneWithoutQuestion_banksInput
    teacher: usersCreateNestedOneWithoutQuestion_banksInput
    quizzes?: quizzesCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksUncheckedCreateWithoutClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksCreateOrConnectWithoutClassInput = {
    where: question_banksWhereUniqueInput
    create: XOR<question_banksCreateWithoutClassInput, question_banksUncheckedCreateWithoutClassInput>
  }

  export type question_banksCreateManyClassInputEnvelope = {
    data: question_banksCreateManyClassInput | question_banksCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type quizzesCreateWithoutClassInput = {
    question_bank: question_banksCreateNestedOneWithoutQuizzesInput
    subject: subjectsCreateNestedOneWithoutQuizzesInput
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutQuizInput
  }

  export type quizzesUncheckedCreateWithoutClassInput = {
    id?: number
    subject_id: number
    question_bank_id: number
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizzesCreateOrConnectWithoutClassInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutClassInput, quizzesUncheckedCreateWithoutClassInput>
  }

  export type quizzesCreateManyClassInputEnvelope = {
    data: quizzesCreateManyClassInput | quizzesCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type weekly_schedulesCreateWithoutClassInput = {
    subject: subjectsCreateNestedOneWithoutWeekly_schedulesInput
    teacher: usersCreateNestedOneWithoutWeekly_schedulesInput
  }

  export type weekly_schedulesUncheckedCreateWithoutClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
  }

  export type weekly_schedulesCreateOrConnectWithoutClassInput = {
    where: weekly_schedulesWhereUniqueInput
    create: XOR<weekly_schedulesCreateWithoutClassInput, weekly_schedulesUncheckedCreateWithoutClassInput>
  }

  export type weekly_schedulesCreateManyClassInputEnvelope = {
    data: weekly_schedulesCreateManyClassInput | weekly_schedulesCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutStudent_classesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
  }

  export type usersUncheckedCreateWithoutStudent_classesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type usersCreateOrConnectWithoutStudent_classesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStudent_classesInput, usersUncheckedCreateWithoutStudent_classesInput>
  }

  export type assignmentsUpsertWithWhereUniqueWithoutClassInput = {
    where: assignmentsWhereUniqueInput
    update: XOR<assignmentsUpdateWithoutClassInput, assignmentsUncheckedUpdateWithoutClassInput>
    create: XOR<assignmentsCreateWithoutClassInput, assignmentsUncheckedCreateWithoutClassInput>
  }

  export type assignmentsUpdateWithWhereUniqueWithoutClassInput = {
    where: assignmentsWhereUniqueInput
    data: XOR<assignmentsUpdateWithoutClassInput, assignmentsUncheckedUpdateWithoutClassInput>
  }

  export type assignmentsUpdateManyWithWhereWithoutClassInput = {
    where: assignmentsScalarWhereInput
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyWithoutClassInput>
  }

  export type usersUpsertWithoutTeacher_classesInput = {
    update: XOR<usersUpdateWithoutTeacher_classesInput, usersUncheckedUpdateWithoutTeacher_classesInput>
    create: XOR<usersCreateWithoutTeacher_classesInput, usersUncheckedCreateWithoutTeacher_classesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTeacher_classesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTeacher_classesInput, usersUncheckedUpdateWithoutTeacher_classesInput>
  }

  export type usersUpdateWithoutTeacher_classesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutTeacher_classesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type question_banksUpsertWithWhereUniqueWithoutClassInput = {
    where: question_banksWhereUniqueInput
    update: XOR<question_banksUpdateWithoutClassInput, question_banksUncheckedUpdateWithoutClassInput>
    create: XOR<question_banksCreateWithoutClassInput, question_banksUncheckedCreateWithoutClassInput>
  }

  export type question_banksUpdateWithWhereUniqueWithoutClassInput = {
    where: question_banksWhereUniqueInput
    data: XOR<question_banksUpdateWithoutClassInput, question_banksUncheckedUpdateWithoutClassInput>
  }

  export type question_banksUpdateManyWithWhereWithoutClassInput = {
    where: question_banksScalarWhereInput
    data: XOR<question_banksUpdateManyMutationInput, question_banksUncheckedUpdateManyWithoutClassInput>
  }

  export type quizzesUpsertWithWhereUniqueWithoutClassInput = {
    where: quizzesWhereUniqueInput
    update: XOR<quizzesUpdateWithoutClassInput, quizzesUncheckedUpdateWithoutClassInput>
    create: XOR<quizzesCreateWithoutClassInput, quizzesUncheckedCreateWithoutClassInput>
  }

  export type quizzesUpdateWithWhereUniqueWithoutClassInput = {
    where: quizzesWhereUniqueInput
    data: XOR<quizzesUpdateWithoutClassInput, quizzesUncheckedUpdateWithoutClassInput>
  }

  export type quizzesUpdateManyWithWhereWithoutClassInput = {
    where: quizzesScalarWhereInput
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyWithoutClassInput>
  }

  export type quizzesScalarWhereInput = {
    AND?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
    OR?: quizzesScalarWhereInput[]
    NOT?: quizzesScalarWhereInput | quizzesScalarWhereInput[]
    id?: IntFilter<"quizzes"> | number
    class_id?: IntFilter<"quizzes"> | number
    subject_id?: IntFilter<"quizzes"> | number
    question_bank_id?: IntFilter<"quizzes"> | number
  }

  export type weekly_schedulesUpsertWithWhereUniqueWithoutClassInput = {
    where: weekly_schedulesWhereUniqueInput
    update: XOR<weekly_schedulesUpdateWithoutClassInput, weekly_schedulesUncheckedUpdateWithoutClassInput>
    create: XOR<weekly_schedulesCreateWithoutClassInput, weekly_schedulesUncheckedCreateWithoutClassInput>
  }

  export type weekly_schedulesUpdateWithWhereUniqueWithoutClassInput = {
    where: weekly_schedulesWhereUniqueInput
    data: XOR<weekly_schedulesUpdateWithoutClassInput, weekly_schedulesUncheckedUpdateWithoutClassInput>
  }

  export type weekly_schedulesUpdateManyWithWhereWithoutClassInput = {
    where: weekly_schedulesScalarWhereInput
    data: XOR<weekly_schedulesUpdateManyMutationInput, weekly_schedulesUncheckedUpdateManyWithoutClassInput>
  }

  export type usersUpsertWithWhereUniqueWithoutStudent_classesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutStudent_classesInput, usersUncheckedUpdateWithoutStudent_classesInput>
    create: XOR<usersCreateWithoutStudent_classesInput, usersUncheckedCreateWithoutStudent_classesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutStudent_classesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutStudent_classesInput, usersUncheckedUpdateWithoutStudent_classesInput>
  }

  export type usersUpdateManyWithWhereWithoutStudent_classesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutStudent_classesInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: IntFilter<"users"> | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    roll_no?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
  }

  export type assignmentsCreateWithoutSubjectInput = {
    title: string
    description: string
    class: classesCreateNestedOneWithoutAssignmentsInput
    teacher: usersCreateNestedOneWithoutAssignmentsInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsUncheckedCreateWithoutSubjectInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type assignmentsCreateOrConnectWithoutSubjectInput = {
    where: assignmentsWhereUniqueInput
    create: XOR<assignmentsCreateWithoutSubjectInput, assignmentsUncheckedCreateWithoutSubjectInput>
  }

  export type assignmentsCreateManySubjectInputEnvelope = {
    data: assignmentsCreateManySubjectInput | assignmentsCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type question_banksCreateWithoutSubjectInput = {
    questions?: questionsCreateNestedManyWithoutQuestion_bankInput
    class: classesCreateNestedOneWithoutQuestion_banksInput
    teacher: usersCreateNestedOneWithoutQuestion_banksInput
    quizzes?: quizzesCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksUncheckedCreateWithoutSubjectInput = {
    id?: number
    teacher_id: number
    class_id: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksCreateOrConnectWithoutSubjectInput = {
    where: question_banksWhereUniqueInput
    create: XOR<question_banksCreateWithoutSubjectInput, question_banksUncheckedCreateWithoutSubjectInput>
  }

  export type question_banksCreateManySubjectInputEnvelope = {
    data: question_banksCreateManySubjectInput | question_banksCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type quizzesCreateWithoutSubjectInput = {
    class: classesCreateNestedOneWithoutQuizzesInput
    question_bank: question_banksCreateNestedOneWithoutQuizzesInput
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutQuizInput
  }

  export type quizzesUncheckedCreateWithoutSubjectInput = {
    id?: number
    class_id: number
    question_bank_id: number
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizzesCreateOrConnectWithoutSubjectInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutSubjectInput, quizzesUncheckedCreateWithoutSubjectInput>
  }

  export type quizzesCreateManySubjectInputEnvelope = {
    data: quizzesCreateManySubjectInput | quizzesCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type scoresCreateWithoutSubjectInput = {
    marks: number
    student: usersCreateNestedOneWithoutScoresInput
  }

  export type scoresUncheckedCreateWithoutSubjectInput = {
    id?: number
    student_id: number
    marks: number
  }

  export type scoresCreateOrConnectWithoutSubjectInput = {
    where: scoresWhereUniqueInput
    create: XOR<scoresCreateWithoutSubjectInput, scoresUncheckedCreateWithoutSubjectInput>
  }

  export type scoresCreateManySubjectInputEnvelope = {
    data: scoresCreateManySubjectInput | scoresCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type study_timetablesCreateWithoutSubjectInput = {
    student: usersCreateNestedOneWithoutStudy_timetablesInput
  }

  export type study_timetablesUncheckedCreateWithoutSubjectInput = {
    id?: number
    student_id: number
  }

  export type study_timetablesCreateOrConnectWithoutSubjectInput = {
    where: study_timetablesWhereUniqueInput
    create: XOR<study_timetablesCreateWithoutSubjectInput, study_timetablesUncheckedCreateWithoutSubjectInput>
  }

  export type study_timetablesCreateManySubjectInputEnvelope = {
    data: study_timetablesCreateManySubjectInput | study_timetablesCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type weekly_schedulesCreateWithoutSubjectInput = {
    class: classesCreateNestedOneWithoutWeekly_schedulesInput
    teacher: usersCreateNestedOneWithoutWeekly_schedulesInput
  }

  export type weekly_schedulesUncheckedCreateWithoutSubjectInput = {
    id?: number
    class_id: number
    teacher_id: number
  }

  export type weekly_schedulesCreateOrConnectWithoutSubjectInput = {
    where: weekly_schedulesWhereUniqueInput
    create: XOR<weekly_schedulesCreateWithoutSubjectInput, weekly_schedulesUncheckedCreateWithoutSubjectInput>
  }

  export type weekly_schedulesCreateManySubjectInputEnvelope = {
    data: weekly_schedulesCreateManySubjectInput | weekly_schedulesCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type assignmentsUpsertWithWhereUniqueWithoutSubjectInput = {
    where: assignmentsWhereUniqueInput
    update: XOR<assignmentsUpdateWithoutSubjectInput, assignmentsUncheckedUpdateWithoutSubjectInput>
    create: XOR<assignmentsCreateWithoutSubjectInput, assignmentsUncheckedCreateWithoutSubjectInput>
  }

  export type assignmentsUpdateWithWhereUniqueWithoutSubjectInput = {
    where: assignmentsWhereUniqueInput
    data: XOR<assignmentsUpdateWithoutSubjectInput, assignmentsUncheckedUpdateWithoutSubjectInput>
  }

  export type assignmentsUpdateManyWithWhereWithoutSubjectInput = {
    where: assignmentsScalarWhereInput
    data: XOR<assignmentsUpdateManyMutationInput, assignmentsUncheckedUpdateManyWithoutSubjectInput>
  }

  export type question_banksUpsertWithWhereUniqueWithoutSubjectInput = {
    where: question_banksWhereUniqueInput
    update: XOR<question_banksUpdateWithoutSubjectInput, question_banksUncheckedUpdateWithoutSubjectInput>
    create: XOR<question_banksCreateWithoutSubjectInput, question_banksUncheckedCreateWithoutSubjectInput>
  }

  export type question_banksUpdateWithWhereUniqueWithoutSubjectInput = {
    where: question_banksWhereUniqueInput
    data: XOR<question_banksUpdateWithoutSubjectInput, question_banksUncheckedUpdateWithoutSubjectInput>
  }

  export type question_banksUpdateManyWithWhereWithoutSubjectInput = {
    where: question_banksScalarWhereInput
    data: XOR<question_banksUpdateManyMutationInput, question_banksUncheckedUpdateManyWithoutSubjectInput>
  }

  export type quizzesUpsertWithWhereUniqueWithoutSubjectInput = {
    where: quizzesWhereUniqueInput
    update: XOR<quizzesUpdateWithoutSubjectInput, quizzesUncheckedUpdateWithoutSubjectInput>
    create: XOR<quizzesCreateWithoutSubjectInput, quizzesUncheckedCreateWithoutSubjectInput>
  }

  export type quizzesUpdateWithWhereUniqueWithoutSubjectInput = {
    where: quizzesWhereUniqueInput
    data: XOR<quizzesUpdateWithoutSubjectInput, quizzesUncheckedUpdateWithoutSubjectInput>
  }

  export type quizzesUpdateManyWithWhereWithoutSubjectInput = {
    where: quizzesScalarWhereInput
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyWithoutSubjectInput>
  }

  export type scoresUpsertWithWhereUniqueWithoutSubjectInput = {
    where: scoresWhereUniqueInput
    update: XOR<scoresUpdateWithoutSubjectInput, scoresUncheckedUpdateWithoutSubjectInput>
    create: XOR<scoresCreateWithoutSubjectInput, scoresUncheckedCreateWithoutSubjectInput>
  }

  export type scoresUpdateWithWhereUniqueWithoutSubjectInput = {
    where: scoresWhereUniqueInput
    data: XOR<scoresUpdateWithoutSubjectInput, scoresUncheckedUpdateWithoutSubjectInput>
  }

  export type scoresUpdateManyWithWhereWithoutSubjectInput = {
    where: scoresScalarWhereInput
    data: XOR<scoresUpdateManyMutationInput, scoresUncheckedUpdateManyWithoutSubjectInput>
  }

  export type study_timetablesUpsertWithWhereUniqueWithoutSubjectInput = {
    where: study_timetablesWhereUniqueInput
    update: XOR<study_timetablesUpdateWithoutSubjectInput, study_timetablesUncheckedUpdateWithoutSubjectInput>
    create: XOR<study_timetablesCreateWithoutSubjectInput, study_timetablesUncheckedCreateWithoutSubjectInput>
  }

  export type study_timetablesUpdateWithWhereUniqueWithoutSubjectInput = {
    where: study_timetablesWhereUniqueInput
    data: XOR<study_timetablesUpdateWithoutSubjectInput, study_timetablesUncheckedUpdateWithoutSubjectInput>
  }

  export type study_timetablesUpdateManyWithWhereWithoutSubjectInput = {
    where: study_timetablesScalarWhereInput
    data: XOR<study_timetablesUpdateManyMutationInput, study_timetablesUncheckedUpdateManyWithoutSubjectInput>
  }

  export type weekly_schedulesUpsertWithWhereUniqueWithoutSubjectInput = {
    where: weekly_schedulesWhereUniqueInput
    update: XOR<weekly_schedulesUpdateWithoutSubjectInput, weekly_schedulesUncheckedUpdateWithoutSubjectInput>
    create: XOR<weekly_schedulesCreateWithoutSubjectInput, weekly_schedulesUncheckedCreateWithoutSubjectInput>
  }

  export type weekly_schedulesUpdateWithWhereUniqueWithoutSubjectInput = {
    where: weekly_schedulesWhereUniqueInput
    data: XOR<weekly_schedulesUpdateWithoutSubjectInput, weekly_schedulesUncheckedUpdateWithoutSubjectInput>
  }

  export type weekly_schedulesUpdateManyWithWhereWithoutSubjectInput = {
    where: weekly_schedulesScalarWhereInput
    data: XOR<weekly_schedulesUpdateManyMutationInput, weekly_schedulesUncheckedUpdateManyWithoutSubjectInput>
  }

  export type questionsCreateWithoutQuestion_bankInput = {
    content: string
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuestionInput
  }

  export type questionsUncheckedCreateWithoutQuestion_bankInput = {
    id?: number
    content: string
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type questionsCreateOrConnectWithoutQuestion_bankInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuestion_bankInput, questionsUncheckedCreateWithoutQuestion_bankInput>
  }

  export type questionsCreateManyQuestion_bankInputEnvelope = {
    data: questionsCreateManyQuestion_bankInput | questionsCreateManyQuestion_bankInput[]
    skipDuplicates?: boolean
  }

  export type classesCreateWithoutQuestion_banksInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutClassInput
    teacher?: usersCreateNestedOneWithoutTeacher_classesInput
    quizzes?: quizzesCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutClassInput
    students?: usersCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUncheckedCreateWithoutQuestion_banksInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutClassInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutClassInput
    students?: usersUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type classesCreateOrConnectWithoutQuestion_banksInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutQuestion_banksInput, classesUncheckedCreateWithoutQuestion_banksInput>
  }

  export type subjectsCreateWithoutQuestion_banksInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesCreateNestedManyWithoutSubjectInput
    scores?: scoresCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateWithoutQuestion_banksInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutSubjectInput
    scores?: scoresUncheckedCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsCreateOrConnectWithoutQuestion_banksInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutQuestion_banksInput, subjectsUncheckedCreateWithoutQuestion_banksInput>
  }

  export type usersCreateWithoutQuestion_banksInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutQuestion_banksInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutQuestion_banksInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutQuestion_banksInput, usersUncheckedCreateWithoutQuestion_banksInput>
  }

  export type quizzesCreateWithoutQuestion_bankInput = {
    class: classesCreateNestedOneWithoutQuizzesInput
    subject: subjectsCreateNestedOneWithoutQuizzesInput
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutQuizInput
  }

  export type quizzesUncheckedCreateWithoutQuestion_bankInput = {
    id?: number
    class_id: number
    subject_id: number
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuizInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizzesCreateOrConnectWithoutQuestion_bankInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutQuestion_bankInput, quizzesUncheckedCreateWithoutQuestion_bankInput>
  }

  export type quizzesCreateManyQuestion_bankInputEnvelope = {
    data: quizzesCreateManyQuestion_bankInput | quizzesCreateManyQuestion_bankInput[]
    skipDuplicates?: boolean
  }

  export type questionsUpsertWithWhereUniqueWithoutQuestion_bankInput = {
    where: questionsWhereUniqueInput
    update: XOR<questionsUpdateWithoutQuestion_bankInput, questionsUncheckedUpdateWithoutQuestion_bankInput>
    create: XOR<questionsCreateWithoutQuestion_bankInput, questionsUncheckedCreateWithoutQuestion_bankInput>
  }

  export type questionsUpdateWithWhereUniqueWithoutQuestion_bankInput = {
    where: questionsWhereUniqueInput
    data: XOR<questionsUpdateWithoutQuestion_bankInput, questionsUncheckedUpdateWithoutQuestion_bankInput>
  }

  export type questionsUpdateManyWithWhereWithoutQuestion_bankInput = {
    where: questionsScalarWhereInput
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyWithoutQuestion_bankInput>
  }

  export type questionsScalarWhereInput = {
    AND?: questionsScalarWhereInput | questionsScalarWhereInput[]
    OR?: questionsScalarWhereInput[]
    NOT?: questionsScalarWhereInput | questionsScalarWhereInput[]
    id?: IntFilter<"questions"> | number
    content?: StringFilter<"questions"> | string
    question_bank_id?: IntFilter<"questions"> | number
  }

  export type classesUpsertWithoutQuestion_banksInput = {
    update: XOR<classesUpdateWithoutQuestion_banksInput, classesUncheckedUpdateWithoutQuestion_banksInput>
    create: XOR<classesCreateWithoutQuestion_banksInput, classesUncheckedCreateWithoutQuestion_banksInput>
    where?: classesWhereInput
  }

  export type classesUpdateToOneWithWhereWithoutQuestion_banksInput = {
    where?: classesWhereInput
    data: XOR<classesUpdateWithoutQuestion_banksInput, classesUncheckedUpdateWithoutQuestion_banksInput>
  }

  export type classesUpdateWithoutQuestion_banksInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutClassNestedInput
    teacher?: usersUpdateOneWithoutTeacher_classesNestedInput
    quizzes?: quizzesUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutClassNestedInput
    students?: usersUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateWithoutQuestion_banksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: assignmentsUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput
    students?: usersUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type subjectsUpsertWithoutQuestion_banksInput = {
    update: XOR<subjectsUpdateWithoutQuestion_banksInput, subjectsUncheckedUpdateWithoutQuestion_banksInput>
    create: XOR<subjectsCreateWithoutQuestion_banksInput, subjectsUncheckedCreateWithoutQuestion_banksInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutQuestion_banksInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutQuestion_banksInput, subjectsUncheckedUpdateWithoutQuestion_banksInput>
  }

  export type subjectsUpdateWithoutQuestion_banksInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUpdateManyWithoutSubjectNestedInput
    scores?: scoresUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateWithoutQuestion_banksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: scoresUncheckedUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type usersUpsertWithoutQuestion_banksInput = {
    update: XOR<usersUpdateWithoutQuestion_banksInput, usersUncheckedUpdateWithoutQuestion_banksInput>
    create: XOR<usersCreateWithoutQuestion_banksInput, usersUncheckedCreateWithoutQuestion_banksInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutQuestion_banksInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutQuestion_banksInput, usersUncheckedUpdateWithoutQuestion_banksInput>
  }

  export type usersUpdateWithoutQuestion_banksInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutQuestion_banksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type quizzesUpsertWithWhereUniqueWithoutQuestion_bankInput = {
    where: quizzesWhereUniqueInput
    update: XOR<quizzesUpdateWithoutQuestion_bankInput, quizzesUncheckedUpdateWithoutQuestion_bankInput>
    create: XOR<quizzesCreateWithoutQuestion_bankInput, quizzesUncheckedCreateWithoutQuestion_bankInput>
  }

  export type quizzesUpdateWithWhereUniqueWithoutQuestion_bankInput = {
    where: quizzesWhereUniqueInput
    data: XOR<quizzesUpdateWithoutQuestion_bankInput, quizzesUncheckedUpdateWithoutQuestion_bankInput>
  }

  export type quizzesUpdateManyWithWhereWithoutQuestion_bankInput = {
    where: quizzesScalarWhereInput
    data: XOR<quizzesUpdateManyMutationInput, quizzesUncheckedUpdateManyWithoutQuestion_bankInput>
  }

  export type question_banksCreateWithoutQuestionsInput = {
    class: classesCreateNestedOneWithoutQuestion_banksInput
    subject: subjectsCreateNestedOneWithoutQuestion_banksInput
    teacher: usersCreateNestedOneWithoutQuestion_banksInput
    quizzes?: quizzesCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksUncheckedCreateWithoutQuestionsInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
    quizzes?: quizzesUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksCreateOrConnectWithoutQuestionsInput = {
    where: question_banksWhereUniqueInput
    create: XOR<question_banksCreateWithoutQuestionsInput, question_banksUncheckedCreateWithoutQuestionsInput>
  }

  export type quiz_questionsCreateWithoutQuestionInput = {
    quiz: quizzesCreateNestedOneWithoutQuiz_questionsInput
  }

  export type quiz_questionsUncheckedCreateWithoutQuestionInput = {
    id?: number
    quiz_id: number
  }

  export type quiz_questionsCreateOrConnectWithoutQuestionInput = {
    where: quiz_questionsWhereUniqueInput
    create: XOR<quiz_questionsCreateWithoutQuestionInput, quiz_questionsUncheckedCreateWithoutQuestionInput>
  }

  export type quiz_questionsCreateManyQuestionInputEnvelope = {
    data: quiz_questionsCreateManyQuestionInput | quiz_questionsCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type question_banksUpsertWithoutQuestionsInput = {
    update: XOR<question_banksUpdateWithoutQuestionsInput, question_banksUncheckedUpdateWithoutQuestionsInput>
    create: XOR<question_banksCreateWithoutQuestionsInput, question_banksUncheckedCreateWithoutQuestionsInput>
    where?: question_banksWhereInput
  }

  export type question_banksUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: question_banksWhereInput
    data: XOR<question_banksUpdateWithoutQuestionsInput, question_banksUncheckedUpdateWithoutQuestionsInput>
  }

  export type question_banksUpdateWithoutQuestionsInput = {
    class?: classesUpdateOneRequiredWithoutQuestion_banksNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuestion_banksNestedInput
    teacher?: usersUpdateOneRequiredWithoutQuestion_banksNestedInput
    quizzes?: quizzesUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    quizzes?: quizzesUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type quiz_questionsUpsertWithWhereUniqueWithoutQuestionInput = {
    where: quiz_questionsWhereUniqueInput
    update: XOR<quiz_questionsUpdateWithoutQuestionInput, quiz_questionsUncheckedUpdateWithoutQuestionInput>
    create: XOR<quiz_questionsCreateWithoutQuestionInput, quiz_questionsUncheckedCreateWithoutQuestionInput>
  }

  export type quiz_questionsUpdateWithWhereUniqueWithoutQuestionInput = {
    where: quiz_questionsWhereUniqueInput
    data: XOR<quiz_questionsUpdateWithoutQuestionInput, quiz_questionsUncheckedUpdateWithoutQuestionInput>
  }

  export type quiz_questionsUpdateManyWithWhereWithoutQuestionInput = {
    where: quiz_questionsScalarWhereInput
    data: XOR<quiz_questionsUpdateManyMutationInput, quiz_questionsUncheckedUpdateManyWithoutQuestionInput>
  }

  export type quiz_questionsScalarWhereInput = {
    AND?: quiz_questionsScalarWhereInput | quiz_questionsScalarWhereInput[]
    OR?: quiz_questionsScalarWhereInput[]
    NOT?: quiz_questionsScalarWhereInput | quiz_questionsScalarWhereInput[]
    id?: IntFilter<"quiz_questions"> | number
    quiz_id?: IntFilter<"quiz_questions"> | number
    question_id?: IntFilter<"quiz_questions"> | number
  }

  export type classesCreateWithoutQuizzesInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutClassInput
    teacher?: usersCreateNestedOneWithoutTeacher_classesInput
    question_banks?: question_banksCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutClassInput
    students?: usersCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUncheckedCreateWithoutQuizzesInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutClassInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutClassInput
    students?: usersUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type classesCreateOrConnectWithoutQuizzesInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutQuizzesInput, classesUncheckedCreateWithoutQuizzesInput>
  }

  export type question_banksCreateWithoutQuizzesInput = {
    questions?: questionsCreateNestedManyWithoutQuestion_bankInput
    class: classesCreateNestedOneWithoutQuestion_banksInput
    subject: subjectsCreateNestedOneWithoutQuestion_banksInput
    teacher: usersCreateNestedOneWithoutQuestion_banksInput
  }

  export type question_banksUncheckedCreateWithoutQuizzesInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
    questions?: questionsUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type question_banksCreateOrConnectWithoutQuizzesInput = {
    where: question_banksWhereUniqueInput
    create: XOR<question_banksCreateWithoutQuizzesInput, question_banksUncheckedCreateWithoutQuizzesInput>
  }

  export type subjectsCreateWithoutQuizzesInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksCreateNestedManyWithoutSubjectInput
    scores?: scoresCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateWithoutQuizzesInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutSubjectInput
    scores?: scoresUncheckedCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsCreateOrConnectWithoutQuizzesInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutQuizzesInput, subjectsUncheckedCreateWithoutQuizzesInput>
  }

  export type quiz_questionsCreateWithoutQuizInput = {
    question: questionsCreateNestedOneWithoutQuiz_questionsInput
  }

  export type quiz_questionsUncheckedCreateWithoutQuizInput = {
    id?: number
    question_id: number
  }

  export type quiz_questionsCreateOrConnectWithoutQuizInput = {
    where: quiz_questionsWhereUniqueInput
    create: XOR<quiz_questionsCreateWithoutQuizInput, quiz_questionsUncheckedCreateWithoutQuizInput>
  }

  export type quiz_questionsCreateManyQuizInputEnvelope = {
    data: quiz_questionsCreateManyQuizInput | quiz_questionsCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type student_quizzesCreateWithoutQuizInput = {
    student: usersCreateNestedOneWithoutStudent_quizzesInput
  }

  export type student_quizzesUncheckedCreateWithoutQuizInput = {
    id?: number
    student_id: number
  }

  export type student_quizzesCreateOrConnectWithoutQuizInput = {
    where: student_quizzesWhereUniqueInput
    create: XOR<student_quizzesCreateWithoutQuizInput, student_quizzesUncheckedCreateWithoutQuizInput>
  }

  export type student_quizzesCreateManyQuizInputEnvelope = {
    data: student_quizzesCreateManyQuizInput | student_quizzesCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type classesUpsertWithoutQuizzesInput = {
    update: XOR<classesUpdateWithoutQuizzesInput, classesUncheckedUpdateWithoutQuizzesInput>
    create: XOR<classesCreateWithoutQuizzesInput, classesUncheckedCreateWithoutQuizzesInput>
    where?: classesWhereInput
  }

  export type classesUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: classesWhereInput
    data: XOR<classesUpdateWithoutQuizzesInput, classesUncheckedUpdateWithoutQuizzesInput>
  }

  export type classesUpdateWithoutQuizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutClassNestedInput
    teacher?: usersUpdateOneWithoutTeacher_classesNestedInput
    question_banks?: question_banksUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutClassNestedInput
    students?: usersUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: assignmentsUncheckedUpdateManyWithoutClassNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput
    students?: usersUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type question_banksUpsertWithoutQuizzesInput = {
    update: XOR<question_banksUpdateWithoutQuizzesInput, question_banksUncheckedUpdateWithoutQuizzesInput>
    create: XOR<question_banksCreateWithoutQuizzesInput, question_banksUncheckedCreateWithoutQuizzesInput>
    where?: question_banksWhereInput
  }

  export type question_banksUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: question_banksWhereInput
    data: XOR<question_banksUpdateWithoutQuizzesInput, question_banksUncheckedUpdateWithoutQuizzesInput>
  }

  export type question_banksUpdateWithoutQuizzesInput = {
    questions?: questionsUpdateManyWithoutQuestion_bankNestedInput
    class?: classesUpdateOneRequiredWithoutQuestion_banksNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuestion_banksNestedInput
    teacher?: usersUpdateOneRequiredWithoutQuestion_banksNestedInput
  }

  export type question_banksUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type subjectsUpsertWithoutQuizzesInput = {
    update: XOR<subjectsUpdateWithoutQuizzesInput, subjectsUncheckedUpdateWithoutQuizzesInput>
    create: XOR<subjectsCreateWithoutQuizzesInput, subjectsUncheckedCreateWithoutQuizzesInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutQuizzesInput, subjectsUncheckedUpdateWithoutQuizzesInput>
  }

  export type subjectsUpdateWithoutQuizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUpdateManyWithoutSubjectNestedInput
    scores?: scoresUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: scoresUncheckedUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type quiz_questionsUpsertWithWhereUniqueWithoutQuizInput = {
    where: quiz_questionsWhereUniqueInput
    update: XOR<quiz_questionsUpdateWithoutQuizInput, quiz_questionsUncheckedUpdateWithoutQuizInput>
    create: XOR<quiz_questionsCreateWithoutQuizInput, quiz_questionsUncheckedCreateWithoutQuizInput>
  }

  export type quiz_questionsUpdateWithWhereUniqueWithoutQuizInput = {
    where: quiz_questionsWhereUniqueInput
    data: XOR<quiz_questionsUpdateWithoutQuizInput, quiz_questionsUncheckedUpdateWithoutQuizInput>
  }

  export type quiz_questionsUpdateManyWithWhereWithoutQuizInput = {
    where: quiz_questionsScalarWhereInput
    data: XOR<quiz_questionsUpdateManyMutationInput, quiz_questionsUncheckedUpdateManyWithoutQuizInput>
  }

  export type student_quizzesUpsertWithWhereUniqueWithoutQuizInput = {
    where: student_quizzesWhereUniqueInput
    update: XOR<student_quizzesUpdateWithoutQuizInput, student_quizzesUncheckedUpdateWithoutQuizInput>
    create: XOR<student_quizzesCreateWithoutQuizInput, student_quizzesUncheckedCreateWithoutQuizInput>
  }

  export type student_quizzesUpdateWithWhereUniqueWithoutQuizInput = {
    where: student_quizzesWhereUniqueInput
    data: XOR<student_quizzesUpdateWithoutQuizInput, student_quizzesUncheckedUpdateWithoutQuizInput>
  }

  export type student_quizzesUpdateManyWithWhereWithoutQuizInput = {
    where: student_quizzesScalarWhereInput
    data: XOR<student_quizzesUpdateManyMutationInput, student_quizzesUncheckedUpdateManyWithoutQuizInput>
  }

  export type questionsCreateWithoutQuiz_questionsInput = {
    content: string
    question_bank: question_banksCreateNestedOneWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutQuiz_questionsInput = {
    id?: number
    content: string
    question_bank_id: number
  }

  export type questionsCreateOrConnectWithoutQuiz_questionsInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuiz_questionsInput, questionsUncheckedCreateWithoutQuiz_questionsInput>
  }

  export type quizzesCreateWithoutQuiz_questionsInput = {
    class: classesCreateNestedOneWithoutQuizzesInput
    question_bank: question_banksCreateNestedOneWithoutQuizzesInput
    subject: subjectsCreateNestedOneWithoutQuizzesInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutQuizInput
  }

  export type quizzesUncheckedCreateWithoutQuiz_questionsInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizzesCreateOrConnectWithoutQuiz_questionsInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutQuiz_questionsInput, quizzesUncheckedCreateWithoutQuiz_questionsInput>
  }

  export type questionsUpsertWithoutQuiz_questionsInput = {
    update: XOR<questionsUpdateWithoutQuiz_questionsInput, questionsUncheckedUpdateWithoutQuiz_questionsInput>
    create: XOR<questionsCreateWithoutQuiz_questionsInput, questionsUncheckedCreateWithoutQuiz_questionsInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutQuiz_questionsInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutQuiz_questionsInput, questionsUncheckedUpdateWithoutQuiz_questionsInput>
  }

  export type questionsUpdateWithoutQuiz_questionsInput = {
    content?: StringFieldUpdateOperationsInput | string
    question_bank?: question_banksUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuiz_questionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesUpsertWithoutQuiz_questionsInput = {
    update: XOR<quizzesUpdateWithoutQuiz_questionsInput, quizzesUncheckedUpdateWithoutQuiz_questionsInput>
    create: XOR<quizzesCreateWithoutQuiz_questionsInput, quizzesUncheckedCreateWithoutQuiz_questionsInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutQuiz_questionsInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutQuiz_questionsInput, quizzesUncheckedUpdateWithoutQuiz_questionsInput>
  }

  export type quizzesUpdateWithoutQuiz_questionsInput = {
    class?: classesUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: question_banksUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuizzesNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateWithoutQuiz_questionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizzesCreateWithoutStudent_quizzesInput = {
    class: classesCreateNestedOneWithoutQuizzesInput
    question_bank: question_banksCreateNestedOneWithoutQuizzesInput
    subject: subjectsCreateNestedOneWithoutQuizzesInput
    quiz_questions?: quiz_questionsCreateNestedManyWithoutQuizInput
  }

  export type quizzesUncheckedCreateWithoutStudent_quizzesInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
    quiz_questions?: quiz_questionsUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizzesCreateOrConnectWithoutStudent_quizzesInput = {
    where: quizzesWhereUniqueInput
    create: XOR<quizzesCreateWithoutStudent_quizzesInput, quizzesUncheckedCreateWithoutStudent_quizzesInput>
  }

  export type usersCreateWithoutStudent_quizzesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutStudent_quizzesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutStudent_quizzesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStudent_quizzesInput, usersUncheckedCreateWithoutStudent_quizzesInput>
  }

  export type quizzesUpsertWithoutStudent_quizzesInput = {
    update: XOR<quizzesUpdateWithoutStudent_quizzesInput, quizzesUncheckedUpdateWithoutStudent_quizzesInput>
    create: XOR<quizzesCreateWithoutStudent_quizzesInput, quizzesUncheckedCreateWithoutStudent_quizzesInput>
    where?: quizzesWhereInput
  }

  export type quizzesUpdateToOneWithWhereWithoutStudent_quizzesInput = {
    where?: quizzesWhereInput
    data: XOR<quizzesUpdateWithoutStudent_quizzesInput, quizzesUncheckedUpdateWithoutStudent_quizzesInput>
  }

  export type quizzesUpdateWithoutStudent_quizzesInput = {
    class?: classesUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: question_banksUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuizzesNestedInput
    quiz_questions?: quiz_questionsUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateWithoutStudent_quizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type usersUpsertWithoutStudent_quizzesInput = {
    update: XOR<usersUpdateWithoutStudent_quizzesInput, usersUncheckedUpdateWithoutStudent_quizzesInput>
    create: XOR<usersCreateWithoutStudent_quizzesInput, usersUncheckedCreateWithoutStudent_quizzesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutStudent_quizzesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutStudent_quizzesInput, usersUncheckedUpdateWithoutStudent_quizzesInput>
  }

  export type usersUpdateWithoutStudent_quizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutStudent_quizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type classesCreateWithoutAssignmentsInput = {
    name: string
    teacher?: usersCreateNestedOneWithoutTeacher_classesInput
    question_banks?: question_banksCreateNestedManyWithoutClassInput
    quizzes?: quizzesCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutClassInput
    students?: usersCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUncheckedCreateWithoutAssignmentsInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    question_banks?: question_banksUncheckedCreateNestedManyWithoutClassInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutClassInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutClassInput
    students?: usersUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type classesCreateOrConnectWithoutAssignmentsInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutAssignmentsInput, classesUncheckedCreateWithoutAssignmentsInput>
  }

  export type subjectsCreateWithoutAssignmentsInput = {
    name: string
    question_banks?: question_banksCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesCreateNestedManyWithoutSubjectInput
    scores?: scoresCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateWithoutAssignmentsInput = {
    id?: number
    name: string
    question_banks?: question_banksUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutSubjectInput
    scores?: scoresUncheckedCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsCreateOrConnectWithoutAssignmentsInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutAssignmentsInput, subjectsUncheckedCreateWithoutAssignmentsInput>
  }

  export type usersCreateWithoutAssignmentsInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutAssignmentsInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutAssignmentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAssignmentsInput, usersUncheckedCreateWithoutAssignmentsInput>
  }

  export type student_assignmentsCreateWithoutAssignmentInput = {
    student: usersCreateNestedOneWithoutStudent_assignmentsInput
  }

  export type student_assignmentsUncheckedCreateWithoutAssignmentInput = {
    id?: number
    student_id: number
  }

  export type student_assignmentsCreateOrConnectWithoutAssignmentInput = {
    where: student_assignmentsWhereUniqueInput
    create: XOR<student_assignmentsCreateWithoutAssignmentInput, student_assignmentsUncheckedCreateWithoutAssignmentInput>
  }

  export type student_assignmentsCreateManyAssignmentInputEnvelope = {
    data: student_assignmentsCreateManyAssignmentInput | student_assignmentsCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type classesUpsertWithoutAssignmentsInput = {
    update: XOR<classesUpdateWithoutAssignmentsInput, classesUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<classesCreateWithoutAssignmentsInput, classesUncheckedCreateWithoutAssignmentsInput>
    where?: classesWhereInput
  }

  export type classesUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: classesWhereInput
    data: XOR<classesUpdateWithoutAssignmentsInput, classesUncheckedUpdateWithoutAssignmentsInput>
  }

  export type classesUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    teacher?: usersUpdateOneWithoutTeacher_classesNestedInput
    question_banks?: question_banksUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutClassNestedInput
    students?: usersUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateWithoutAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    question_banks?: question_banksUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput
    students?: usersUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type subjectsUpsertWithoutAssignmentsInput = {
    update: XOR<subjectsUpdateWithoutAssignmentsInput, subjectsUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<subjectsCreateWithoutAssignmentsInput, subjectsUncheckedCreateWithoutAssignmentsInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutAssignmentsInput, subjectsUncheckedUpdateWithoutAssignmentsInput>
  }

  export type subjectsUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    question_banks?: question_banksUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUpdateManyWithoutSubjectNestedInput
    scores?: scoresUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateWithoutAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    question_banks?: question_banksUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: scoresUncheckedUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type usersUpsertWithoutAssignmentsInput = {
    update: XOR<usersUpdateWithoutAssignmentsInput, usersUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<usersCreateWithoutAssignmentsInput, usersUncheckedCreateWithoutAssignmentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAssignmentsInput, usersUncheckedUpdateWithoutAssignmentsInput>
  }

  export type usersUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type student_assignmentsUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: student_assignmentsWhereUniqueInput
    update: XOR<student_assignmentsUpdateWithoutAssignmentInput, student_assignmentsUncheckedUpdateWithoutAssignmentInput>
    create: XOR<student_assignmentsCreateWithoutAssignmentInput, student_assignmentsUncheckedCreateWithoutAssignmentInput>
  }

  export type student_assignmentsUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: student_assignmentsWhereUniqueInput
    data: XOR<student_assignmentsUpdateWithoutAssignmentInput, student_assignmentsUncheckedUpdateWithoutAssignmentInput>
  }

  export type student_assignmentsUpdateManyWithWhereWithoutAssignmentInput = {
    where: student_assignmentsScalarWhereInput
    data: XOR<student_assignmentsUpdateManyMutationInput, student_assignmentsUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type assignmentsCreateWithoutStudent_assignmentsInput = {
    title: string
    description: string
    class: classesCreateNestedOneWithoutAssignmentsInput
    subject: subjectsCreateNestedOneWithoutAssignmentsInput
    teacher: usersCreateNestedOneWithoutAssignmentsInput
  }

  export type assignmentsUncheckedCreateWithoutStudent_assignmentsInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
  }

  export type assignmentsCreateOrConnectWithoutStudent_assignmentsInput = {
    where: assignmentsWhereUniqueInput
    create: XOR<assignmentsCreateWithoutStudent_assignmentsInput, assignmentsUncheckedCreateWithoutStudent_assignmentsInput>
  }

  export type usersCreateWithoutStudent_assignmentsInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutStudent_assignmentsInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutStudent_assignmentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStudent_assignmentsInput, usersUncheckedCreateWithoutStudent_assignmentsInput>
  }

  export type assignmentsUpsertWithoutStudent_assignmentsInput = {
    update: XOR<assignmentsUpdateWithoutStudent_assignmentsInput, assignmentsUncheckedUpdateWithoutStudent_assignmentsInput>
    create: XOR<assignmentsCreateWithoutStudent_assignmentsInput, assignmentsUncheckedCreateWithoutStudent_assignmentsInput>
    where?: assignmentsWhereInput
  }

  export type assignmentsUpdateToOneWithWhereWithoutStudent_assignmentsInput = {
    where?: assignmentsWhereInput
    data: XOR<assignmentsUpdateWithoutStudent_assignmentsInput, assignmentsUncheckedUpdateWithoutStudent_assignmentsInput>
  }

  export type assignmentsUpdateWithoutStudent_assignmentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: classesUpdateOneRequiredWithoutAssignmentsNestedInput
    subject?: subjectsUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: usersUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type assignmentsUncheckedUpdateWithoutStudent_assignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type usersUpsertWithoutStudent_assignmentsInput = {
    update: XOR<usersUpdateWithoutStudent_assignmentsInput, usersUncheckedUpdateWithoutStudent_assignmentsInput>
    create: XOR<usersCreateWithoutStudent_assignmentsInput, usersUncheckedCreateWithoutStudent_assignmentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutStudent_assignmentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutStudent_assignmentsInput, usersUncheckedUpdateWithoutStudent_assignmentsInput>
  }

  export type usersUpdateWithoutStudent_assignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutStudent_assignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type classesCreateWithoutWeekly_schedulesInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutClassInput
    teacher?: usersCreateNestedOneWithoutTeacher_classesInput
    question_banks?: question_banksCreateNestedManyWithoutClassInput
    quizzes?: quizzesCreateNestedManyWithoutClassInput
    students?: usersCreateNestedManyWithoutStudent_classesInput
  }

  export type classesUncheckedCreateWithoutWeekly_schedulesInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: assignmentsUncheckedCreateNestedManyWithoutClassInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutClassInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutClassInput
    students?: usersUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type classesCreateOrConnectWithoutWeekly_schedulesInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutWeekly_schedulesInput, classesUncheckedCreateWithoutWeekly_schedulesInput>
  }

  export type subjectsCreateWithoutWeekly_schedulesInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesCreateNestedManyWithoutSubjectInput
    scores?: scoresCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateWithoutWeekly_schedulesInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutSubjectInput
    scores?: scoresUncheckedCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsCreateOrConnectWithoutWeekly_schedulesInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutWeekly_schedulesInput, subjectsUncheckedCreateWithoutWeekly_schedulesInput>
  }

  export type usersCreateWithoutWeekly_schedulesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutWeekly_schedulesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutWeekly_schedulesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutWeekly_schedulesInput, usersUncheckedCreateWithoutWeekly_schedulesInput>
  }

  export type classesUpsertWithoutWeekly_schedulesInput = {
    update: XOR<classesUpdateWithoutWeekly_schedulesInput, classesUncheckedUpdateWithoutWeekly_schedulesInput>
    create: XOR<classesCreateWithoutWeekly_schedulesInput, classesUncheckedCreateWithoutWeekly_schedulesInput>
    where?: classesWhereInput
  }

  export type classesUpdateToOneWithWhereWithoutWeekly_schedulesInput = {
    where?: classesWhereInput
    data: XOR<classesUpdateWithoutWeekly_schedulesInput, classesUncheckedUpdateWithoutWeekly_schedulesInput>
  }

  export type classesUpdateWithoutWeekly_schedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutClassNestedInput
    teacher?: usersUpdateOneWithoutTeacher_classesNestedInput
    question_banks?: question_banksUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUpdateManyWithoutClassNestedInput
    students?: usersUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateWithoutWeekly_schedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: assignmentsUncheckedUpdateManyWithoutClassNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutClassNestedInput
    students?: usersUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type subjectsUpsertWithoutWeekly_schedulesInput = {
    update: XOR<subjectsUpdateWithoutWeekly_schedulesInput, subjectsUncheckedUpdateWithoutWeekly_schedulesInput>
    create: XOR<subjectsCreateWithoutWeekly_schedulesInput, subjectsUncheckedCreateWithoutWeekly_schedulesInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutWeekly_schedulesInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutWeekly_schedulesInput, subjectsUncheckedUpdateWithoutWeekly_schedulesInput>
  }

  export type subjectsUpdateWithoutWeekly_schedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUpdateManyWithoutSubjectNestedInput
    scores?: scoresUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateWithoutWeekly_schedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: scoresUncheckedUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type usersUpsertWithoutWeekly_schedulesInput = {
    update: XOR<usersUpdateWithoutWeekly_schedulesInput, usersUncheckedUpdateWithoutWeekly_schedulesInput>
    create: XOR<usersCreateWithoutWeekly_schedulesInput, usersUncheckedCreateWithoutWeekly_schedulesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutWeekly_schedulesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutWeekly_schedulesInput, usersUncheckedUpdateWithoutWeekly_schedulesInput>
  }

  export type usersUpdateWithoutWeekly_schedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutWeekly_schedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type usersCreateWithoutStudy_timetablesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    scores?: scoresCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutStudy_timetablesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    scores?: scoresUncheckedCreateNestedManyWithoutStudentInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutStudy_timetablesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStudy_timetablesInput, usersUncheckedCreateWithoutStudy_timetablesInput>
  }

  export type subjectsCreateWithoutStudy_timetablesInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesCreateNestedManyWithoutSubjectInput
    scores?: scoresCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateWithoutStudy_timetablesInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutSubjectInput
    scores?: scoresUncheckedCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsCreateOrConnectWithoutStudy_timetablesInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutStudy_timetablesInput, subjectsUncheckedCreateWithoutStudy_timetablesInput>
  }

  export type usersUpsertWithoutStudy_timetablesInput = {
    update: XOR<usersUpdateWithoutStudy_timetablesInput, usersUncheckedUpdateWithoutStudy_timetablesInput>
    create: XOR<usersCreateWithoutStudy_timetablesInput, usersUncheckedCreateWithoutStudy_timetablesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutStudy_timetablesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutStudy_timetablesInput, usersUncheckedUpdateWithoutStudy_timetablesInput>
  }

  export type usersUpdateWithoutStudy_timetablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutStudy_timetablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type subjectsUpsertWithoutStudy_timetablesInput = {
    update: XOR<subjectsUpdateWithoutStudy_timetablesInput, subjectsUncheckedUpdateWithoutStudy_timetablesInput>
    create: XOR<subjectsCreateWithoutStudy_timetablesInput, subjectsUncheckedCreateWithoutStudy_timetablesInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutStudy_timetablesInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutStudy_timetablesInput, subjectsUncheckedUpdateWithoutStudy_timetablesInput>
  }

  export type subjectsUpdateWithoutStudy_timetablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUpdateManyWithoutSubjectNestedInput
    scores?: scoresUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateWithoutStudy_timetablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: scoresUncheckedUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type usersCreateWithoutScoresInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksCreateNestedManyWithoutTeacherInput
    student_assignments?: student_assignmentsCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutTeacherInput
    student_classes?: classesCreateNestedManyWithoutStudentsInput
  }

  export type usersUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: classesUncheckedCreateNestedManyWithoutTeacherInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutTeacherInput
    student_assignments?: student_assignmentsUncheckedCreateNestedManyWithoutStudentInput
    student_quizzes?: student_quizzesUncheckedCreateNestedManyWithoutStudentInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutStudentInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: classesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type usersCreateOrConnectWithoutScoresInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutScoresInput, usersUncheckedCreateWithoutScoresInput>
  }

  export type subjectsCreateWithoutScoresInput = {
    name: string
    assignments?: assignmentsCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesCreateNestedManyWithoutSubjectInput
  }

  export type subjectsUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    assignments?: assignmentsUncheckedCreateNestedManyWithoutSubjectInput
    question_banks?: question_banksUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: quizzesUncheckedCreateNestedManyWithoutSubjectInput
    study_timetables?: study_timetablesUncheckedCreateNestedManyWithoutSubjectInput
    weekly_schedules?: weekly_schedulesUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type subjectsCreateOrConnectWithoutScoresInput = {
    where: subjectsWhereUniqueInput
    create: XOR<subjectsCreateWithoutScoresInput, subjectsUncheckedCreateWithoutScoresInput>
  }

  export type usersUpsertWithoutScoresInput = {
    update: XOR<usersUpdateWithoutScoresInput, usersUncheckedUpdateWithoutScoresInput>
    create: XOR<usersCreateWithoutScoresInput, usersUncheckedCreateWithoutScoresInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutScoresInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutScoresInput, usersUncheckedUpdateWithoutScoresInput>
  }

  export type usersUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUpdateManyWithoutStudentsNestedInput
  }

  export type usersUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: classesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type subjectsUpsertWithoutScoresInput = {
    update: XOR<subjectsUpdateWithoutScoresInput, subjectsUncheckedUpdateWithoutScoresInput>
    create: XOR<subjectsCreateWithoutScoresInput, subjectsUncheckedCreateWithoutScoresInput>
    where?: subjectsWhereInput
  }

  export type subjectsUpdateToOneWithWhereWithoutScoresInput = {
    where?: subjectsWhereInput
    data: XOR<subjectsUpdateWithoutScoresInput, subjectsUncheckedUpdateWithoutScoresInput>
  }

  export type subjectsUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutSubjectNestedInput
  }

  export type subjectsUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutSubjectNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutSubjectNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutSubjectNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type assignmentsCreateManyTeacherInput = {
    id?: number
    title: string
    description: string
    class_id: number
    subject_id: number
  }

  export type classesCreateManyTeacherInput = {
    id?: number
    name: string
  }

  export type question_banksCreateManyTeacherInput = {
    id?: number
    subject_id: number
    class_id: number
  }

  export type scoresCreateManyStudentInput = {
    id?: number
    subject_id: number
    marks: number
  }

  export type student_assignmentsCreateManyStudentInput = {
    id?: number
    assignment_id: number
  }

  export type student_quizzesCreateManyStudentInput = {
    id?: number
    quiz_id: number
  }

  export type study_timetablesCreateManyStudentInput = {
    id?: number
    subject_id: number
  }

  export type weekly_schedulesCreateManyTeacherInput = {
    id?: number
    class_id: number
    subject_id: number
  }

  export type assignmentsUpdateWithoutTeacherInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: classesUpdateOneRequiredWithoutAssignmentsNestedInput
    subject?: subjectsUpdateOneRequiredWithoutAssignmentsNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesUpdateWithoutTeacherInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutClassNestedInput
    question_banks?: question_banksUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutClassNestedInput
    students?: usersUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutClassNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput
    students?: usersUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type classesUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type question_banksUpdateWithoutTeacherInput = {
    questions?: questionsUpdateManyWithoutQuestion_bankNestedInput
    class?: classesUpdateOneRequiredWithoutQuestion_banksNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuestion_banksNestedInput
    quizzes?: quizzesUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type scoresUpdateWithoutStudentInput = {
    marks?: IntFieldUpdateOperationsInput | number
    subject?: subjectsUpdateOneRequiredWithoutScoresNestedInput
  }

  export type scoresUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type scoresUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type student_assignmentsUpdateWithoutStudentInput = {
    assignment?: assignmentsUpdateOneRequiredWithoutStudent_assignmentsNestedInput
  }

  export type student_assignmentsUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_assignmentsUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_quizzesUpdateWithoutStudentInput = {
    quiz?: quizzesUpdateOneRequiredWithoutStudent_quizzesNestedInput
  }

  export type student_quizzesUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_quizzesUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type study_timetablesUpdateWithoutStudentInput = {
    subject?: subjectsUpdateOneRequiredWithoutStudy_timetablesNestedInput
  }

  export type study_timetablesUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type study_timetablesUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesUpdateWithoutTeacherInput = {
    class?: classesUpdateOneRequiredWithoutWeekly_schedulesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutWeekly_schedulesNestedInput
  }

  export type weekly_schedulesUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutClassNestedInput
    teacher?: usersUpdateOneWithoutTeacher_classesNestedInput
    question_banks?: question_banksUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutClassNestedInput
  }

  export type classesUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: assignmentsUncheckedUpdateManyWithoutClassNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutClassNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutClassNestedInput
  }

  export type classesUncheckedUpdateManyWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type assignmentsCreateManyClassInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    subject_id: number
  }

  export type question_banksCreateManyClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
  }

  export type quizzesCreateManyClassInput = {
    id?: number
    subject_id: number
    question_bank_id: number
  }

  export type weekly_schedulesCreateManyClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
  }

  export type assignmentsUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    subject?: subjectsUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: usersUpdateOneRequiredWithoutAssignmentsNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type question_banksUpdateWithoutClassInput = {
    questions?: questionsUpdateManyWithoutQuestion_bankNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuestion_banksNestedInput
    teacher?: usersUpdateOneRequiredWithoutQuestion_banksNestedInput
    quizzes?: quizzesUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesUpdateWithoutClassInput = {
    question_bank?: question_banksUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuizzesNestedInput
    quiz_questions?: quiz_questionsUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesUpdateWithoutClassInput = {
    subject?: subjectsUpdateOneRequiredWithoutWeekly_schedulesNestedInput
    teacher?: usersUpdateOneRequiredWithoutWeekly_schedulesNestedInput
  }

  export type weekly_schedulesUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type usersUpdateWithoutStudent_classesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUpdateManyWithoutTeacherNestedInput
    scores?: scoresUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUpdateManyWithoutTeacherNestedInput
  }

  export type usersUncheckedUpdateWithoutStudent_classesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: assignmentsUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: classesUncheckedUpdateManyWithoutTeacherNestedInput
    question_banks?: question_banksUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: scoresUncheckedUpdateManyWithoutStudentNestedInput
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutStudentNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutStudentNestedInput
    study_timetables?: study_timetablesUncheckedUpdateManyWithoutStudentNestedInput
    weekly_schedules?: weekly_schedulesUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type usersUncheckedUpdateManyWithoutStudent_classesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type assignmentsCreateManySubjectInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
  }

  export type question_banksCreateManySubjectInput = {
    id?: number
    teacher_id: number
    class_id: number
  }

  export type quizzesCreateManySubjectInput = {
    id?: number
    class_id: number
    question_bank_id: number
  }

  export type scoresCreateManySubjectInput = {
    id?: number
    student_id: number
    marks: number
  }

  export type study_timetablesCreateManySubjectInput = {
    id?: number
    student_id: number
  }

  export type weekly_schedulesCreateManySubjectInput = {
    id?: number
    class_id: number
    teacher_id: number
  }

  export type assignmentsUpdateWithoutSubjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: classesUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: usersUpdateOneRequiredWithoutAssignmentsNestedInput
    student_assignments?: student_assignmentsUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    student_assignments?: student_assignmentsUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type assignmentsUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type question_banksUpdateWithoutSubjectInput = {
    questions?: questionsUpdateManyWithoutQuestion_bankNestedInput
    class?: classesUpdateOneRequiredWithoutQuestion_banksNestedInput
    teacher?: usersUpdateOneRequiredWithoutQuestion_banksNestedInput
    quizzes?: quizzesUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: questionsUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: quizzesUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type question_banksUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type quizzesUpdateWithoutSubjectInput = {
    class?: classesUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: question_banksUpdateOneRequiredWithoutQuizzesNestedInput
    quiz_questions?: quiz_questionsUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type scoresUpdateWithoutSubjectInput = {
    marks?: IntFieldUpdateOperationsInput | number
    student?: usersUpdateOneRequiredWithoutScoresNestedInput
  }

  export type scoresUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type scoresUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type study_timetablesUpdateWithoutSubjectInput = {
    student?: usersUpdateOneRequiredWithoutStudy_timetablesNestedInput
  }

  export type study_timetablesUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type study_timetablesUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesUpdateWithoutSubjectInput = {
    class?: classesUpdateOneRequiredWithoutWeekly_schedulesNestedInput
    teacher?: usersUpdateOneRequiredWithoutWeekly_schedulesNestedInput
  }

  export type weekly_schedulesUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
  }

  export type weekly_schedulesUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
  }

  export type questionsCreateManyQuestion_bankInput = {
    id?: number
    content: string
  }

  export type quizzesCreateManyQuestion_bankInput = {
    id?: number
    class_id: number
    subject_id: number
  }

  export type questionsUpdateWithoutQuestion_bankInput = {
    content?: StringFieldUpdateOperationsInput | string
    quiz_questions?: quiz_questionsUpdateManyWithoutQuestionNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type questionsUncheckedUpdateManyWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type quizzesUpdateWithoutQuestion_bankInput = {
    class?: classesUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: subjectsUpdateOneRequiredWithoutQuizzesNestedInput
    quiz_questions?: quiz_questionsUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    quiz_questions?: quiz_questionsUncheckedUpdateManyWithoutQuizNestedInput
    student_quizzes?: student_quizzesUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizzesUncheckedUpdateManyWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_questionsCreateManyQuestionInput = {
    id?: number
    quiz_id: number
  }

  export type quiz_questionsUpdateWithoutQuestionInput = {
    quiz?: quizzesUpdateOneRequiredWithoutQuiz_questionsNestedInput
  }

  export type quiz_questionsUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_questionsUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_questionsCreateManyQuizInput = {
    id?: number
    question_id: number
  }

  export type student_quizzesCreateManyQuizInput = {
    id?: number
    student_id: number
  }

  export type quiz_questionsUpdateWithoutQuizInput = {
    question?: questionsUpdateOneRequiredWithoutQuiz_questionsNestedInput
  }

  export type quiz_questionsUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_questionsUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_quizzesUpdateWithoutQuizInput = {
    student?: usersUpdateOneRequiredWithoutStudent_quizzesNestedInput
  }

  export type student_quizzesUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_quizzesUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_assignmentsCreateManyAssignmentInput = {
    id?: number
    student_id: number
  }

  export type student_assignmentsUpdateWithoutAssignmentInput = {
    student?: usersUpdateOneRequiredWithoutStudent_assignmentsNestedInput
  }

  export type student_assignmentsUncheckedUpdateWithoutAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type student_assignmentsUncheckedUpdateManyWithoutAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}