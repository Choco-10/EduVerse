
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model QuestionBank
 * 
 */
export type QuestionBank = $Result.DefaultSelection<Prisma.$QuestionBankPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Quiz
 * 
 */
export type Quiz = $Result.DefaultSelection<Prisma.$QuizPayload>
/**
 * Model QuizQuestion
 * 
 */
export type QuizQuestion = $Result.DefaultSelection<Prisma.$QuizQuestionPayload>
/**
 * Model StudentQuiz
 * 
 */
export type StudentQuiz = $Result.DefaultSelection<Prisma.$StudentQuizPayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model StudentAssignment
 * 
 */
export type StudentAssignment = $Result.DefaultSelection<Prisma.$StudentAssignmentPayload>
/**
 * Model WeeklySchedule
 * 
 */
export type WeeklySchedule = $Result.DefaultSelection<Prisma.$WeeklySchedulePayload>
/**
 * Model StudyTimetable
 * 
 */
export type StudyTimetable = $Result.DefaultSelection<Prisma.$StudyTimetablePayload>
/**
 * Model Score
 * 
 */
export type Score = $Result.DefaultSelection<Prisma.$ScorePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionBank`: Exposes CRUD operations for the **QuestionBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionBanks
    * const questionBanks = await prisma.questionBank.findMany()
    * ```
    */
  get questionBank(): Prisma.QuestionBankDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quiz`: Exposes CRUD operations for the **Quiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quiz.findMany()
    * ```
    */
  get quiz(): Prisma.QuizDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quizQuestion`: Exposes CRUD operations for the **QuizQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuizQuestions
    * const quizQuestions = await prisma.quizQuestion.findMany()
    * ```
    */
  get quizQuestion(): Prisma.QuizQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentQuiz`: Exposes CRUD operations for the **StudentQuiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentQuizs
    * const studentQuizs = await prisma.studentQuiz.findMany()
    * ```
    */
  get studentQuiz(): Prisma.StudentQuizDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentAssignment`: Exposes CRUD operations for the **StudentAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAssignments
    * const studentAssignments = await prisma.studentAssignment.findMany()
    * ```
    */
  get studentAssignment(): Prisma.StudentAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.weeklySchedule`: Exposes CRUD operations for the **WeeklySchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeeklySchedules
    * const weeklySchedules = await prisma.weeklySchedule.findMany()
    * ```
    */
  get weeklySchedule(): Prisma.WeeklyScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studyTimetable`: Exposes CRUD operations for the **StudyTimetable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyTimetables
    * const studyTimetables = await prisma.studyTimetable.findMany()
    * ```
    */
  get studyTimetable(): Prisma.StudyTimetableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.score`: Exposes CRUD operations for the **Score** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scores
    * const scores = await prisma.score.findMany()
    * ```
    */
  get score(): Prisma.ScoreDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Class: 'Class',
    Subject: 'Subject',
    QuestionBank: 'QuestionBank',
    Question: 'Question',
    Quiz: 'Quiz',
    QuizQuestion: 'QuizQuestion',
    StudentQuiz: 'StudentQuiz',
    Assignment: 'Assignment',
    StudentAssignment: 'StudentAssignment',
    WeeklySchedule: 'WeeklySchedule',
    StudyTimetable: 'StudyTimetable',
    Score: 'Score'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "class" | "subject" | "questionBank" | "question" | "quiz" | "quizQuestion" | "studentQuiz" | "assignment" | "studentAssignment" | "weeklySchedule" | "studyTimetable" | "score"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      QuestionBank: {
        payload: Prisma.$QuestionBankPayload<ExtArgs>
        fields: Prisma.QuestionBankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionBankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionBankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          findFirst: {
            args: Prisma.QuestionBankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionBankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          findMany: {
            args: Prisma.QuestionBankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>[]
          }
          create: {
            args: Prisma.QuestionBankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          createMany: {
            args: Prisma.QuestionBankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionBankCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>[]
          }
          delete: {
            args: Prisma.QuestionBankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          update: {
            args: Prisma.QuestionBankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          deleteMany: {
            args: Prisma.QuestionBankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionBankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionBankUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>[]
          }
          upsert: {
            args: Prisma.QuestionBankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          aggregate: {
            args: Prisma.QuestionBankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionBank>
          }
          groupBy: {
            args: Prisma.QuestionBankGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionBankGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionBankCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionBankCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Quiz: {
        payload: Prisma.$QuizPayload<ExtArgs>
        fields: Prisma.QuizFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuizFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          findFirst: {
            args: Prisma.QuizFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          findMany: {
            args: Prisma.QuizFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          create: {
            args: Prisma.QuizCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          createMany: {
            args: Prisma.QuizCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuizCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          delete: {
            args: Prisma.QuizDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          update: {
            args: Prisma.QuizUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          deleteMany: {
            args: Prisma.QuizDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuizUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuizUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          upsert: {
            args: Prisma.QuizUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          aggregate: {
            args: Prisma.QuizAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuiz>
          }
          groupBy: {
            args: Prisma.QuizGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizCountArgs<ExtArgs>
            result: $Utils.Optional<QuizCountAggregateOutputType> | number
          }
        }
      }
      QuizQuestion: {
        payload: Prisma.$QuizQuestionPayload<ExtArgs>
        fields: Prisma.QuizQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuizQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>
          }
          findFirst: {
            args: Prisma.QuizQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>
          }
          findMany: {
            args: Prisma.QuizQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>[]
          }
          create: {
            args: Prisma.QuizQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>
          }
          createMany: {
            args: Prisma.QuizQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuizQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>[]
          }
          delete: {
            args: Prisma.QuizQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>
          }
          update: {
            args: Prisma.QuizQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuizQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuizQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuizQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuizQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizQuestionPayload>
          }
          aggregate: {
            args: Prisma.QuizQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuizQuestion>
          }
          groupBy: {
            args: Prisma.QuizQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuizQuestionCountAggregateOutputType> | number
          }
        }
      }
      StudentQuiz: {
        payload: Prisma.$StudentQuizPayload<ExtArgs>
        fields: Prisma.StudentQuizFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentQuizFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentQuizFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>
          }
          findFirst: {
            args: Prisma.StudentQuizFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentQuizFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>
          }
          findMany: {
            args: Prisma.StudentQuizFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>[]
          }
          create: {
            args: Prisma.StudentQuizCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>
          }
          createMany: {
            args: Prisma.StudentQuizCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentQuizCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>[]
          }
          delete: {
            args: Prisma.StudentQuizDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>
          }
          update: {
            args: Prisma.StudentQuizUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>
          }
          deleteMany: {
            args: Prisma.StudentQuizDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentQuizUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentQuizUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>[]
          }
          upsert: {
            args: Prisma.StudentQuizUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentQuizPayload>
          }
          aggregate: {
            args: Prisma.StudentQuizAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentQuiz>
          }
          groupBy: {
            args: Prisma.StudentQuizGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentQuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentQuizCountArgs<ExtArgs>
            result: $Utils.Optional<StudentQuizCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      StudentAssignment: {
        payload: Prisma.$StudentAssignmentPayload<ExtArgs>
        fields: Prisma.StudentAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>
          }
          findFirst: {
            args: Prisma.StudentAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>
          }
          findMany: {
            args: Prisma.StudentAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>[]
          }
          create: {
            args: Prisma.StudentAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>
          }
          createMany: {
            args: Prisma.StudentAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>[]
          }
          delete: {
            args: Prisma.StudentAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>
          }
          update: {
            args: Prisma.StudentAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.StudentAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.StudentAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAssignmentPayload>
          }
          aggregate: {
            args: Prisma.StudentAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentAssignment>
          }
          groupBy: {
            args: Prisma.StudentAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentAssignmentCountAggregateOutputType> | number
          }
        }
      }
      WeeklySchedule: {
        payload: Prisma.$WeeklySchedulePayload<ExtArgs>
        fields: Prisma.WeeklyScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeeklyScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          findFirst: {
            args: Prisma.WeeklyScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeeklyScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          findMany: {
            args: Prisma.WeeklyScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>[]
          }
          create: {
            args: Prisma.WeeklyScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          createMany: {
            args: Prisma.WeeklyScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeeklyScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>[]
          }
          delete: {
            args: Prisma.WeeklyScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          update: {
            args: Prisma.WeeklyScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          deleteMany: {
            args: Prisma.WeeklyScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeeklyScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WeeklyScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>[]
          }
          upsert: {
            args: Prisma.WeeklyScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          aggregate: {
            args: Prisma.WeeklyScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeeklySchedule>
          }
          groupBy: {
            args: Prisma.WeeklyScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeeklyScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeeklyScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<WeeklyScheduleCountAggregateOutputType> | number
          }
        }
      }
      StudyTimetable: {
        payload: Prisma.$StudyTimetablePayload<ExtArgs>
        fields: Prisma.StudyTimetableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyTimetableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyTimetableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>
          }
          findFirst: {
            args: Prisma.StudyTimetableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyTimetableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>
          }
          findMany: {
            args: Prisma.StudyTimetableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>[]
          }
          create: {
            args: Prisma.StudyTimetableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>
          }
          createMany: {
            args: Prisma.StudyTimetableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyTimetableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>[]
          }
          delete: {
            args: Prisma.StudyTimetableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>
          }
          update: {
            args: Prisma.StudyTimetableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>
          }
          deleteMany: {
            args: Prisma.StudyTimetableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyTimetableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudyTimetableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>[]
          }
          upsert: {
            args: Prisma.StudyTimetableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyTimetablePayload>
          }
          aggregate: {
            args: Prisma.StudyTimetableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudyTimetable>
          }
          groupBy: {
            args: Prisma.StudyTimetableGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyTimetableGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyTimetableCountArgs<ExtArgs>
            result: $Utils.Optional<StudyTimetableCountAggregateOutputType> | number
          }
        }
      }
      Score: {
        payload: Prisma.$ScorePayload<ExtArgs>
        fields: Prisma.ScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          findFirst: {
            args: Prisma.ScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          findMany: {
            args: Prisma.ScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          create: {
            args: Prisma.ScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          createMany: {
            args: Prisma.ScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          delete: {
            args: Prisma.ScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          update: {
            args: Prisma.ScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          deleteMany: {
            args: Prisma.ScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>[]
          }
          upsert: {
            args: Prisma.ScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePayload>
          }
          aggregate: {
            args: Prisma.ScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScore>
          }
          groupBy: {
            args: Prisma.ScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    class?: ClassOmit
    subject?: SubjectOmit
    questionBank?: QuestionBankOmit
    question?: QuestionOmit
    quiz?: QuizOmit
    quizQuestion?: QuizQuestionOmit
    studentQuiz?: StudentQuizOmit
    assignment?: AssignmentOmit
    studentAssignment?: StudentAssignmentOmit
    weeklySchedule?: WeeklyScheduleOmit
    studyTimetable?: StudyTimetableOmit
    score?: ScoreOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assignments: number
    teacher_classes: number
    questionBanks: number
    scores: number
    studentAssignments: number
    studentQuizzes: number
    studyTimetables: number
    weeklySchedules: number
    student_classes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | UserCountOutputTypeCountAssignmentsArgs
    teacher_classes?: boolean | UserCountOutputTypeCountTeacher_classesArgs
    questionBanks?: boolean | UserCountOutputTypeCountQuestionBanksArgs
    scores?: boolean | UserCountOutputTypeCountScoresArgs
    studentAssignments?: boolean | UserCountOutputTypeCountStudentAssignmentsArgs
    studentQuizzes?: boolean | UserCountOutputTypeCountStudentQuizzesArgs
    studyTimetables?: boolean | UserCountOutputTypeCountStudyTimetablesArgs
    weeklySchedules?: boolean | UserCountOutputTypeCountWeeklySchedulesArgs
    student_classes?: boolean | UserCountOutputTypeCountStudent_classesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeacher_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionBanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentQuizWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudyTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyTimetableWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWeeklySchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudent_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    assignments: number
    questionBanks: number
    quizzes: number
    weeklySchedules: number
    students: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | ClassCountOutputTypeCountAssignmentsArgs
    questionBanks?: boolean | ClassCountOutputTypeCountQuestionBanksArgs
    quizzes?: boolean | ClassCountOutputTypeCountQuizzesArgs
    weeklySchedules?: boolean | ClassCountOutputTypeCountWeeklySchedulesArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountQuestionBanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountWeeklySchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    assignments: number
    questionBanks: number
    quizzes: number
    scores: number
    studyTimetables: number
    weeklySchedules: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | SubjectCountOutputTypeCountAssignmentsArgs
    questionBanks?: boolean | SubjectCountOutputTypeCountQuestionBanksArgs
    quizzes?: boolean | SubjectCountOutputTypeCountQuizzesArgs
    scores?: boolean | SubjectCountOutputTypeCountScoresArgs
    studyTimetables?: boolean | SubjectCountOutputTypeCountStudyTimetablesArgs
    weeklySchedules?: boolean | SubjectCountOutputTypeCountWeeklySchedulesArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountQuestionBanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountStudyTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyTimetableWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountWeeklySchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
  }


  /**
   * Count Type QuestionBankCountOutputType
   */

  export type QuestionBankCountOutputType = {
    questions: number
    quizzes: number
  }

  export type QuestionBankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuestionBankCountOutputTypeCountQuestionsArgs
    quizzes?: boolean | QuestionBankCountOutputTypeCountQuizzesArgs
  }

  // Custom InputTypes
  /**
   * QuestionBankCountOutputType without action
   */
  export type QuestionBankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBankCountOutputType
     */
    select?: QuestionBankCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionBankCountOutputType without action
   */
  export type QuestionBankCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * QuestionBankCountOutputType without action
   */
  export type QuestionBankCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    quizQuestions: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizQuestions?: boolean | QuestionCountOutputTypeCountQuizQuestionsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountQuizQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizQuestionWhereInput
  }


  /**
   * Count Type QuizCountOutputType
   */

  export type QuizCountOutputType = {
    quizQuestions: number
    studentQuizzes: number
  }

  export type QuizCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizQuestions?: boolean | QuizCountOutputTypeCountQuizQuestionsArgs
    studentQuizzes?: boolean | QuizCountOutputTypeCountStudentQuizzesArgs
  }

  // Custom InputTypes
  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizCountOutputType
     */
    select?: QuizCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountQuizQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizQuestionWhereInput
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountStudentQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentQuizWhereInput
  }


  /**
   * Count Type AssignmentCountOutputType
   */

  export type AssignmentCountOutputType = {
    studentAssignments: number
  }

  export type AssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentAssignments?: boolean | AssignmentCountOutputTypeCountStudentAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     */
    select?: AssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountStudentAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAssignmentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    roll_no: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    roll_no: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    roll_no: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    roll_no?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    roll_no?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    roll_no?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    teacher_classes?: boolean | User$teacher_classesArgs<ExtArgs>
    questionBanks?: boolean | User$questionBanksArgs<ExtArgs>
    scores?: boolean | User$scoresArgs<ExtArgs>
    studentAssignments?: boolean | User$studentAssignmentsArgs<ExtArgs>
    studentQuizzes?: boolean | User$studentQuizzesArgs<ExtArgs>
    studyTimetables?: boolean | User$studyTimetablesArgs<ExtArgs>
    weeklySchedules?: boolean | User$weeklySchedulesArgs<ExtArgs>
    student_classes?: boolean | User$student_classesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    roll_no?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "roll_no" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | User$assignmentsArgs<ExtArgs>
    teacher_classes?: boolean | User$teacher_classesArgs<ExtArgs>
    questionBanks?: boolean | User$questionBanksArgs<ExtArgs>
    scores?: boolean | User$scoresArgs<ExtArgs>
    studentAssignments?: boolean | User$studentAssignmentsArgs<ExtArgs>
    studentQuizzes?: boolean | User$studentQuizzesArgs<ExtArgs>
    studyTimetables?: boolean | User$studyTimetablesArgs<ExtArgs>
    weeklySchedules?: boolean | User$weeklySchedulesArgs<ExtArgs>
    student_classes?: boolean | User$student_classesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      teacher_classes: Prisma.$ClassPayload<ExtArgs>[]
      questionBanks: Prisma.$QuestionBankPayload<ExtArgs>[]
      scores: Prisma.$ScorePayload<ExtArgs>[]
      studentAssignments: Prisma.$StudentAssignmentPayload<ExtArgs>[]
      studentQuizzes: Prisma.$StudentQuizPayload<ExtArgs>[]
      studyTimetables: Prisma.$StudyTimetablePayload<ExtArgs>[]
      weeklySchedules: Prisma.$WeeklySchedulePayload<ExtArgs>[]
      student_classes: Prisma.$ClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      roll_no: string
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends User$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacher_classes<T extends User$teacher_classesArgs<ExtArgs> = {}>(args?: Subset<T, User$teacher_classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionBanks<T extends User$questionBanksArgs<ExtArgs> = {}>(args?: Subset<T, User$questionBanksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scores<T extends User$scoresArgs<ExtArgs> = {}>(args?: Subset<T, User$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAssignments<T extends User$studentAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$studentAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentQuizzes<T extends User$studentQuizzesArgs<ExtArgs> = {}>(args?: Subset<T, User$studentQuizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studyTimetables<T extends User$studyTimetablesArgs<ExtArgs> = {}>(args?: Subset<T, User$studyTimetablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weeklySchedules<T extends User$weeklySchedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$weeklySchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    student_classes<T extends User$student_classesArgs<ExtArgs> = {}>(args?: Subset<T, User$student_classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly roll_no: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.assignments
   */
  export type User$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * User.teacher_classes
   */
  export type User$teacher_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User.questionBanks
   */
  export type User$questionBanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * User.scores
   */
  export type User$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * User.studentAssignments
   */
  export type User$studentAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    where?: StudentAssignmentWhereInput
    orderBy?: StudentAssignmentOrderByWithRelationInput | StudentAssignmentOrderByWithRelationInput[]
    cursor?: StudentAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAssignmentScalarFieldEnum | StudentAssignmentScalarFieldEnum[]
  }

  /**
   * User.studentQuizzes
   */
  export type User$studentQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    where?: StudentQuizWhereInput
    orderBy?: StudentQuizOrderByWithRelationInput | StudentQuizOrderByWithRelationInput[]
    cursor?: StudentQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentQuizScalarFieldEnum | StudentQuizScalarFieldEnum[]
  }

  /**
   * User.studyTimetables
   */
  export type User$studyTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    where?: StudyTimetableWhereInput
    orderBy?: StudyTimetableOrderByWithRelationInput | StudyTimetableOrderByWithRelationInput[]
    cursor?: StudyTimetableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyTimetableScalarFieldEnum | StudyTimetableScalarFieldEnum[]
  }

  /**
   * User.weeklySchedules
   */
  export type User$weeklySchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    cursor?: WeeklyScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }

  /**
   * User.student_classes
   */
  export type User$student_classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number | null
    class_teacher_id: number | null
  }

  export type ClassSumAggregateOutputType = {
    id: number | null
    class_teacher_id: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: number | null
    name: string | null
    class_teacher_id: number | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number | null
    name: string | null
    class_teacher_id: number | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    class_teacher_id: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
    class_teacher_id?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
    class_teacher_id?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    class_teacher_id?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    class_teacher_id?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    class_teacher_id?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: number
    name: string
    class_teacher_id: number | null
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
    assignments?: boolean | Class$assignmentsArgs<ExtArgs>
    teacher?: boolean | Class$teacherArgs<ExtArgs>
    questionBanks?: boolean | Class$questionBanksArgs<ExtArgs>
    quizzes?: boolean | Class$quizzesArgs<ExtArgs>
    weeklySchedules?: boolean | Class$weeklySchedulesArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    class_teacher_id?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "class_teacher_id", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | Class$assignmentsArgs<ExtArgs>
    teacher?: boolean | Class$teacherArgs<ExtArgs>
    questionBanks?: boolean | Class$questionBanksArgs<ExtArgs>
    quizzes?: boolean | Class$quizzesArgs<ExtArgs>
    weeklySchedules?: boolean | Class$weeklySchedulesArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | Class$teacherArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      teacher: Prisma.$UserPayload<ExtArgs> | null
      questionBanks: Prisma.$QuestionBankPayload<ExtArgs>[]
      quizzes: Prisma.$QuizPayload<ExtArgs>[]
      weeklySchedules: Prisma.$WeeklySchedulePayload<ExtArgs>[]
      students: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      class_teacher_id: number | null
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends Class$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacher<T extends Class$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Class$teacherArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    questionBanks<T extends Class$questionBanksArgs<ExtArgs> = {}>(args?: Subset<T, Class$questionBanksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quizzes<T extends Class$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, Class$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weeklySchedules<T extends Class$weeklySchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Class$weeklySchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'Int'>
    readonly name: FieldRef<"Class", 'String'>
    readonly class_teacher_id: FieldRef<"Class", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.assignments
   */
  export type Class$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Class.teacher
   */
  export type Class$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Class.questionBanks
   */
  export type Class$questionBanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * Class.quizzes
   */
  export type Class$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    cursor?: QuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Class.weeklySchedules
   */
  export type Class$weeklySchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    cursor?: WeeklyScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    name: string
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    assignments?: boolean | Subject$assignmentsArgs<ExtArgs>
    questionBanks?: boolean | Subject$questionBanksArgs<ExtArgs>
    quizzes?: boolean | Subject$quizzesArgs<ExtArgs>
    scores?: boolean | Subject$scoresArgs<ExtArgs>
    studyTimetables?: boolean | Subject$studyTimetablesArgs<ExtArgs>
    weeklySchedules?: boolean | Subject$weeklySchedulesArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | Subject$assignmentsArgs<ExtArgs>
    questionBanks?: boolean | Subject$questionBanksArgs<ExtArgs>
    quizzes?: boolean | Subject$quizzesArgs<ExtArgs>
    scores?: boolean | Subject$scoresArgs<ExtArgs>
    studyTimetables?: boolean | Subject$studyTimetablesArgs<ExtArgs>
    weeklySchedules?: boolean | Subject$weeklySchedulesArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      questionBanks: Prisma.$QuestionBankPayload<ExtArgs>[]
      quizzes: Prisma.$QuizPayload<ExtArgs>[]
      scores: Prisma.$ScorePayload<ExtArgs>[]
      studyTimetables: Prisma.$StudyTimetablePayload<ExtArgs>[]
      weeklySchedules: Prisma.$WeeklySchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends Subject$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionBanks<T extends Subject$questionBanksArgs<ExtArgs> = {}>(args?: Subset<T, Subject$questionBanksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quizzes<T extends Subject$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, Subject$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scores<T extends Subject$scoresArgs<ExtArgs> = {}>(args?: Subset<T, Subject$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studyTimetables<T extends Subject$studyTimetablesArgs<ExtArgs> = {}>(args?: Subset<T, Subject$studyTimetablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weeklySchedules<T extends Subject$weeklySchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Subject$weeklySchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly name: FieldRef<"Subject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject updateManyAndReturn
   */
  export type SubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.assignments
   */
  export type Subject$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Subject.questionBanks
   */
  export type Subject$questionBanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * Subject.quizzes
   */
  export type Subject$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    cursor?: QuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Subject.scores
   */
  export type Subject$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    cursor?: ScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Subject.studyTimetables
   */
  export type Subject$studyTimetablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    where?: StudyTimetableWhereInput
    orderBy?: StudyTimetableOrderByWithRelationInput | StudyTimetableOrderByWithRelationInput[]
    cursor?: StudyTimetableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyTimetableScalarFieldEnum | StudyTimetableScalarFieldEnum[]
  }

  /**
   * Subject.weeklySchedules
   */
  export type Subject$weeklySchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    cursor?: WeeklyScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model QuestionBank
   */

  export type AggregateQuestionBank = {
    _count: QuestionBankCountAggregateOutputType | null
    _avg: QuestionBankAvgAggregateOutputType | null
    _sum: QuestionBankSumAggregateOutputType | null
    _min: QuestionBankMinAggregateOutputType | null
    _max: QuestionBankMaxAggregateOutputType | null
  }

  export type QuestionBankAvgAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type QuestionBankSumAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type QuestionBankMinAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type QuestionBankMaxAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    subject_id: number | null
    class_id: number | null
  }

  export type QuestionBankCountAggregateOutputType = {
    id: number
    teacher_id: number
    subject_id: number
    class_id: number
    _all: number
  }


  export type QuestionBankAvgAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type QuestionBankSumAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type QuestionBankMinAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type QuestionBankMaxAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
  }

  export type QuestionBankCountAggregateInputType = {
    id?: true
    teacher_id?: true
    subject_id?: true
    class_id?: true
    _all?: true
  }

  export type QuestionBankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionBank to aggregate.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionBanks
    **/
    _count?: true | QuestionBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionBankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionBankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionBankMaxAggregateInputType
  }

  export type GetQuestionBankAggregateType<T extends QuestionBankAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionBank[P]>
      : GetScalarType<T[P], AggregateQuestionBank[P]>
  }




  export type QuestionBankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithAggregationInput | QuestionBankOrderByWithAggregationInput[]
    by: QuestionBankScalarFieldEnum[] | QuestionBankScalarFieldEnum
    having?: QuestionBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionBankCountAggregateInputType | true
    _avg?: QuestionBankAvgAggregateInputType
    _sum?: QuestionBankSumAggregateInputType
    _min?: QuestionBankMinAggregateInputType
    _max?: QuestionBankMaxAggregateInputType
  }

  export type QuestionBankGroupByOutputType = {
    id: number
    teacher_id: number
    subject_id: number
    class_id: number
    _count: QuestionBankCountAggregateOutputType | null
    _avg: QuestionBankAvgAggregateOutputType | null
    _sum: QuestionBankSumAggregateOutputType | null
    _min: QuestionBankMinAggregateOutputType | null
    _max: QuestionBankMaxAggregateOutputType | null
  }

  type GetQuestionBankGroupByPayload<T extends QuestionBankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionBankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionBankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionBankGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionBankGroupByOutputType[P]>
        }
      >
    >


  export type QuestionBankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
    questions?: boolean | QuestionBank$questionsArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    quizzes?: boolean | QuestionBank$quizzesArgs<ExtArgs>
    _count?: boolean | QuestionBankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionBank"]>

  export type QuestionBankSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionBank"]>

  export type QuestionBankSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionBank"]>

  export type QuestionBankSelectScalar = {
    id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class_id?: boolean
  }

  export type QuestionBankOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teacher_id" | "subject_id" | "class_id", ExtArgs["result"]["questionBank"]>
  export type QuestionBankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuestionBank$questionsArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    quizzes?: boolean | QuestionBank$quizzesArgs<ExtArgs>
    _count?: boolean | QuestionBankCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionBankIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type QuestionBankIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $QuestionBankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionBank"
    objects: {
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      class: Prisma.$ClassPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs>
      quizzes: Prisma.$QuizPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      teacher_id: number
      subject_id: number
      class_id: number
    }, ExtArgs["result"]["questionBank"]>
    composites: {}
  }

  type QuestionBankGetPayload<S extends boolean | null | undefined | QuestionBankDefaultArgs> = $Result.GetResult<Prisma.$QuestionBankPayload, S>

  type QuestionBankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionBankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionBankCountAggregateInputType | true
    }

  export interface QuestionBankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionBank'], meta: { name: 'QuestionBank' } }
    /**
     * Find zero or one QuestionBank that matches the filter.
     * @param {QuestionBankFindUniqueArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionBankFindUniqueArgs>(args: SelectSubset<T, QuestionBankFindUniqueArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionBank that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionBankFindUniqueOrThrowArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionBankFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionBankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankFindFirstArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionBankFindFirstArgs>(args?: SelectSubset<T, QuestionBankFindFirstArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionBank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankFindFirstOrThrowArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionBankFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionBankFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionBanks
     * const questionBanks = await prisma.questionBank.findMany()
     * 
     * // Get first 10 QuestionBanks
     * const questionBanks = await prisma.questionBank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionBankWithIdOnly = await prisma.questionBank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionBankFindManyArgs>(args?: SelectSubset<T, QuestionBankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionBank.
     * @param {QuestionBankCreateArgs} args - Arguments to create a QuestionBank.
     * @example
     * // Create one QuestionBank
     * const QuestionBank = await prisma.questionBank.create({
     *   data: {
     *     // ... data to create a QuestionBank
     *   }
     * })
     * 
     */
    create<T extends QuestionBankCreateArgs>(args: SelectSubset<T, QuestionBankCreateArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionBanks.
     * @param {QuestionBankCreateManyArgs} args - Arguments to create many QuestionBanks.
     * @example
     * // Create many QuestionBanks
     * const questionBank = await prisma.questionBank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionBankCreateManyArgs>(args?: SelectSubset<T, QuestionBankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionBanks and returns the data saved in the database.
     * @param {QuestionBankCreateManyAndReturnArgs} args - Arguments to create many QuestionBanks.
     * @example
     * // Create many QuestionBanks
     * const questionBank = await prisma.questionBank.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionBanks and only return the `id`
     * const questionBankWithIdOnly = await prisma.questionBank.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionBankCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionBankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionBank.
     * @param {QuestionBankDeleteArgs} args - Arguments to delete one QuestionBank.
     * @example
     * // Delete one QuestionBank
     * const QuestionBank = await prisma.questionBank.delete({
     *   where: {
     *     // ... filter to delete one QuestionBank
     *   }
     * })
     * 
     */
    delete<T extends QuestionBankDeleteArgs>(args: SelectSubset<T, QuestionBankDeleteArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionBank.
     * @param {QuestionBankUpdateArgs} args - Arguments to update one QuestionBank.
     * @example
     * // Update one QuestionBank
     * const questionBank = await prisma.questionBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionBankUpdateArgs>(args: SelectSubset<T, QuestionBankUpdateArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionBanks.
     * @param {QuestionBankDeleteManyArgs} args - Arguments to filter QuestionBanks to delete.
     * @example
     * // Delete a few QuestionBanks
     * const { count } = await prisma.questionBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionBankDeleteManyArgs>(args?: SelectSubset<T, QuestionBankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionBanks
     * const questionBank = await prisma.questionBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionBankUpdateManyArgs>(args: SelectSubset<T, QuestionBankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionBanks and returns the data updated in the database.
     * @param {QuestionBankUpdateManyAndReturnArgs} args - Arguments to update many QuestionBanks.
     * @example
     * // Update many QuestionBanks
     * const questionBank = await prisma.questionBank.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionBanks and only return the `id`
     * const questionBankWithIdOnly = await prisma.questionBank.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionBankUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionBankUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionBank.
     * @param {QuestionBankUpsertArgs} args - Arguments to update or create a QuestionBank.
     * @example
     * // Update or create a QuestionBank
     * const questionBank = await prisma.questionBank.upsert({
     *   create: {
     *     // ... data to create a QuestionBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionBank we want to update
     *   }
     * })
     */
    upsert<T extends QuestionBankUpsertArgs>(args: SelectSubset<T, QuestionBankUpsertArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankCountArgs} args - Arguments to filter QuestionBanks to count.
     * @example
     * // Count the number of QuestionBanks
     * const count = await prisma.questionBank.count({
     *   where: {
     *     // ... the filter for the QuestionBanks we want to count
     *   }
     * })
    **/
    count<T extends QuestionBankCountArgs>(
      args?: Subset<T, QuestionBankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionBankAggregateArgs>(args: Subset<T, QuestionBankAggregateArgs>): Prisma.PrismaPromise<GetQuestionBankAggregateType<T>>

    /**
     * Group by QuestionBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionBankGroupByArgs['orderBy'] }
        : { orderBy?: QuestionBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionBank model
   */
  readonly fields: QuestionBankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionBankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends QuestionBank$questionsArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBank$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quizzes<T extends QuestionBank$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBank$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionBank model
   */
  interface QuestionBankFieldRefs {
    readonly id: FieldRef<"QuestionBank", 'Int'>
    readonly teacher_id: FieldRef<"QuestionBank", 'Int'>
    readonly subject_id: FieldRef<"QuestionBank", 'Int'>
    readonly class_id: FieldRef<"QuestionBank", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuestionBank findUnique
   */
  export type QuestionBankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank findUniqueOrThrow
   */
  export type QuestionBankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank findFirst
   */
  export type QuestionBankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionBanks.
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionBanks.
     */
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionBank findFirstOrThrow
   */
  export type QuestionBankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionBanks.
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionBanks.
     */
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionBank findMany
   */
  export type QuestionBankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBanks to fetch.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionBanks.
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionBank create
   */
  export type QuestionBankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionBank.
     */
    data: XOR<QuestionBankCreateInput, QuestionBankUncheckedCreateInput>
  }

  /**
   * QuestionBank createMany
   */
  export type QuestionBankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionBanks.
     */
    data: QuestionBankCreateManyInput | QuestionBankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionBank createManyAndReturn
   */
  export type QuestionBankCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionBanks.
     */
    data: QuestionBankCreateManyInput | QuestionBankCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionBank update
   */
  export type QuestionBankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionBank.
     */
    data: XOR<QuestionBankUpdateInput, QuestionBankUncheckedUpdateInput>
    /**
     * Choose, which QuestionBank to update.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank updateMany
   */
  export type QuestionBankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionBanks.
     */
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyInput>
    /**
     * Filter which QuestionBanks to update
     */
    where?: QuestionBankWhereInput
    /**
     * Limit how many QuestionBanks to update.
     */
    limit?: number
  }

  /**
   * QuestionBank updateManyAndReturn
   */
  export type QuestionBankUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * The data used to update QuestionBanks.
     */
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyInput>
    /**
     * Filter which QuestionBanks to update
     */
    where?: QuestionBankWhereInput
    /**
     * Limit how many QuestionBanks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionBank upsert
   */
  export type QuestionBankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionBank to update in case it exists.
     */
    where: QuestionBankWhereUniqueInput
    /**
     * In case the QuestionBank found by the `where` argument doesn't exist, create a new QuestionBank with this data.
     */
    create: XOR<QuestionBankCreateInput, QuestionBankUncheckedCreateInput>
    /**
     * In case the QuestionBank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionBankUpdateInput, QuestionBankUncheckedUpdateInput>
  }

  /**
   * QuestionBank delete
   */
  export type QuestionBankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter which QuestionBank to delete.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank deleteMany
   */
  export type QuestionBankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionBanks to delete
     */
    where?: QuestionBankWhereInput
    /**
     * Limit how many QuestionBanks to delete.
     */
    limit?: number
  }

  /**
   * QuestionBank.questions
   */
  export type QuestionBank$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * QuestionBank.quizzes
   */
  export type QuestionBank$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    cursor?: QuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * QuestionBank without action
   */
  export type QuestionBankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    question_bank_id: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    question_bank_id: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    content: string | null
    question_bank_id: number | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    content: string | null
    question_bank_id: number | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    content: number
    question_bank_id: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    question_bank_id?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    question_bank_id?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    content?: true
    question_bank_id?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    content?: true
    question_bank_id?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    content?: true
    question_bank_id?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    content: string
    question_bank_id: number
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    quizQuestions?: boolean | Question$quizQuestionsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    content?: boolean
    question_bank_id?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "question_bank_id", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    quizQuestions?: boolean | Question$quizQuestionsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      question_bank: Prisma.$QuestionBankPayload<ExtArgs>
      quizQuestions: Prisma.$QuizQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      question_bank_id: number
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question_bank<T extends QuestionBankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBankDefaultArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quizQuestions<T extends Question$quizQuestionsArgs<ExtArgs> = {}>(args?: Subset<T, Question$quizQuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'Int'>
    readonly content: FieldRef<"Question", 'String'>
    readonly question_bank_id: FieldRef<"Question", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.quizQuestions
   */
  export type Question$quizQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    where?: QuizQuestionWhereInput
    orderBy?: QuizQuestionOrderByWithRelationInput | QuizQuestionOrderByWithRelationInput[]
    cursor?: QuizQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizQuestionScalarFieldEnum | QuizQuestionScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Quiz
   */

  export type AggregateQuiz = {
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  export type QuizAvgAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizSumAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizMinAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizMaxAggregateOutputType = {
    id: number | null
    class_id: number | null
    subject_id: number | null
    question_bank_id: number | null
  }

  export type QuizCountAggregateOutputType = {
    id: number
    class_id: number
    subject_id: number
    question_bank_id: number
    _all: number
  }


  export type QuizAvgAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizSumAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizMinAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizMaxAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
  }

  export type QuizCountAggregateInputType = {
    id?: true
    class_id?: true
    subject_id?: true
    question_bank_id?: true
    _all?: true
  }

  export type QuizAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quiz to aggregate.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quizzes
    **/
    _count?: true | QuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizMaxAggregateInputType
  }

  export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz[P]>
      : GetScalarType<T[P], AggregateQuiz[P]>
  }




  export type QuizGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithAggregationInput | QuizOrderByWithAggregationInput[]
    by: QuizScalarFieldEnum[] | QuizScalarFieldEnum
    having?: QuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizCountAggregateInputType | true
    _avg?: QuizAvgAggregateInputType
    _sum?: QuizSumAggregateInputType
    _min?: QuizMinAggregateInputType
    _max?: QuizMaxAggregateInputType
  }

  export type QuizGroupByOutputType = {
    id: number
    class_id: number
    subject_id: number
    question_bank_id: number
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  type GetQuizGroupByPayload<T extends QuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizGroupByOutputType[P]>
            : GetScalarType<T[P], QuizGroupByOutputType[P]>
        }
      >
    >


  export type QuizSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    quizQuestions?: boolean | Quiz$quizQuestionsArgs<ExtArgs>
    studentQuizzes?: boolean | Quiz$studentQuizzesArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectScalar = {
    id?: boolean
    class_id?: boolean
    subject_id?: boolean
    question_bank_id?: boolean
  }

  export type QuizOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "class_id" | "subject_id" | "question_bank_id", ExtArgs["result"]["quiz"]>
  export type QuizInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    quizQuestions?: boolean | Quiz$quizQuestionsArgs<ExtArgs>
    studentQuizzes?: boolean | Quiz$studentQuizzesArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuizIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type QuizIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    question_bank?: boolean | QuestionBankDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $QuizPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quiz"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      question_bank: Prisma.$QuestionBankPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      quizQuestions: Prisma.$QuizQuestionPayload<ExtArgs>[]
      studentQuizzes: Prisma.$StudentQuizPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      class_id: number
      subject_id: number
      question_bank_id: number
    }, ExtArgs["result"]["quiz"]>
    composites: {}
  }

  type QuizGetPayload<S extends boolean | null | undefined | QuizDefaultArgs> = $Result.GetResult<Prisma.$QuizPayload, S>

  type QuizCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuizFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuizCountAggregateInputType | true
    }

  export interface QuizDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quiz'], meta: { name: 'Quiz' } }
    /**
     * Find zero or one Quiz that matches the filter.
     * @param {QuizFindUniqueArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuizFindUniqueArgs>(args: SelectSubset<T, QuizFindUniqueArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quiz that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuizFindUniqueOrThrowArgs>(args: SelectSubset<T, QuizFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuizFindFirstArgs>(args?: SelectSubset<T, QuizFindFirstArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quiz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuizFindFirstOrThrowArgs>(args?: SelectSubset<T, QuizFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quiz.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuizFindManyArgs>(args?: SelectSubset<T, QuizFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quiz.
     * @param {QuizCreateArgs} args - Arguments to create a Quiz.
     * @example
     * // Create one Quiz
     * const Quiz = await prisma.quiz.create({
     *   data: {
     *     // ... data to create a Quiz
     *   }
     * })
     * 
     */
    create<T extends QuizCreateArgs>(args: SelectSubset<T, QuizCreateArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quizzes.
     * @param {QuizCreateManyArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quiz = await prisma.quiz.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuizCreateManyArgs>(args?: SelectSubset<T, QuizCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quizzes and returns the data saved in the database.
     * @param {QuizCreateManyAndReturnArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quiz = await prisma.quiz.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quizzes and only return the `id`
     * const quizWithIdOnly = await prisma.quiz.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuizCreateManyAndReturnArgs>(args?: SelectSubset<T, QuizCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Quiz.
     * @param {QuizDeleteArgs} args - Arguments to delete one Quiz.
     * @example
     * // Delete one Quiz
     * const Quiz = await prisma.quiz.delete({
     *   where: {
     *     // ... filter to delete one Quiz
     *   }
     * })
     * 
     */
    delete<T extends QuizDeleteArgs>(args: SelectSubset<T, QuizDeleteArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quiz.
     * @param {QuizUpdateArgs} args - Arguments to update one Quiz.
     * @example
     * // Update one Quiz
     * const quiz = await prisma.quiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuizUpdateArgs>(args: SelectSubset<T, QuizUpdateArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quizzes.
     * @param {QuizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuizDeleteManyArgs>(args?: SelectSubset<T, QuizDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuizUpdateManyArgs>(args: SelectSubset<T, QuizUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes and returns the data updated in the database.
     * @param {QuizUpdateManyAndReturnArgs} args - Arguments to update many Quizzes.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quizzes and only return the `id`
     * const quizWithIdOnly = await prisma.quiz.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuizUpdateManyAndReturnArgs>(args: SelectSubset<T, QuizUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Quiz.
     * @param {QuizUpsertArgs} args - Arguments to update or create a Quiz.
     * @example
     * // Update or create a Quiz
     * const quiz = await prisma.quiz.upsert({
     *   create: {
     *     // ... data to create a Quiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz we want to update
     *   }
     * })
     */
    upsert<T extends QuizUpsertArgs>(args: SelectSubset<T, QuizUpsertArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quiz.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends QuizCountArgs>(
      args?: Subset<T, QuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAggregateArgs>(args: Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

    /**
     * Group by Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizGroupByArgs['orderBy'] }
        : { orderBy?: QuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quiz model
   */
  readonly fields: QuizFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuizClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question_bank<T extends QuestionBankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBankDefaultArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quizQuestions<T extends Quiz$quizQuestionsArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$quizQuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentQuizzes<T extends Quiz$studentQuizzesArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$studentQuizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quiz model
   */
  interface QuizFieldRefs {
    readonly id: FieldRef<"Quiz", 'Int'>
    readonly class_id: FieldRef<"Quiz", 'Int'>
    readonly subject_id: FieldRef<"Quiz", 'Int'>
    readonly question_bank_id: FieldRef<"Quiz", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Quiz findUnique
   */
  export type QuizFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findUniqueOrThrow
   */
  export type QuizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findFirst
   */
  export type QuizFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz findFirstOrThrow
   */
  export type QuizFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz findMany
   */
  export type QuizFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz create
   */
  export type QuizCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to create a Quiz.
     */
    data: XOR<QuizCreateInput, QuizUncheckedCreateInput>
  }

  /**
   * Quiz createMany
   */
  export type QuizCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quizzes.
     */
    data: QuizCreateManyInput | QuizCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quiz createManyAndReturn
   */
  export type QuizCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * The data used to create many Quizzes.
     */
    data: QuizCreateManyInput | QuizCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quiz update
   */
  export type QuizUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to update a Quiz.
     */
    data: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
    /**
     * Choose, which Quiz to update.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz updateMany
   */
  export type QuizUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quizzes.
     */
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyInput>
    /**
     * Filter which Quizzes to update
     */
    where?: QuizWhereInput
    /**
     * Limit how many Quizzes to update.
     */
    limit?: number
  }

  /**
   * Quiz updateManyAndReturn
   */
  export type QuizUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * The data used to update Quizzes.
     */
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyInput>
    /**
     * Filter which Quizzes to update
     */
    where?: QuizWhereInput
    /**
     * Limit how many Quizzes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quiz upsert
   */
  export type QuizUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The filter to search for the Quiz to update in case it exists.
     */
    where: QuizWhereUniqueInput
    /**
     * In case the Quiz found by the `where` argument doesn't exist, create a new Quiz with this data.
     */
    create: XOR<QuizCreateInput, QuizUncheckedCreateInput>
    /**
     * In case the Quiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
  }

  /**
   * Quiz delete
   */
  export type QuizDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter which Quiz to delete.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz deleteMany
   */
  export type QuizDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quizzes to delete
     */
    where?: QuizWhereInput
    /**
     * Limit how many Quizzes to delete.
     */
    limit?: number
  }

  /**
   * Quiz.quizQuestions
   */
  export type Quiz$quizQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    where?: QuizQuestionWhereInput
    orderBy?: QuizQuestionOrderByWithRelationInput | QuizQuestionOrderByWithRelationInput[]
    cursor?: QuizQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizQuestionScalarFieldEnum | QuizQuestionScalarFieldEnum[]
  }

  /**
   * Quiz.studentQuizzes
   */
  export type Quiz$studentQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    where?: StudentQuizWhereInput
    orderBy?: StudentQuizOrderByWithRelationInput | StudentQuizOrderByWithRelationInput[]
    cursor?: StudentQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentQuizScalarFieldEnum | StudentQuizScalarFieldEnum[]
  }

  /**
   * Quiz without action
   */
  export type QuizDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quiz
     */
    omit?: QuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
  }


  /**
   * Model QuizQuestion
   */

  export type AggregateQuizQuestion = {
    _count: QuizQuestionCountAggregateOutputType | null
    _avg: QuizQuestionAvgAggregateOutputType | null
    _sum: QuizQuestionSumAggregateOutputType | null
    _min: QuizQuestionMinAggregateOutputType | null
    _max: QuizQuestionMaxAggregateOutputType | null
  }

  export type QuizQuestionAvgAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type QuizQuestionSumAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type QuizQuestionMinAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type QuizQuestionMaxAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    question_id: number | null
  }

  export type QuizQuestionCountAggregateOutputType = {
    id: number
    quiz_id: number
    question_id: number
    _all: number
  }


  export type QuizQuestionAvgAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type QuizQuestionSumAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type QuizQuestionMinAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type QuizQuestionMaxAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
  }

  export type QuizQuestionCountAggregateInputType = {
    id?: true
    quiz_id?: true
    question_id?: true
    _all?: true
  }

  export type QuizQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizQuestion to aggregate.
     */
    where?: QuizQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizQuestions to fetch.
     */
    orderBy?: QuizQuestionOrderByWithRelationInput | QuizQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuizQuestions
    **/
    _count?: true | QuizQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizQuestionMaxAggregateInputType
  }

  export type GetQuizQuestionAggregateType<T extends QuizQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizQuestion[P]>
      : GetScalarType<T[P], AggregateQuizQuestion[P]>
  }




  export type QuizQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizQuestionWhereInput
    orderBy?: QuizQuestionOrderByWithAggregationInput | QuizQuestionOrderByWithAggregationInput[]
    by: QuizQuestionScalarFieldEnum[] | QuizQuestionScalarFieldEnum
    having?: QuizQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizQuestionCountAggregateInputType | true
    _avg?: QuizQuestionAvgAggregateInputType
    _sum?: QuizQuestionSumAggregateInputType
    _min?: QuizQuestionMinAggregateInputType
    _max?: QuizQuestionMaxAggregateInputType
  }

  export type QuizQuestionGroupByOutputType = {
    id: number
    quiz_id: number
    question_id: number
    _count: QuizQuestionCountAggregateOutputType | null
    _avg: QuizQuestionAvgAggregateOutputType | null
    _sum: QuizQuestionSumAggregateOutputType | null
    _min: QuizQuestionMinAggregateOutputType | null
    _max: QuizQuestionMaxAggregateOutputType | null
  }

  type GetQuizQuestionGroupByPayload<T extends QuizQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuizQuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuizQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizQuestion"]>

  export type QuizQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizQuestion"]>

  export type QuizQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizQuestion"]>

  export type QuizQuestionSelectScalar = {
    id?: boolean
    quiz_id?: boolean
    question_id?: boolean
  }

  export type QuizQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quiz_id" | "question_id", ExtArgs["result"]["quizQuestion"]>
  export type QuizQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }
  export type QuizQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }
  export type QuizQuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }

  export type $QuizQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuizQuestion"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      quiz: Prisma.$QuizPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quiz_id: number
      question_id: number
    }, ExtArgs["result"]["quizQuestion"]>
    composites: {}
  }

  type QuizQuestionGetPayload<S extends boolean | null | undefined | QuizQuestionDefaultArgs> = $Result.GetResult<Prisma.$QuizQuestionPayload, S>

  type QuizQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuizQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuizQuestionCountAggregateInputType | true
    }

  export interface QuizQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuizQuestion'], meta: { name: 'QuizQuestion' } }
    /**
     * Find zero or one QuizQuestion that matches the filter.
     * @param {QuizQuestionFindUniqueArgs} args - Arguments to find a QuizQuestion
     * @example
     * // Get one QuizQuestion
     * const quizQuestion = await prisma.quizQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuizQuestionFindUniqueArgs>(args: SelectSubset<T, QuizQuestionFindUniqueArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuizQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuizQuestionFindUniqueOrThrowArgs} args - Arguments to find a QuizQuestion
     * @example
     * // Get one QuizQuestion
     * const quizQuestion = await prisma.quizQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuizQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuizQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuizQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionFindFirstArgs} args - Arguments to find a QuizQuestion
     * @example
     * // Get one QuizQuestion
     * const quizQuestion = await prisma.quizQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuizQuestionFindFirstArgs>(args?: SelectSubset<T, QuizQuestionFindFirstArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuizQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionFindFirstOrThrowArgs} args - Arguments to find a QuizQuestion
     * @example
     * // Get one QuizQuestion
     * const quizQuestion = await prisma.quizQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuizQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuizQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuizQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuizQuestions
     * const quizQuestions = await prisma.quizQuestion.findMany()
     * 
     * // Get first 10 QuizQuestions
     * const quizQuestions = await prisma.quizQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizQuestionWithIdOnly = await prisma.quizQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuizQuestionFindManyArgs>(args?: SelectSubset<T, QuizQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuizQuestion.
     * @param {QuizQuestionCreateArgs} args - Arguments to create a QuizQuestion.
     * @example
     * // Create one QuizQuestion
     * const QuizQuestion = await prisma.quizQuestion.create({
     *   data: {
     *     // ... data to create a QuizQuestion
     *   }
     * })
     * 
     */
    create<T extends QuizQuestionCreateArgs>(args: SelectSubset<T, QuizQuestionCreateArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuizQuestions.
     * @param {QuizQuestionCreateManyArgs} args - Arguments to create many QuizQuestions.
     * @example
     * // Create many QuizQuestions
     * const quizQuestion = await prisma.quizQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuizQuestionCreateManyArgs>(args?: SelectSubset<T, QuizQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuizQuestions and returns the data saved in the database.
     * @param {QuizQuestionCreateManyAndReturnArgs} args - Arguments to create many QuizQuestions.
     * @example
     * // Create many QuizQuestions
     * const quizQuestion = await prisma.quizQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuizQuestions and only return the `id`
     * const quizQuestionWithIdOnly = await prisma.quizQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuizQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuizQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuizQuestion.
     * @param {QuizQuestionDeleteArgs} args - Arguments to delete one QuizQuestion.
     * @example
     * // Delete one QuizQuestion
     * const QuizQuestion = await prisma.quizQuestion.delete({
     *   where: {
     *     // ... filter to delete one QuizQuestion
     *   }
     * })
     * 
     */
    delete<T extends QuizQuestionDeleteArgs>(args: SelectSubset<T, QuizQuestionDeleteArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuizQuestion.
     * @param {QuizQuestionUpdateArgs} args - Arguments to update one QuizQuestion.
     * @example
     * // Update one QuizQuestion
     * const quizQuestion = await prisma.quizQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuizQuestionUpdateArgs>(args: SelectSubset<T, QuizQuestionUpdateArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuizQuestions.
     * @param {QuizQuestionDeleteManyArgs} args - Arguments to filter QuizQuestions to delete.
     * @example
     * // Delete a few QuizQuestions
     * const { count } = await prisma.quizQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuizQuestionDeleteManyArgs>(args?: SelectSubset<T, QuizQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuizQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuizQuestions
     * const quizQuestion = await prisma.quizQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuizQuestionUpdateManyArgs>(args: SelectSubset<T, QuizQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuizQuestions and returns the data updated in the database.
     * @param {QuizQuestionUpdateManyAndReturnArgs} args - Arguments to update many QuizQuestions.
     * @example
     * // Update many QuizQuestions
     * const quizQuestion = await prisma.quizQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuizQuestions and only return the `id`
     * const quizQuestionWithIdOnly = await prisma.quizQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuizQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuizQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuizQuestion.
     * @param {QuizQuestionUpsertArgs} args - Arguments to update or create a QuizQuestion.
     * @example
     * // Update or create a QuizQuestion
     * const quizQuestion = await prisma.quizQuestion.upsert({
     *   create: {
     *     // ... data to create a QuizQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuizQuestion we want to update
     *   }
     * })
     */
    upsert<T extends QuizQuestionUpsertArgs>(args: SelectSubset<T, QuizQuestionUpsertArgs<ExtArgs>>): Prisma__QuizQuestionClient<$Result.GetResult<Prisma.$QuizQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuizQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionCountArgs} args - Arguments to filter QuizQuestions to count.
     * @example
     * // Count the number of QuizQuestions
     * const count = await prisma.quizQuestion.count({
     *   where: {
     *     // ... the filter for the QuizQuestions we want to count
     *   }
     * })
    **/
    count<T extends QuizQuestionCountArgs>(
      args?: Subset<T, QuizQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuizQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizQuestionAggregateArgs>(args: Subset<T, QuizQuestionAggregateArgs>): Prisma.PrismaPromise<GetQuizQuestionAggregateType<T>>

    /**
     * Group by QuizQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizQuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuizQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuizQuestion model
   */
  readonly fields: QuizQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuizQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuizQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quiz<T extends QuizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizDefaultArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuizQuestion model
   */
  interface QuizQuestionFieldRefs {
    readonly id: FieldRef<"QuizQuestion", 'Int'>
    readonly quiz_id: FieldRef<"QuizQuestion", 'Int'>
    readonly question_id: FieldRef<"QuizQuestion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuizQuestion findUnique
   */
  export type QuizQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * Filter, which QuizQuestion to fetch.
     */
    where: QuizQuestionWhereUniqueInput
  }

  /**
   * QuizQuestion findUniqueOrThrow
   */
  export type QuizQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * Filter, which QuizQuestion to fetch.
     */
    where: QuizQuestionWhereUniqueInput
  }

  /**
   * QuizQuestion findFirst
   */
  export type QuizQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * Filter, which QuizQuestion to fetch.
     */
    where?: QuizQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizQuestions to fetch.
     */
    orderBy?: QuizQuestionOrderByWithRelationInput | QuizQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizQuestions.
     */
    cursor?: QuizQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizQuestions.
     */
    distinct?: QuizQuestionScalarFieldEnum | QuizQuestionScalarFieldEnum[]
  }

  /**
   * QuizQuestion findFirstOrThrow
   */
  export type QuizQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * Filter, which QuizQuestion to fetch.
     */
    where?: QuizQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizQuestions to fetch.
     */
    orderBy?: QuizQuestionOrderByWithRelationInput | QuizQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizQuestions.
     */
    cursor?: QuizQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizQuestions.
     */
    distinct?: QuizQuestionScalarFieldEnum | QuizQuestionScalarFieldEnum[]
  }

  /**
   * QuizQuestion findMany
   */
  export type QuizQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * Filter, which QuizQuestions to fetch.
     */
    where?: QuizQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizQuestions to fetch.
     */
    orderBy?: QuizQuestionOrderByWithRelationInput | QuizQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuizQuestions.
     */
    cursor?: QuizQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizQuestions.
     */
    skip?: number
    distinct?: QuizQuestionScalarFieldEnum | QuizQuestionScalarFieldEnum[]
  }

  /**
   * QuizQuestion create
   */
  export type QuizQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a QuizQuestion.
     */
    data: XOR<QuizQuestionCreateInput, QuizQuestionUncheckedCreateInput>
  }

  /**
   * QuizQuestion createMany
   */
  export type QuizQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuizQuestions.
     */
    data: QuizQuestionCreateManyInput | QuizQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuizQuestion createManyAndReturn
   */
  export type QuizQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many QuizQuestions.
     */
    data: QuizQuestionCreateManyInput | QuizQuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuizQuestion update
   */
  export type QuizQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a QuizQuestion.
     */
    data: XOR<QuizQuestionUpdateInput, QuizQuestionUncheckedUpdateInput>
    /**
     * Choose, which QuizQuestion to update.
     */
    where: QuizQuestionWhereUniqueInput
  }

  /**
   * QuizQuestion updateMany
   */
  export type QuizQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuizQuestions.
     */
    data: XOR<QuizQuestionUpdateManyMutationInput, QuizQuestionUncheckedUpdateManyInput>
    /**
     * Filter which QuizQuestions to update
     */
    where?: QuizQuestionWhereInput
    /**
     * Limit how many QuizQuestions to update.
     */
    limit?: number
  }

  /**
   * QuizQuestion updateManyAndReturn
   */
  export type QuizQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * The data used to update QuizQuestions.
     */
    data: XOR<QuizQuestionUpdateManyMutationInput, QuizQuestionUncheckedUpdateManyInput>
    /**
     * Filter which QuizQuestions to update
     */
    where?: QuizQuestionWhereInput
    /**
     * Limit how many QuizQuestions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuizQuestion upsert
   */
  export type QuizQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the QuizQuestion to update in case it exists.
     */
    where: QuizQuestionWhereUniqueInput
    /**
     * In case the QuizQuestion found by the `where` argument doesn't exist, create a new QuizQuestion with this data.
     */
    create: XOR<QuizQuestionCreateInput, QuizQuestionUncheckedCreateInput>
    /**
     * In case the QuizQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizQuestionUpdateInput, QuizQuestionUncheckedUpdateInput>
  }

  /**
   * QuizQuestion delete
   */
  export type QuizQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
    /**
     * Filter which QuizQuestion to delete.
     */
    where: QuizQuestionWhereUniqueInput
  }

  /**
   * QuizQuestion deleteMany
   */
  export type QuizQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizQuestions to delete
     */
    where?: QuizQuestionWhereInput
    /**
     * Limit how many QuizQuestions to delete.
     */
    limit?: number
  }

  /**
   * QuizQuestion without action
   */
  export type QuizQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizQuestion
     */
    select?: QuizQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuizQuestion
     */
    omit?: QuizQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizQuestionInclude<ExtArgs> | null
  }


  /**
   * Model StudentQuiz
   */

  export type AggregateStudentQuiz = {
    _count: StudentQuizCountAggregateOutputType | null
    _avg: StudentQuizAvgAggregateOutputType | null
    _sum: StudentQuizSumAggregateOutputType | null
    _min: StudentQuizMinAggregateOutputType | null
    _max: StudentQuizMaxAggregateOutputType | null
  }

  export type StudentQuizAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type StudentQuizSumAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type StudentQuizMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type StudentQuizMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    quiz_id: number | null
  }

  export type StudentQuizCountAggregateOutputType = {
    id: number
    student_id: number
    quiz_id: number
    _all: number
  }


  export type StudentQuizAvgAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type StudentQuizSumAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type StudentQuizMinAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type StudentQuizMaxAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
  }

  export type StudentQuizCountAggregateInputType = {
    id?: true
    student_id?: true
    quiz_id?: true
    _all?: true
  }

  export type StudentQuizAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentQuiz to aggregate.
     */
    where?: StudentQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentQuizs to fetch.
     */
    orderBy?: StudentQuizOrderByWithRelationInput | StudentQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentQuizs
    **/
    _count?: true | StudentQuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentQuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentQuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentQuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentQuizMaxAggregateInputType
  }

  export type GetStudentQuizAggregateType<T extends StudentQuizAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentQuiz[P]>
      : GetScalarType<T[P], AggregateStudentQuiz[P]>
  }




  export type StudentQuizGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentQuizWhereInput
    orderBy?: StudentQuizOrderByWithAggregationInput | StudentQuizOrderByWithAggregationInput[]
    by: StudentQuizScalarFieldEnum[] | StudentQuizScalarFieldEnum
    having?: StudentQuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentQuizCountAggregateInputType | true
    _avg?: StudentQuizAvgAggregateInputType
    _sum?: StudentQuizSumAggregateInputType
    _min?: StudentQuizMinAggregateInputType
    _max?: StudentQuizMaxAggregateInputType
  }

  export type StudentQuizGroupByOutputType = {
    id: number
    student_id: number
    quiz_id: number
    _count: StudentQuizCountAggregateOutputType | null
    _avg: StudentQuizAvgAggregateOutputType | null
    _sum: StudentQuizSumAggregateOutputType | null
    _min: StudentQuizMinAggregateOutputType | null
    _max: StudentQuizMaxAggregateOutputType | null
  }

  type GetStudentQuizGroupByPayload<T extends StudentQuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentQuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentQuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentQuizGroupByOutputType[P]>
            : GetScalarType<T[P], StudentQuizGroupByOutputType[P]>
        }
      >
    >


  export type StudentQuizSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentQuiz"]>

  export type StudentQuizSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentQuiz"]>

  export type StudentQuizSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentQuiz"]>

  export type StudentQuizSelectScalar = {
    id?: boolean
    student_id?: boolean
    quiz_id?: boolean
  }

  export type StudentQuizOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "quiz_id", ExtArgs["result"]["studentQuiz"]>
  export type StudentQuizInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentQuizIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentQuizIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentQuizPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentQuiz"
    objects: {
      quiz: Prisma.$QuizPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      quiz_id: number
    }, ExtArgs["result"]["studentQuiz"]>
    composites: {}
  }

  type StudentQuizGetPayload<S extends boolean | null | undefined | StudentQuizDefaultArgs> = $Result.GetResult<Prisma.$StudentQuizPayload, S>

  type StudentQuizCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentQuizFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentQuizCountAggregateInputType | true
    }

  export interface StudentQuizDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentQuiz'], meta: { name: 'StudentQuiz' } }
    /**
     * Find zero or one StudentQuiz that matches the filter.
     * @param {StudentQuizFindUniqueArgs} args - Arguments to find a StudentQuiz
     * @example
     * // Get one StudentQuiz
     * const studentQuiz = await prisma.studentQuiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentQuizFindUniqueArgs>(args: SelectSubset<T, StudentQuizFindUniqueArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentQuiz that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentQuizFindUniqueOrThrowArgs} args - Arguments to find a StudentQuiz
     * @example
     * // Get one StudentQuiz
     * const studentQuiz = await prisma.studentQuiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentQuizFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentQuizFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentQuiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizFindFirstArgs} args - Arguments to find a StudentQuiz
     * @example
     * // Get one StudentQuiz
     * const studentQuiz = await prisma.studentQuiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentQuizFindFirstArgs>(args?: SelectSubset<T, StudentQuizFindFirstArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentQuiz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizFindFirstOrThrowArgs} args - Arguments to find a StudentQuiz
     * @example
     * // Get one StudentQuiz
     * const studentQuiz = await prisma.studentQuiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentQuizFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentQuizFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentQuizs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentQuizs
     * const studentQuizs = await prisma.studentQuiz.findMany()
     * 
     * // Get first 10 StudentQuizs
     * const studentQuizs = await prisma.studentQuiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentQuizWithIdOnly = await prisma.studentQuiz.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentQuizFindManyArgs>(args?: SelectSubset<T, StudentQuizFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentQuiz.
     * @param {StudentQuizCreateArgs} args - Arguments to create a StudentQuiz.
     * @example
     * // Create one StudentQuiz
     * const StudentQuiz = await prisma.studentQuiz.create({
     *   data: {
     *     // ... data to create a StudentQuiz
     *   }
     * })
     * 
     */
    create<T extends StudentQuizCreateArgs>(args: SelectSubset<T, StudentQuizCreateArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentQuizs.
     * @param {StudentQuizCreateManyArgs} args - Arguments to create many StudentQuizs.
     * @example
     * // Create many StudentQuizs
     * const studentQuiz = await prisma.studentQuiz.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentQuizCreateManyArgs>(args?: SelectSubset<T, StudentQuizCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentQuizs and returns the data saved in the database.
     * @param {StudentQuizCreateManyAndReturnArgs} args - Arguments to create many StudentQuizs.
     * @example
     * // Create many StudentQuizs
     * const studentQuiz = await prisma.studentQuiz.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentQuizs and only return the `id`
     * const studentQuizWithIdOnly = await prisma.studentQuiz.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentQuizCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentQuizCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentQuiz.
     * @param {StudentQuizDeleteArgs} args - Arguments to delete one StudentQuiz.
     * @example
     * // Delete one StudentQuiz
     * const StudentQuiz = await prisma.studentQuiz.delete({
     *   where: {
     *     // ... filter to delete one StudentQuiz
     *   }
     * })
     * 
     */
    delete<T extends StudentQuizDeleteArgs>(args: SelectSubset<T, StudentQuizDeleteArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentQuiz.
     * @param {StudentQuizUpdateArgs} args - Arguments to update one StudentQuiz.
     * @example
     * // Update one StudentQuiz
     * const studentQuiz = await prisma.studentQuiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentQuizUpdateArgs>(args: SelectSubset<T, StudentQuizUpdateArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentQuizs.
     * @param {StudentQuizDeleteManyArgs} args - Arguments to filter StudentQuizs to delete.
     * @example
     * // Delete a few StudentQuizs
     * const { count } = await prisma.studentQuiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentQuizDeleteManyArgs>(args?: SelectSubset<T, StudentQuizDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentQuizs
     * const studentQuiz = await prisma.studentQuiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentQuizUpdateManyArgs>(args: SelectSubset<T, StudentQuizUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentQuizs and returns the data updated in the database.
     * @param {StudentQuizUpdateManyAndReturnArgs} args - Arguments to update many StudentQuizs.
     * @example
     * // Update many StudentQuizs
     * const studentQuiz = await prisma.studentQuiz.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentQuizs and only return the `id`
     * const studentQuizWithIdOnly = await prisma.studentQuiz.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentQuizUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentQuizUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentQuiz.
     * @param {StudentQuizUpsertArgs} args - Arguments to update or create a StudentQuiz.
     * @example
     * // Update or create a StudentQuiz
     * const studentQuiz = await prisma.studentQuiz.upsert({
     *   create: {
     *     // ... data to create a StudentQuiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentQuiz we want to update
     *   }
     * })
     */
    upsert<T extends StudentQuizUpsertArgs>(args: SelectSubset<T, StudentQuizUpsertArgs<ExtArgs>>): Prisma__StudentQuizClient<$Result.GetResult<Prisma.$StudentQuizPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizCountArgs} args - Arguments to filter StudentQuizs to count.
     * @example
     * // Count the number of StudentQuizs
     * const count = await prisma.studentQuiz.count({
     *   where: {
     *     // ... the filter for the StudentQuizs we want to count
     *   }
     * })
    **/
    count<T extends StudentQuizCountArgs>(
      args?: Subset<T, StudentQuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentQuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentQuizAggregateArgs>(args: Subset<T, StudentQuizAggregateArgs>): Prisma.PrismaPromise<GetStudentQuizAggregateType<T>>

    /**
     * Group by StudentQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentQuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentQuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentQuizGroupByArgs['orderBy'] }
        : { orderBy?: StudentQuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentQuiz model
   */
  readonly fields: StudentQuizFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentQuiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentQuizClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quiz<T extends QuizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizDefaultArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentQuiz model
   */
  interface StudentQuizFieldRefs {
    readonly id: FieldRef<"StudentQuiz", 'Int'>
    readonly student_id: FieldRef<"StudentQuiz", 'Int'>
    readonly quiz_id: FieldRef<"StudentQuiz", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentQuiz findUnique
   */
  export type StudentQuizFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * Filter, which StudentQuiz to fetch.
     */
    where: StudentQuizWhereUniqueInput
  }

  /**
   * StudentQuiz findUniqueOrThrow
   */
  export type StudentQuizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * Filter, which StudentQuiz to fetch.
     */
    where: StudentQuizWhereUniqueInput
  }

  /**
   * StudentQuiz findFirst
   */
  export type StudentQuizFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * Filter, which StudentQuiz to fetch.
     */
    where?: StudentQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentQuizs to fetch.
     */
    orderBy?: StudentQuizOrderByWithRelationInput | StudentQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentQuizs.
     */
    cursor?: StudentQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentQuizs.
     */
    distinct?: StudentQuizScalarFieldEnum | StudentQuizScalarFieldEnum[]
  }

  /**
   * StudentQuiz findFirstOrThrow
   */
  export type StudentQuizFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * Filter, which StudentQuiz to fetch.
     */
    where?: StudentQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentQuizs to fetch.
     */
    orderBy?: StudentQuizOrderByWithRelationInput | StudentQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentQuizs.
     */
    cursor?: StudentQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentQuizs.
     */
    distinct?: StudentQuizScalarFieldEnum | StudentQuizScalarFieldEnum[]
  }

  /**
   * StudentQuiz findMany
   */
  export type StudentQuizFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * Filter, which StudentQuizs to fetch.
     */
    where?: StudentQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentQuizs to fetch.
     */
    orderBy?: StudentQuizOrderByWithRelationInput | StudentQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentQuizs.
     */
    cursor?: StudentQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentQuizs.
     */
    skip?: number
    distinct?: StudentQuizScalarFieldEnum | StudentQuizScalarFieldEnum[]
  }

  /**
   * StudentQuiz create
   */
  export type StudentQuizCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentQuiz.
     */
    data: XOR<StudentQuizCreateInput, StudentQuizUncheckedCreateInput>
  }

  /**
   * StudentQuiz createMany
   */
  export type StudentQuizCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentQuizs.
     */
    data: StudentQuizCreateManyInput | StudentQuizCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentQuiz createManyAndReturn
   */
  export type StudentQuizCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * The data used to create many StudentQuizs.
     */
    data: StudentQuizCreateManyInput | StudentQuizCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentQuiz update
   */
  export type StudentQuizUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentQuiz.
     */
    data: XOR<StudentQuizUpdateInput, StudentQuizUncheckedUpdateInput>
    /**
     * Choose, which StudentQuiz to update.
     */
    where: StudentQuizWhereUniqueInput
  }

  /**
   * StudentQuiz updateMany
   */
  export type StudentQuizUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentQuizs.
     */
    data: XOR<StudentQuizUpdateManyMutationInput, StudentQuizUncheckedUpdateManyInput>
    /**
     * Filter which StudentQuizs to update
     */
    where?: StudentQuizWhereInput
    /**
     * Limit how many StudentQuizs to update.
     */
    limit?: number
  }

  /**
   * StudentQuiz updateManyAndReturn
   */
  export type StudentQuizUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * The data used to update StudentQuizs.
     */
    data: XOR<StudentQuizUpdateManyMutationInput, StudentQuizUncheckedUpdateManyInput>
    /**
     * Filter which StudentQuizs to update
     */
    where?: StudentQuizWhereInput
    /**
     * Limit how many StudentQuizs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentQuiz upsert
   */
  export type StudentQuizUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentQuiz to update in case it exists.
     */
    where: StudentQuizWhereUniqueInput
    /**
     * In case the StudentQuiz found by the `where` argument doesn't exist, create a new StudentQuiz with this data.
     */
    create: XOR<StudentQuizCreateInput, StudentQuizUncheckedCreateInput>
    /**
     * In case the StudentQuiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentQuizUpdateInput, StudentQuizUncheckedUpdateInput>
  }

  /**
   * StudentQuiz delete
   */
  export type StudentQuizDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
    /**
     * Filter which StudentQuiz to delete.
     */
    where: StudentQuizWhereUniqueInput
  }

  /**
   * StudentQuiz deleteMany
   */
  export type StudentQuizDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentQuizs to delete
     */
    where?: StudentQuizWhereInput
    /**
     * Limit how many StudentQuizs to delete.
     */
    limit?: number
  }

  /**
   * StudentQuiz without action
   */
  export type StudentQuizDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentQuiz
     */
    select?: StudentQuizSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentQuiz
     */
    omit?: StudentQuizOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentQuizInclude<ExtArgs> | null
  }


  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentAvgAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentSumAggregateOutputType = {
    id: number | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    teacher_id: number | null
    class_id: number | null
    subject_id: number | null
  }

  export type AssignmentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    teacher_id: number
    class_id: number
    subject_id: number
    _all: number
  }


  export type AssignmentAvgAggregateInputType = {
    id?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentSumAggregateInputType = {
    id?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
  }

  export type AssignmentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    teacher_id?: true
    class_id?: true
    subject_id?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _avg?: AssignmentAvgAggregateInputType
    _sum?: AssignmentSumAggregateInputType
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    id: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    studentAssignments?: boolean | Assignment$studentAssignmentsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    teacher_id?: boolean
    class_id?: boolean
    subject_id?: boolean
  }

  export type AssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "teacher_id" | "class_id" | "subject_id", ExtArgs["result"]["assignment"]>
  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    studentAssignments?: boolean | Assignment$studentAssignmentsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs>
      studentAssignments: Prisma.$StudentAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      teacher_id: number
      class_id: number
      subject_id: number
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }

  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentFindUniqueArgs>(args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentFindFirstArgs>(args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentFindManyArgs>(args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
     */
    create<T extends AssignmentCreateArgs>(args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assignments.
     * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentCreateManyArgs>(args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDeleteArgs>(args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentUpdateArgs>(args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDeleteManyArgs>(args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentUpdateManyArgs>(args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments and returns the data updated in the database.
     * @param {AssignmentUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentUpsertArgs>(args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studentAssignments<T extends Assignment$studentAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$studentAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assignment model
   */
  interface AssignmentFieldRefs {
    readonly id: FieldRef<"Assignment", 'Int'>
    readonly title: FieldRef<"Assignment", 'String'>
    readonly description: FieldRef<"Assignment", 'String'>
    readonly teacher_id: FieldRef<"Assignment", 'Int'>
    readonly class_id: FieldRef<"Assignment", 'Int'>
    readonly subject_id: FieldRef<"Assignment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }

  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assignment createManyAndReturn
   */
  export type AssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
  }

  /**
   * Assignment updateManyAndReturn
   */
  export type AssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }

  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to delete.
     */
    limit?: number
  }

  /**
   * Assignment.studentAssignments
   */
  export type Assignment$studentAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    where?: StudentAssignmentWhereInput
    orderBy?: StudentAssignmentOrderByWithRelationInput | StudentAssignmentOrderByWithRelationInput[]
    cursor?: StudentAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAssignmentScalarFieldEnum | StudentAssignmentScalarFieldEnum[]
  }

  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
  }


  /**
   * Model StudentAssignment
   */

  export type AggregateStudentAssignment = {
    _count: StudentAssignmentCountAggregateOutputType | null
    _avg: StudentAssignmentAvgAggregateOutputType | null
    _sum: StudentAssignmentSumAggregateOutputType | null
    _min: StudentAssignmentMinAggregateOutputType | null
    _max: StudentAssignmentMaxAggregateOutputType | null
  }

  export type StudentAssignmentAvgAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type StudentAssignmentSumAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type StudentAssignmentMinAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type StudentAssignmentMaxAggregateOutputType = {
    id: number | null
    assignment_id: number | null
    student_id: number | null
  }

  export type StudentAssignmentCountAggregateOutputType = {
    id: number
    assignment_id: number
    student_id: number
    _all: number
  }


  export type StudentAssignmentAvgAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type StudentAssignmentSumAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type StudentAssignmentMinAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type StudentAssignmentMaxAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
  }

  export type StudentAssignmentCountAggregateInputType = {
    id?: true
    assignment_id?: true
    student_id?: true
    _all?: true
  }

  export type StudentAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAssignment to aggregate.
     */
    where?: StudentAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAssignments to fetch.
     */
    orderBy?: StudentAssignmentOrderByWithRelationInput | StudentAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentAssignments
    **/
    _count?: true | StudentAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentAssignmentMaxAggregateInputType
  }

  export type GetStudentAssignmentAggregateType<T extends StudentAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentAssignment[P]>
      : GetScalarType<T[P], AggregateStudentAssignment[P]>
  }




  export type StudentAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAssignmentWhereInput
    orderBy?: StudentAssignmentOrderByWithAggregationInput | StudentAssignmentOrderByWithAggregationInput[]
    by: StudentAssignmentScalarFieldEnum[] | StudentAssignmentScalarFieldEnum
    having?: StudentAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentAssignmentCountAggregateInputType | true
    _avg?: StudentAssignmentAvgAggregateInputType
    _sum?: StudentAssignmentSumAggregateInputType
    _min?: StudentAssignmentMinAggregateInputType
    _max?: StudentAssignmentMaxAggregateInputType
  }

  export type StudentAssignmentGroupByOutputType = {
    id: number
    assignment_id: number
    student_id: number
    _count: StudentAssignmentCountAggregateOutputType | null
    _avg: StudentAssignmentAvgAggregateOutputType | null
    _sum: StudentAssignmentSumAggregateOutputType | null
    _min: StudentAssignmentMinAggregateOutputType | null
    _max: StudentAssignmentMaxAggregateOutputType | null
  }

  type GetStudentAssignmentGroupByPayload<T extends StudentAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type StudentAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAssignment"]>

  export type StudentAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAssignment"]>

  export type StudentAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAssignment"]>

  export type StudentAssignmentSelectScalar = {
    id?: boolean
    assignment_id?: boolean
    student_id?: boolean
  }

  export type StudentAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assignment_id" | "student_id", ExtArgs["result"]["studentAssignment"]>
  export type StudentAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentAssignment"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      assignment_id: number
      student_id: number
    }, ExtArgs["result"]["studentAssignment"]>
    composites: {}
  }

  type StudentAssignmentGetPayload<S extends boolean | null | undefined | StudentAssignmentDefaultArgs> = $Result.GetResult<Prisma.$StudentAssignmentPayload, S>

  type StudentAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentAssignmentCountAggregateInputType | true
    }

  export interface StudentAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentAssignment'], meta: { name: 'StudentAssignment' } }
    /**
     * Find zero or one StudentAssignment that matches the filter.
     * @param {StudentAssignmentFindUniqueArgs} args - Arguments to find a StudentAssignment
     * @example
     * // Get one StudentAssignment
     * const studentAssignment = await prisma.studentAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentAssignmentFindUniqueArgs>(args: SelectSubset<T, StudentAssignmentFindUniqueArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentAssignmentFindUniqueOrThrowArgs} args - Arguments to find a StudentAssignment
     * @example
     * // Get one StudentAssignment
     * const studentAssignment = await prisma.studentAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentFindFirstArgs} args - Arguments to find a StudentAssignment
     * @example
     * // Get one StudentAssignment
     * const studentAssignment = await prisma.studentAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentAssignmentFindFirstArgs>(args?: SelectSubset<T, StudentAssignmentFindFirstArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentFindFirstOrThrowArgs} args - Arguments to find a StudentAssignment
     * @example
     * // Get one StudentAssignment
     * const studentAssignment = await prisma.studentAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentAssignments
     * const studentAssignments = await prisma.studentAssignment.findMany()
     * 
     * // Get first 10 StudentAssignments
     * const studentAssignments = await prisma.studentAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentAssignmentWithIdOnly = await prisma.studentAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentAssignmentFindManyArgs>(args?: SelectSubset<T, StudentAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentAssignment.
     * @param {StudentAssignmentCreateArgs} args - Arguments to create a StudentAssignment.
     * @example
     * // Create one StudentAssignment
     * const StudentAssignment = await prisma.studentAssignment.create({
     *   data: {
     *     // ... data to create a StudentAssignment
     *   }
     * })
     * 
     */
    create<T extends StudentAssignmentCreateArgs>(args: SelectSubset<T, StudentAssignmentCreateArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentAssignments.
     * @param {StudentAssignmentCreateManyArgs} args - Arguments to create many StudentAssignments.
     * @example
     * // Create many StudentAssignments
     * const studentAssignment = await prisma.studentAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentAssignmentCreateManyArgs>(args?: SelectSubset<T, StudentAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentAssignments and returns the data saved in the database.
     * @param {StudentAssignmentCreateManyAndReturnArgs} args - Arguments to create many StudentAssignments.
     * @example
     * // Create many StudentAssignments
     * const studentAssignment = await prisma.studentAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentAssignments and only return the `id`
     * const studentAssignmentWithIdOnly = await prisma.studentAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentAssignment.
     * @param {StudentAssignmentDeleteArgs} args - Arguments to delete one StudentAssignment.
     * @example
     * // Delete one StudentAssignment
     * const StudentAssignment = await prisma.studentAssignment.delete({
     *   where: {
     *     // ... filter to delete one StudentAssignment
     *   }
     * })
     * 
     */
    delete<T extends StudentAssignmentDeleteArgs>(args: SelectSubset<T, StudentAssignmentDeleteArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentAssignment.
     * @param {StudentAssignmentUpdateArgs} args - Arguments to update one StudentAssignment.
     * @example
     * // Update one StudentAssignment
     * const studentAssignment = await prisma.studentAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentAssignmentUpdateArgs>(args: SelectSubset<T, StudentAssignmentUpdateArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentAssignments.
     * @param {StudentAssignmentDeleteManyArgs} args - Arguments to filter StudentAssignments to delete.
     * @example
     * // Delete a few StudentAssignments
     * const { count } = await prisma.studentAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentAssignmentDeleteManyArgs>(args?: SelectSubset<T, StudentAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentAssignments
     * const studentAssignment = await prisma.studentAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentAssignmentUpdateManyArgs>(args: SelectSubset<T, StudentAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAssignments and returns the data updated in the database.
     * @param {StudentAssignmentUpdateManyAndReturnArgs} args - Arguments to update many StudentAssignments.
     * @example
     * // Update many StudentAssignments
     * const studentAssignment = await prisma.studentAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentAssignments and only return the `id`
     * const studentAssignmentWithIdOnly = await prisma.studentAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentAssignment.
     * @param {StudentAssignmentUpsertArgs} args - Arguments to update or create a StudentAssignment.
     * @example
     * // Update or create a StudentAssignment
     * const studentAssignment = await prisma.studentAssignment.upsert({
     *   create: {
     *     // ... data to create a StudentAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentAssignment we want to update
     *   }
     * })
     */
    upsert<T extends StudentAssignmentUpsertArgs>(args: SelectSubset<T, StudentAssignmentUpsertArgs<ExtArgs>>): Prisma__StudentAssignmentClient<$Result.GetResult<Prisma.$StudentAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentCountArgs} args - Arguments to filter StudentAssignments to count.
     * @example
     * // Count the number of StudentAssignments
     * const count = await prisma.studentAssignment.count({
     *   where: {
     *     // ... the filter for the StudentAssignments we want to count
     *   }
     * })
    **/
    count<T extends StudentAssignmentCountArgs>(
      args?: Subset<T, StudentAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAssignmentAggregateArgs>(args: Subset<T, StudentAssignmentAggregateArgs>): Prisma.PrismaPromise<GetStudentAssignmentAggregateType<T>>

    /**
     * Group by StudentAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: StudentAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentAssignment model
   */
  readonly fields: StudentAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends AssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentDefaultArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentAssignment model
   */
  interface StudentAssignmentFieldRefs {
    readonly id: FieldRef<"StudentAssignment", 'Int'>
    readonly assignment_id: FieldRef<"StudentAssignment", 'Int'>
    readonly student_id: FieldRef<"StudentAssignment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentAssignment findUnique
   */
  export type StudentAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudentAssignment to fetch.
     */
    where: StudentAssignmentWhereUniqueInput
  }

  /**
   * StudentAssignment findUniqueOrThrow
   */
  export type StudentAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudentAssignment to fetch.
     */
    where: StudentAssignmentWhereUniqueInput
  }

  /**
   * StudentAssignment findFirst
   */
  export type StudentAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudentAssignment to fetch.
     */
    where?: StudentAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAssignments to fetch.
     */
    orderBy?: StudentAssignmentOrderByWithRelationInput | StudentAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAssignments.
     */
    cursor?: StudentAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAssignments.
     */
    distinct?: StudentAssignmentScalarFieldEnum | StudentAssignmentScalarFieldEnum[]
  }

  /**
   * StudentAssignment findFirstOrThrow
   */
  export type StudentAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudentAssignment to fetch.
     */
    where?: StudentAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAssignments to fetch.
     */
    orderBy?: StudentAssignmentOrderByWithRelationInput | StudentAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAssignments.
     */
    cursor?: StudentAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAssignments.
     */
    distinct?: StudentAssignmentScalarFieldEnum | StudentAssignmentScalarFieldEnum[]
  }

  /**
   * StudentAssignment findMany
   */
  export type StudentAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which StudentAssignments to fetch.
     */
    where?: StudentAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAssignments to fetch.
     */
    orderBy?: StudentAssignmentOrderByWithRelationInput | StudentAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentAssignments.
     */
    cursor?: StudentAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAssignments.
     */
    skip?: number
    distinct?: StudentAssignmentScalarFieldEnum | StudentAssignmentScalarFieldEnum[]
  }

  /**
   * StudentAssignment create
   */
  export type StudentAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentAssignment.
     */
    data: XOR<StudentAssignmentCreateInput, StudentAssignmentUncheckedCreateInput>
  }

  /**
   * StudentAssignment createMany
   */
  export type StudentAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentAssignments.
     */
    data: StudentAssignmentCreateManyInput | StudentAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentAssignment createManyAndReturn
   */
  export type StudentAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many StudentAssignments.
     */
    data: StudentAssignmentCreateManyInput | StudentAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAssignment update
   */
  export type StudentAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentAssignment.
     */
    data: XOR<StudentAssignmentUpdateInput, StudentAssignmentUncheckedUpdateInput>
    /**
     * Choose, which StudentAssignment to update.
     */
    where: StudentAssignmentWhereUniqueInput
  }

  /**
   * StudentAssignment updateMany
   */
  export type StudentAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentAssignments.
     */
    data: XOR<StudentAssignmentUpdateManyMutationInput, StudentAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which StudentAssignments to update
     */
    where?: StudentAssignmentWhereInput
    /**
     * Limit how many StudentAssignments to update.
     */
    limit?: number
  }

  /**
   * StudentAssignment updateManyAndReturn
   */
  export type StudentAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update StudentAssignments.
     */
    data: XOR<StudentAssignmentUpdateManyMutationInput, StudentAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which StudentAssignments to update
     */
    where?: StudentAssignmentWhereInput
    /**
     * Limit how many StudentAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAssignment upsert
   */
  export type StudentAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentAssignment to update in case it exists.
     */
    where: StudentAssignmentWhereUniqueInput
    /**
     * In case the StudentAssignment found by the `where` argument doesn't exist, create a new StudentAssignment with this data.
     */
    create: XOR<StudentAssignmentCreateInput, StudentAssignmentUncheckedCreateInput>
    /**
     * In case the StudentAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentAssignmentUpdateInput, StudentAssignmentUncheckedUpdateInput>
  }

  /**
   * StudentAssignment delete
   */
  export type StudentAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
    /**
     * Filter which StudentAssignment to delete.
     */
    where: StudentAssignmentWhereUniqueInput
  }

  /**
   * StudentAssignment deleteMany
   */
  export type StudentAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAssignments to delete
     */
    where?: StudentAssignmentWhereInput
    /**
     * Limit how many StudentAssignments to delete.
     */
    limit?: number
  }

  /**
   * StudentAssignment without action
   */
  export type StudentAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAssignment
     */
    select?: StudentAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentAssignment
     */
    omit?: StudentAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model WeeklySchedule
   */

  export type AggregateWeeklySchedule = {
    _count: WeeklyScheduleCountAggregateOutputType | null
    _avg: WeeklyScheduleAvgAggregateOutputType | null
    _sum: WeeklyScheduleSumAggregateOutputType | null
    _min: WeeklyScheduleMinAggregateOutputType | null
    _max: WeeklyScheduleMaxAggregateOutputType | null
  }

  export type WeeklyScheduleAvgAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type WeeklyScheduleSumAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type WeeklyScheduleMinAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type WeeklyScheduleMaxAggregateOutputType = {
    id: number | null
    class_id: number | null
    teacher_id: number | null
    subject_id: number | null
  }

  export type WeeklyScheduleCountAggregateOutputType = {
    id: number
    class_id: number
    teacher_id: number
    subject_id: number
    _all: number
  }


  export type WeeklyScheduleAvgAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type WeeklyScheduleSumAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type WeeklyScheduleMinAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type WeeklyScheduleMaxAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
  }

  export type WeeklyScheduleCountAggregateInputType = {
    id?: true
    class_id?: true
    teacher_id?: true
    subject_id?: true
    _all?: true
  }

  export type WeeklyScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklySchedule to aggregate.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeeklySchedules
    **/
    _count?: true | WeeklyScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeeklyScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeeklyScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeeklyScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeeklyScheduleMaxAggregateInputType
  }

  export type GetWeeklyScheduleAggregateType<T extends WeeklyScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateWeeklySchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeeklySchedule[P]>
      : GetScalarType<T[P], AggregateWeeklySchedule[P]>
  }




  export type WeeklyScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithAggregationInput | WeeklyScheduleOrderByWithAggregationInput[]
    by: WeeklyScheduleScalarFieldEnum[] | WeeklyScheduleScalarFieldEnum
    having?: WeeklyScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeeklyScheduleCountAggregateInputType | true
    _avg?: WeeklyScheduleAvgAggregateInputType
    _sum?: WeeklyScheduleSumAggregateInputType
    _min?: WeeklyScheduleMinAggregateInputType
    _max?: WeeklyScheduleMaxAggregateInputType
  }

  export type WeeklyScheduleGroupByOutputType = {
    id: number
    class_id: number
    teacher_id: number
    subject_id: number
    _count: WeeklyScheduleCountAggregateOutputType | null
    _avg: WeeklyScheduleAvgAggregateOutputType | null
    _sum: WeeklyScheduleSumAggregateOutputType | null
    _min: WeeklyScheduleMinAggregateOutputType | null
    _max: WeeklyScheduleMaxAggregateOutputType | null
  }

  type GetWeeklyScheduleGroupByPayload<T extends WeeklyScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeeklyScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeeklyScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeeklyScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], WeeklyScheduleGroupByOutputType[P]>
        }
      >
    >


  export type WeeklyScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklySchedule"]>

  export type WeeklyScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklySchedule"]>

  export type WeeklyScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklySchedule"]>

  export type WeeklyScheduleSelectScalar = {
    id?: boolean
    class_id?: boolean
    teacher_id?: boolean
    subject_id?: boolean
  }

  export type WeeklyScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "class_id" | "teacher_id" | "subject_id", ExtArgs["result"]["weeklySchedule"]>
  export type WeeklyScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WeeklyScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WeeklyScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WeeklySchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeeklySchedule"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      class_id: number
      teacher_id: number
      subject_id: number
    }, ExtArgs["result"]["weeklySchedule"]>
    composites: {}
  }

  type WeeklyScheduleGetPayload<S extends boolean | null | undefined | WeeklyScheduleDefaultArgs> = $Result.GetResult<Prisma.$WeeklySchedulePayload, S>

  type WeeklyScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WeeklyScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WeeklyScheduleCountAggregateInputType | true
    }

  export interface WeeklyScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeeklySchedule'], meta: { name: 'WeeklySchedule' } }
    /**
     * Find zero or one WeeklySchedule that matches the filter.
     * @param {WeeklyScheduleFindUniqueArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeeklyScheduleFindUniqueArgs>(args: SelectSubset<T, WeeklyScheduleFindUniqueArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WeeklySchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WeeklyScheduleFindUniqueOrThrowArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeeklyScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeeklySchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleFindFirstArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeeklyScheduleFindFirstArgs>(args?: SelectSubset<T, WeeklyScheduleFindFirstArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WeeklySchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleFindFirstOrThrowArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeeklyScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, WeeklyScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WeeklySchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeeklySchedules
     * const weeklySchedules = await prisma.weeklySchedule.findMany()
     * 
     * // Get first 10 WeeklySchedules
     * const weeklySchedules = await prisma.weeklySchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weeklyScheduleWithIdOnly = await prisma.weeklySchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeeklyScheduleFindManyArgs>(args?: SelectSubset<T, WeeklyScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WeeklySchedule.
     * @param {WeeklyScheduleCreateArgs} args - Arguments to create a WeeklySchedule.
     * @example
     * // Create one WeeklySchedule
     * const WeeklySchedule = await prisma.weeklySchedule.create({
     *   data: {
     *     // ... data to create a WeeklySchedule
     *   }
     * })
     * 
     */
    create<T extends WeeklyScheduleCreateArgs>(args: SelectSubset<T, WeeklyScheduleCreateArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WeeklySchedules.
     * @param {WeeklyScheduleCreateManyArgs} args - Arguments to create many WeeklySchedules.
     * @example
     * // Create many WeeklySchedules
     * const weeklySchedule = await prisma.weeklySchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeeklyScheduleCreateManyArgs>(args?: SelectSubset<T, WeeklyScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeeklySchedules and returns the data saved in the database.
     * @param {WeeklyScheduleCreateManyAndReturnArgs} args - Arguments to create many WeeklySchedules.
     * @example
     * // Create many WeeklySchedules
     * const weeklySchedule = await prisma.weeklySchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeeklySchedules and only return the `id`
     * const weeklyScheduleWithIdOnly = await prisma.weeklySchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeeklyScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, WeeklyScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WeeklySchedule.
     * @param {WeeklyScheduleDeleteArgs} args - Arguments to delete one WeeklySchedule.
     * @example
     * // Delete one WeeklySchedule
     * const WeeklySchedule = await prisma.weeklySchedule.delete({
     *   where: {
     *     // ... filter to delete one WeeklySchedule
     *   }
     * })
     * 
     */
    delete<T extends WeeklyScheduleDeleteArgs>(args: SelectSubset<T, WeeklyScheduleDeleteArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WeeklySchedule.
     * @param {WeeklyScheduleUpdateArgs} args - Arguments to update one WeeklySchedule.
     * @example
     * // Update one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeeklyScheduleUpdateArgs>(args: SelectSubset<T, WeeklyScheduleUpdateArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WeeklySchedules.
     * @param {WeeklyScheduleDeleteManyArgs} args - Arguments to filter WeeklySchedules to delete.
     * @example
     * // Delete a few WeeklySchedules
     * const { count } = await prisma.weeklySchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeeklyScheduleDeleteManyArgs>(args?: SelectSubset<T, WeeklyScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeeklySchedules
     * const weeklySchedule = await prisma.weeklySchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeeklyScheduleUpdateManyArgs>(args: SelectSubset<T, WeeklyScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklySchedules and returns the data updated in the database.
     * @param {WeeklyScheduleUpdateManyAndReturnArgs} args - Arguments to update many WeeklySchedules.
     * @example
     * // Update many WeeklySchedules
     * const weeklySchedule = await prisma.weeklySchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WeeklySchedules and only return the `id`
     * const weeklyScheduleWithIdOnly = await prisma.weeklySchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WeeklyScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, WeeklyScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WeeklySchedule.
     * @param {WeeklyScheduleUpsertArgs} args - Arguments to update or create a WeeklySchedule.
     * @example
     * // Update or create a WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.upsert({
     *   create: {
     *     // ... data to create a WeeklySchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeeklySchedule we want to update
     *   }
     * })
     */
    upsert<T extends WeeklyScheduleUpsertArgs>(args: SelectSubset<T, WeeklyScheduleUpsertArgs<ExtArgs>>): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WeeklySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleCountArgs} args - Arguments to filter WeeklySchedules to count.
     * @example
     * // Count the number of WeeklySchedules
     * const count = await prisma.weeklySchedule.count({
     *   where: {
     *     // ... the filter for the WeeklySchedules we want to count
     *   }
     * })
    **/
    count<T extends WeeklyScheduleCountArgs>(
      args?: Subset<T, WeeklyScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeeklyScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeeklySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeeklyScheduleAggregateArgs>(args: Subset<T, WeeklyScheduleAggregateArgs>): Prisma.PrismaPromise<GetWeeklyScheduleAggregateType<T>>

    /**
     * Group by WeeklySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeeklyScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeeklyScheduleGroupByArgs['orderBy'] }
        : { orderBy?: WeeklyScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeeklyScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeeklyScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeeklySchedule model
   */
  readonly fields: WeeklyScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeeklySchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeeklyScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeeklySchedule model
   */
  interface WeeklyScheduleFieldRefs {
    readonly id: FieldRef<"WeeklySchedule", 'Int'>
    readonly class_id: FieldRef<"WeeklySchedule", 'Int'>
    readonly teacher_id: FieldRef<"WeeklySchedule", 'Int'>
    readonly subject_id: FieldRef<"WeeklySchedule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WeeklySchedule findUnique
   */
  export type WeeklyScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where: WeeklyScheduleWhereUniqueInput
  }

  /**
   * WeeklySchedule findUniqueOrThrow
   */
  export type WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where: WeeklyScheduleWhereUniqueInput
  }

  /**
   * WeeklySchedule findFirst
   */
  export type WeeklyScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklySchedules.
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklySchedules.
     */
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }

  /**
   * WeeklySchedule findFirstOrThrow
   */
  export type WeeklyScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklySchedules.
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklySchedules.
     */
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }

  /**
   * WeeklySchedule findMany
   */
  export type WeeklyScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedules to fetch.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeeklySchedules.
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }

  /**
   * WeeklySchedule create
   */
  export type WeeklyScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a WeeklySchedule.
     */
    data: XOR<WeeklyScheduleCreateInput, WeeklyScheduleUncheckedCreateInput>
  }

  /**
   * WeeklySchedule createMany
   */
  export type WeeklyScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeeklySchedules.
     */
    data: WeeklyScheduleCreateManyInput | WeeklyScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WeeklySchedule createManyAndReturn
   */
  export type WeeklyScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many WeeklySchedules.
     */
    data: WeeklyScheduleCreateManyInput | WeeklyScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeeklySchedule update
   */
  export type WeeklyScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a WeeklySchedule.
     */
    data: XOR<WeeklyScheduleUpdateInput, WeeklyScheduleUncheckedUpdateInput>
    /**
     * Choose, which WeeklySchedule to update.
     */
    where: WeeklyScheduleWhereUniqueInput
  }

  /**
   * WeeklySchedule updateMany
   */
  export type WeeklyScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeeklySchedules.
     */
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyInput>
    /**
     * Filter which WeeklySchedules to update
     */
    where?: WeeklyScheduleWhereInput
    /**
     * Limit how many WeeklySchedules to update.
     */
    limit?: number
  }

  /**
   * WeeklySchedule updateManyAndReturn
   */
  export type WeeklyScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * The data used to update WeeklySchedules.
     */
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyInput>
    /**
     * Filter which WeeklySchedules to update
     */
    where?: WeeklyScheduleWhereInput
    /**
     * Limit how many WeeklySchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeeklySchedule upsert
   */
  export type WeeklyScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the WeeklySchedule to update in case it exists.
     */
    where: WeeklyScheduleWhereUniqueInput
    /**
     * In case the WeeklySchedule found by the `where` argument doesn't exist, create a new WeeklySchedule with this data.
     */
    create: XOR<WeeklyScheduleCreateInput, WeeklyScheduleUncheckedCreateInput>
    /**
     * In case the WeeklySchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeeklyScheduleUpdateInput, WeeklyScheduleUncheckedUpdateInput>
  }

  /**
   * WeeklySchedule delete
   */
  export type WeeklyScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter which WeeklySchedule to delete.
     */
    where: WeeklyScheduleWhereUniqueInput
  }

  /**
   * WeeklySchedule deleteMany
   */
  export type WeeklyScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklySchedules to delete
     */
    where?: WeeklyScheduleWhereInput
    /**
     * Limit how many WeeklySchedules to delete.
     */
    limit?: number
  }

  /**
   * WeeklySchedule without action
   */
  export type WeeklyScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WeeklySchedule
     */
    omit?: WeeklyScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
  }


  /**
   * Model StudyTimetable
   */

  export type AggregateStudyTimetable = {
    _count: StudyTimetableCountAggregateOutputType | null
    _avg: StudyTimetableAvgAggregateOutputType | null
    _sum: StudyTimetableSumAggregateOutputType | null
    _min: StudyTimetableMinAggregateOutputType | null
    _max: StudyTimetableMaxAggregateOutputType | null
  }

  export type StudyTimetableAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type StudyTimetableSumAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type StudyTimetableMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type StudyTimetableMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
  }

  export type StudyTimetableCountAggregateOutputType = {
    id: number
    student_id: number
    subject_id: number
    _all: number
  }


  export type StudyTimetableAvgAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type StudyTimetableSumAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type StudyTimetableMinAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type StudyTimetableMaxAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
  }

  export type StudyTimetableCountAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    _all?: true
  }

  export type StudyTimetableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyTimetable to aggregate.
     */
    where?: StudyTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyTimetables to fetch.
     */
    orderBy?: StudyTimetableOrderByWithRelationInput | StudyTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyTimetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyTimetables
    **/
    _count?: true | StudyTimetableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyTimetableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudyTimetableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyTimetableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyTimetableMaxAggregateInputType
  }

  export type GetStudyTimetableAggregateType<T extends StudyTimetableAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyTimetable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyTimetable[P]>
      : GetScalarType<T[P], AggregateStudyTimetable[P]>
  }




  export type StudyTimetableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyTimetableWhereInput
    orderBy?: StudyTimetableOrderByWithAggregationInput | StudyTimetableOrderByWithAggregationInput[]
    by: StudyTimetableScalarFieldEnum[] | StudyTimetableScalarFieldEnum
    having?: StudyTimetableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyTimetableCountAggregateInputType | true
    _avg?: StudyTimetableAvgAggregateInputType
    _sum?: StudyTimetableSumAggregateInputType
    _min?: StudyTimetableMinAggregateInputType
    _max?: StudyTimetableMaxAggregateInputType
  }

  export type StudyTimetableGroupByOutputType = {
    id: number
    student_id: number
    subject_id: number
    _count: StudyTimetableCountAggregateOutputType | null
    _avg: StudyTimetableAvgAggregateOutputType | null
    _sum: StudyTimetableSumAggregateOutputType | null
    _min: StudyTimetableMinAggregateOutputType | null
    _max: StudyTimetableMaxAggregateOutputType | null
  }

  type GetStudyTimetableGroupByPayload<T extends StudyTimetableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyTimetableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyTimetableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyTimetableGroupByOutputType[P]>
            : GetScalarType<T[P], StudyTimetableGroupByOutputType[P]>
        }
      >
    >


  export type StudyTimetableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyTimetable"]>

  export type StudyTimetableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyTimetable"]>

  export type StudyTimetableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyTimetable"]>

  export type StudyTimetableSelectScalar = {
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
  }

  export type StudyTimetableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "subject_id", ExtArgs["result"]["studyTimetable"]>
  export type StudyTimetableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type StudyTimetableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type StudyTimetableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $StudyTimetablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyTimetable"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      subject_id: number
    }, ExtArgs["result"]["studyTimetable"]>
    composites: {}
  }

  type StudyTimetableGetPayload<S extends boolean | null | undefined | StudyTimetableDefaultArgs> = $Result.GetResult<Prisma.$StudyTimetablePayload, S>

  type StudyTimetableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudyTimetableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudyTimetableCountAggregateInputType | true
    }

  export interface StudyTimetableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyTimetable'], meta: { name: 'StudyTimetable' } }
    /**
     * Find zero or one StudyTimetable that matches the filter.
     * @param {StudyTimetableFindUniqueArgs} args - Arguments to find a StudyTimetable
     * @example
     * // Get one StudyTimetable
     * const studyTimetable = await prisma.studyTimetable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyTimetableFindUniqueArgs>(args: SelectSubset<T, StudyTimetableFindUniqueArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudyTimetable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudyTimetableFindUniqueOrThrowArgs} args - Arguments to find a StudyTimetable
     * @example
     * // Get one StudyTimetable
     * const studyTimetable = await prisma.studyTimetable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyTimetableFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyTimetableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyTimetable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableFindFirstArgs} args - Arguments to find a StudyTimetable
     * @example
     * // Get one StudyTimetable
     * const studyTimetable = await prisma.studyTimetable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyTimetableFindFirstArgs>(args?: SelectSubset<T, StudyTimetableFindFirstArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudyTimetable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableFindFirstOrThrowArgs} args - Arguments to find a StudyTimetable
     * @example
     * // Get one StudyTimetable
     * const studyTimetable = await prisma.studyTimetable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyTimetableFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyTimetableFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudyTimetables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyTimetables
     * const studyTimetables = await prisma.studyTimetable.findMany()
     * 
     * // Get first 10 StudyTimetables
     * const studyTimetables = await prisma.studyTimetable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyTimetableWithIdOnly = await prisma.studyTimetable.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyTimetableFindManyArgs>(args?: SelectSubset<T, StudyTimetableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudyTimetable.
     * @param {StudyTimetableCreateArgs} args - Arguments to create a StudyTimetable.
     * @example
     * // Create one StudyTimetable
     * const StudyTimetable = await prisma.studyTimetable.create({
     *   data: {
     *     // ... data to create a StudyTimetable
     *   }
     * })
     * 
     */
    create<T extends StudyTimetableCreateArgs>(args: SelectSubset<T, StudyTimetableCreateArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudyTimetables.
     * @param {StudyTimetableCreateManyArgs} args - Arguments to create many StudyTimetables.
     * @example
     * // Create many StudyTimetables
     * const studyTimetable = await prisma.studyTimetable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyTimetableCreateManyArgs>(args?: SelectSubset<T, StudyTimetableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudyTimetables and returns the data saved in the database.
     * @param {StudyTimetableCreateManyAndReturnArgs} args - Arguments to create many StudyTimetables.
     * @example
     * // Create many StudyTimetables
     * const studyTimetable = await prisma.studyTimetable.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudyTimetables and only return the `id`
     * const studyTimetableWithIdOnly = await prisma.studyTimetable.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyTimetableCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyTimetableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudyTimetable.
     * @param {StudyTimetableDeleteArgs} args - Arguments to delete one StudyTimetable.
     * @example
     * // Delete one StudyTimetable
     * const StudyTimetable = await prisma.studyTimetable.delete({
     *   where: {
     *     // ... filter to delete one StudyTimetable
     *   }
     * })
     * 
     */
    delete<T extends StudyTimetableDeleteArgs>(args: SelectSubset<T, StudyTimetableDeleteArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudyTimetable.
     * @param {StudyTimetableUpdateArgs} args - Arguments to update one StudyTimetable.
     * @example
     * // Update one StudyTimetable
     * const studyTimetable = await prisma.studyTimetable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyTimetableUpdateArgs>(args: SelectSubset<T, StudyTimetableUpdateArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudyTimetables.
     * @param {StudyTimetableDeleteManyArgs} args - Arguments to filter StudyTimetables to delete.
     * @example
     * // Delete a few StudyTimetables
     * const { count } = await prisma.studyTimetable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyTimetableDeleteManyArgs>(args?: SelectSubset<T, StudyTimetableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyTimetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyTimetables
     * const studyTimetable = await prisma.studyTimetable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyTimetableUpdateManyArgs>(args: SelectSubset<T, StudyTimetableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyTimetables and returns the data updated in the database.
     * @param {StudyTimetableUpdateManyAndReturnArgs} args - Arguments to update many StudyTimetables.
     * @example
     * // Update many StudyTimetables
     * const studyTimetable = await prisma.studyTimetable.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudyTimetables and only return the `id`
     * const studyTimetableWithIdOnly = await prisma.studyTimetable.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudyTimetableUpdateManyAndReturnArgs>(args: SelectSubset<T, StudyTimetableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudyTimetable.
     * @param {StudyTimetableUpsertArgs} args - Arguments to update or create a StudyTimetable.
     * @example
     * // Update or create a StudyTimetable
     * const studyTimetable = await prisma.studyTimetable.upsert({
     *   create: {
     *     // ... data to create a StudyTimetable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyTimetable we want to update
     *   }
     * })
     */
    upsert<T extends StudyTimetableUpsertArgs>(args: SelectSubset<T, StudyTimetableUpsertArgs<ExtArgs>>): Prisma__StudyTimetableClient<$Result.GetResult<Prisma.$StudyTimetablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudyTimetables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableCountArgs} args - Arguments to filter StudyTimetables to count.
     * @example
     * // Count the number of StudyTimetables
     * const count = await prisma.studyTimetable.count({
     *   where: {
     *     // ... the filter for the StudyTimetables we want to count
     *   }
     * })
    **/
    count<T extends StudyTimetableCountArgs>(
      args?: Subset<T, StudyTimetableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyTimetableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyTimetable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyTimetableAggregateArgs>(args: Subset<T, StudyTimetableAggregateArgs>): Prisma.PrismaPromise<GetStudyTimetableAggregateType<T>>

    /**
     * Group by StudyTimetable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyTimetableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyTimetableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyTimetableGroupByArgs['orderBy'] }
        : { orderBy?: StudyTimetableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyTimetableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyTimetableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyTimetable model
   */
  readonly fields: StudyTimetableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyTimetable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyTimetableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudyTimetable model
   */
  interface StudyTimetableFieldRefs {
    readonly id: FieldRef<"StudyTimetable", 'Int'>
    readonly student_id: FieldRef<"StudyTimetable", 'Int'>
    readonly subject_id: FieldRef<"StudyTimetable", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudyTimetable findUnique
   */
  export type StudyTimetableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * Filter, which StudyTimetable to fetch.
     */
    where: StudyTimetableWhereUniqueInput
  }

  /**
   * StudyTimetable findUniqueOrThrow
   */
  export type StudyTimetableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * Filter, which StudyTimetable to fetch.
     */
    where: StudyTimetableWhereUniqueInput
  }

  /**
   * StudyTimetable findFirst
   */
  export type StudyTimetableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * Filter, which StudyTimetable to fetch.
     */
    where?: StudyTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyTimetables to fetch.
     */
    orderBy?: StudyTimetableOrderByWithRelationInput | StudyTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyTimetables.
     */
    cursor?: StudyTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyTimetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyTimetables.
     */
    distinct?: StudyTimetableScalarFieldEnum | StudyTimetableScalarFieldEnum[]
  }

  /**
   * StudyTimetable findFirstOrThrow
   */
  export type StudyTimetableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * Filter, which StudyTimetable to fetch.
     */
    where?: StudyTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyTimetables to fetch.
     */
    orderBy?: StudyTimetableOrderByWithRelationInput | StudyTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyTimetables.
     */
    cursor?: StudyTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyTimetables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyTimetables.
     */
    distinct?: StudyTimetableScalarFieldEnum | StudyTimetableScalarFieldEnum[]
  }

  /**
   * StudyTimetable findMany
   */
  export type StudyTimetableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * Filter, which StudyTimetables to fetch.
     */
    where?: StudyTimetableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyTimetables to fetch.
     */
    orderBy?: StudyTimetableOrderByWithRelationInput | StudyTimetableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyTimetables.
     */
    cursor?: StudyTimetableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyTimetables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyTimetables.
     */
    skip?: number
    distinct?: StudyTimetableScalarFieldEnum | StudyTimetableScalarFieldEnum[]
  }

  /**
   * StudyTimetable create
   */
  export type StudyTimetableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyTimetable.
     */
    data: XOR<StudyTimetableCreateInput, StudyTimetableUncheckedCreateInput>
  }

  /**
   * StudyTimetable createMany
   */
  export type StudyTimetableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyTimetables.
     */
    data: StudyTimetableCreateManyInput | StudyTimetableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudyTimetable createManyAndReturn
   */
  export type StudyTimetableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * The data used to create many StudyTimetables.
     */
    data: StudyTimetableCreateManyInput | StudyTimetableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyTimetable update
   */
  export type StudyTimetableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyTimetable.
     */
    data: XOR<StudyTimetableUpdateInput, StudyTimetableUncheckedUpdateInput>
    /**
     * Choose, which StudyTimetable to update.
     */
    where: StudyTimetableWhereUniqueInput
  }

  /**
   * StudyTimetable updateMany
   */
  export type StudyTimetableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyTimetables.
     */
    data: XOR<StudyTimetableUpdateManyMutationInput, StudyTimetableUncheckedUpdateManyInput>
    /**
     * Filter which StudyTimetables to update
     */
    where?: StudyTimetableWhereInput
    /**
     * Limit how many StudyTimetables to update.
     */
    limit?: number
  }

  /**
   * StudyTimetable updateManyAndReturn
   */
  export type StudyTimetableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * The data used to update StudyTimetables.
     */
    data: XOR<StudyTimetableUpdateManyMutationInput, StudyTimetableUncheckedUpdateManyInput>
    /**
     * Filter which StudyTimetables to update
     */
    where?: StudyTimetableWhereInput
    /**
     * Limit how many StudyTimetables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudyTimetable upsert
   */
  export type StudyTimetableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyTimetable to update in case it exists.
     */
    where: StudyTimetableWhereUniqueInput
    /**
     * In case the StudyTimetable found by the `where` argument doesn't exist, create a new StudyTimetable with this data.
     */
    create: XOR<StudyTimetableCreateInput, StudyTimetableUncheckedCreateInput>
    /**
     * In case the StudyTimetable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyTimetableUpdateInput, StudyTimetableUncheckedUpdateInput>
  }

  /**
   * StudyTimetable delete
   */
  export type StudyTimetableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
    /**
     * Filter which StudyTimetable to delete.
     */
    where: StudyTimetableWhereUniqueInput
  }

  /**
   * StudyTimetable deleteMany
   */
  export type StudyTimetableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyTimetables to delete
     */
    where?: StudyTimetableWhereInput
    /**
     * Limit how many StudyTimetables to delete.
     */
    limit?: number
  }

  /**
   * StudyTimetable without action
   */
  export type StudyTimetableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyTimetable
     */
    select?: StudyTimetableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudyTimetable
     */
    omit?: StudyTimetableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyTimetableInclude<ExtArgs> | null
  }


  /**
   * Model Score
   */

  export type AggregateScore = {
    _count: ScoreCountAggregateOutputType | null
    _avg: ScoreAvgAggregateOutputType | null
    _sum: ScoreSumAggregateOutputType | null
    _min: ScoreMinAggregateOutputType | null
    _max: ScoreMaxAggregateOutputType | null
  }

  export type ScoreAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoreSumAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoreMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoreMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    subject_id: number | null
    marks: number | null
  }

  export type ScoreCountAggregateOutputType = {
    id: number
    student_id: number
    subject_id: number
    marks: number
    _all: number
  }


  export type ScoreAvgAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoreSumAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoreMinAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoreMaxAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
  }

  export type ScoreCountAggregateInputType = {
    id?: true
    student_id?: true
    subject_id?: true
    marks?: true
    _all?: true
  }

  export type ScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Score to aggregate.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scores
    **/
    _count?: true | ScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreMaxAggregateInputType
  }

  export type GetScoreAggregateType<T extends ScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScore[P]>
      : GetScalarType<T[P], AggregateScore[P]>
  }




  export type ScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreWhereInput
    orderBy?: ScoreOrderByWithAggregationInput | ScoreOrderByWithAggregationInput[]
    by: ScoreScalarFieldEnum[] | ScoreScalarFieldEnum
    having?: ScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreCountAggregateInputType | true
    _avg?: ScoreAvgAggregateInputType
    _sum?: ScoreSumAggregateInputType
    _min?: ScoreMinAggregateInputType
    _max?: ScoreMaxAggregateInputType
  }

  export type ScoreGroupByOutputType = {
    id: number
    student_id: number
    subject_id: number
    marks: number
    _count: ScoreCountAggregateOutputType | null
    _avg: ScoreAvgAggregateOutputType | null
    _sum: ScoreSumAggregateOutputType | null
    _min: ScoreMinAggregateOutputType | null
    _max: ScoreMaxAggregateOutputType | null
  }

  type GetScoreGroupByPayload<T extends ScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreGroupByOutputType[P]>
        }
      >
    >


  export type ScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["score"]>

  export type ScoreSelectScalar = {
    id?: boolean
    student_id?: boolean
    subject_id?: boolean
    marks?: boolean
  }

  export type ScoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "subject_id" | "marks", ExtArgs["result"]["score"]>
  export type ScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ScoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $ScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Score"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      subject_id: number
      marks: number
    }, ExtArgs["result"]["score"]>
    composites: {}
  }

  type ScoreGetPayload<S extends boolean | null | undefined | ScoreDefaultArgs> = $Result.GetResult<Prisma.$ScorePayload, S>

  type ScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreCountAggregateInputType | true
    }

  export interface ScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Score'], meta: { name: 'Score' } }
    /**
     * Find zero or one Score that matches the filter.
     * @param {ScoreFindUniqueArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreFindUniqueArgs>(args: SelectSubset<T, ScoreFindUniqueArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Score that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreFindUniqueOrThrowArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Score that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindFirstArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreFindFirstArgs>(args?: SelectSubset<T, ScoreFindFirstArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Score that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindFirstOrThrowArgs} args - Arguments to find a Score
     * @example
     * // Get one Score
     * const score = await prisma.score.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Scores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scores
     * const scores = await prisma.score.findMany()
     * 
     * // Get first 10 Scores
     * const scores = await prisma.score.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreWithIdOnly = await prisma.score.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreFindManyArgs>(args?: SelectSubset<T, ScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Score.
     * @param {ScoreCreateArgs} args - Arguments to create a Score.
     * @example
     * // Create one Score
     * const Score = await prisma.score.create({
     *   data: {
     *     // ... data to create a Score
     *   }
     * })
     * 
     */
    create<T extends ScoreCreateArgs>(args: SelectSubset<T, ScoreCreateArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Scores.
     * @param {ScoreCreateManyArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const score = await prisma.score.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreCreateManyArgs>(args?: SelectSubset<T, ScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scores and returns the data saved in the database.
     * @param {ScoreCreateManyAndReturnArgs} args - Arguments to create many Scores.
     * @example
     * // Create many Scores
     * const score = await prisma.score.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scores and only return the `id`
     * const scoreWithIdOnly = await prisma.score.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Score.
     * @param {ScoreDeleteArgs} args - Arguments to delete one Score.
     * @example
     * // Delete one Score
     * const Score = await prisma.score.delete({
     *   where: {
     *     // ... filter to delete one Score
     *   }
     * })
     * 
     */
    delete<T extends ScoreDeleteArgs>(args: SelectSubset<T, ScoreDeleteArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Score.
     * @param {ScoreUpdateArgs} args - Arguments to update one Score.
     * @example
     * // Update one Score
     * const score = await prisma.score.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreUpdateArgs>(args: SelectSubset<T, ScoreUpdateArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Scores.
     * @param {ScoreDeleteManyArgs} args - Arguments to filter Scores to delete.
     * @example
     * // Delete a few Scores
     * const { count } = await prisma.score.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreDeleteManyArgs>(args?: SelectSubset<T, ScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scores
     * const score = await prisma.score.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreUpdateManyArgs>(args: SelectSubset<T, ScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scores and returns the data updated in the database.
     * @param {ScoreUpdateManyAndReturnArgs} args - Arguments to update many Scores.
     * @example
     * // Update many Scores
     * const score = await prisma.score.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Scores and only return the `id`
     * const scoreWithIdOnly = await prisma.score.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Score.
     * @param {ScoreUpsertArgs} args - Arguments to update or create a Score.
     * @example
     * // Update or create a Score
     * const score = await prisma.score.upsert({
     *   create: {
     *     // ... data to create a Score
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Score we want to update
     *   }
     * })
     */
    upsert<T extends ScoreUpsertArgs>(args: SelectSubset<T, ScoreUpsertArgs<ExtArgs>>): Prisma__ScoreClient<$Result.GetResult<Prisma.$ScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Scores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCountArgs} args - Arguments to filter Scores to count.
     * @example
     * // Count the number of Scores
     * const count = await prisma.score.count({
     *   where: {
     *     // ... the filter for the Scores we want to count
     *   }
     * })
    **/
    count<T extends ScoreCountArgs>(
      args?: Subset<T, ScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreAggregateArgs>(args: Subset<T, ScoreAggregateArgs>): Prisma.PrismaPromise<GetScoreAggregateType<T>>

    /**
     * Group by Score.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreGroupByArgs['orderBy'] }
        : { orderBy?: ScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Score model
   */
  readonly fields: ScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Score.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Score model
   */
  interface ScoreFieldRefs {
    readonly id: FieldRef<"Score", 'Int'>
    readonly student_id: FieldRef<"Score", 'Int'>
    readonly subject_id: FieldRef<"Score", 'Int'>
    readonly marks: FieldRef<"Score", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Score findUnique
   */
  export type ScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score findUniqueOrThrow
   */
  export type ScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score findFirst
   */
  export type ScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scores.
     */
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score findFirstOrThrow
   */
  export type ScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Score to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scores.
     */
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score findMany
   */
  export type ScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter, which Scores to fetch.
     */
    where?: ScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scores to fetch.
     */
    orderBy?: ScoreOrderByWithRelationInput | ScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scores.
     */
    cursor?: ScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scores.
     */
    skip?: number
    distinct?: ScoreScalarFieldEnum | ScoreScalarFieldEnum[]
  }

  /**
   * Score create
   */
  export type ScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Score.
     */
    data: XOR<ScoreCreateInput, ScoreUncheckedCreateInput>
  }

  /**
   * Score createMany
   */
  export type ScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scores.
     */
    data: ScoreCreateManyInput | ScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Score createManyAndReturn
   */
  export type ScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * The data used to create many Scores.
     */
    data: ScoreCreateManyInput | ScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Score update
   */
  export type ScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Score.
     */
    data: XOR<ScoreUpdateInput, ScoreUncheckedUpdateInput>
    /**
     * Choose, which Score to update.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score updateMany
   */
  export type ScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scores.
     */
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyInput>
    /**
     * Filter which Scores to update
     */
    where?: ScoreWhereInput
    /**
     * Limit how many Scores to update.
     */
    limit?: number
  }

  /**
   * Score updateManyAndReturn
   */
  export type ScoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * The data used to update Scores.
     */
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyInput>
    /**
     * Filter which Scores to update
     */
    where?: ScoreWhereInput
    /**
     * Limit how many Scores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Score upsert
   */
  export type ScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Score to update in case it exists.
     */
    where: ScoreWhereUniqueInput
    /**
     * In case the Score found by the `where` argument doesn't exist, create a new Score with this data.
     */
    create: XOR<ScoreCreateInput, ScoreUncheckedCreateInput>
    /**
     * In case the Score was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreUpdateInput, ScoreUncheckedUpdateInput>
  }

  /**
   * Score delete
   */
  export type ScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
    /**
     * Filter which Score to delete.
     */
    where: ScoreWhereUniqueInput
  }

  /**
   * Score deleteMany
   */
  export type ScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scores to delete
     */
    where?: ScoreWhereInput
    /**
     * Limit how many Scores to delete.
     */
    limit?: number
  }

  /**
   * Score without action
   */
  export type ScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Score
     */
    select?: ScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Score
     */
    omit?: ScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    roll_no: 'roll_no',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    class_teacher_id: 'class_teacher_id'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const QuestionBankScalarFieldEnum: {
    id: 'id',
    teacher_id: 'teacher_id',
    subject_id: 'subject_id',
    class_id: 'class_id'
  };

  export type QuestionBankScalarFieldEnum = (typeof QuestionBankScalarFieldEnum)[keyof typeof QuestionBankScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    content: 'content',
    question_bank_id: 'question_bank_id'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuizScalarFieldEnum: {
    id: 'id',
    class_id: 'class_id',
    subject_id: 'subject_id',
    question_bank_id: 'question_bank_id'
  };

  export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


  export const QuizQuestionScalarFieldEnum: {
    id: 'id',
    quiz_id: 'quiz_id',
    question_id: 'question_id'
  };

  export type QuizQuestionScalarFieldEnum = (typeof QuizQuestionScalarFieldEnum)[keyof typeof QuizQuestionScalarFieldEnum]


  export const StudentQuizScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    quiz_id: 'quiz_id'
  };

  export type StudentQuizScalarFieldEnum = (typeof StudentQuizScalarFieldEnum)[keyof typeof StudentQuizScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    teacher_id: 'teacher_id',
    class_id: 'class_id',
    subject_id: 'subject_id'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const StudentAssignmentScalarFieldEnum: {
    id: 'id',
    assignment_id: 'assignment_id',
    student_id: 'student_id'
  };

  export type StudentAssignmentScalarFieldEnum = (typeof StudentAssignmentScalarFieldEnum)[keyof typeof StudentAssignmentScalarFieldEnum]


  export const WeeklyScheduleScalarFieldEnum: {
    id: 'id',
    class_id: 'class_id',
    teacher_id: 'teacher_id',
    subject_id: 'subject_id'
  };

  export type WeeklyScheduleScalarFieldEnum = (typeof WeeklyScheduleScalarFieldEnum)[keyof typeof WeeklyScheduleScalarFieldEnum]


  export const StudyTimetableScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    subject_id: 'subject_id'
  };

  export type StudyTimetableScalarFieldEnum = (typeof StudyTimetableScalarFieldEnum)[keyof typeof StudyTimetableScalarFieldEnum]


  export const ScoreScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    subject_id: 'subject_id',
    marks: 'marks'
  };

  export type ScoreScalarFieldEnum = (typeof ScoreScalarFieldEnum)[keyof typeof ScoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roll_no?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    assignments?: AssignmentListRelationFilter
    teacher_classes?: ClassListRelationFilter
    questionBanks?: QuestionBankListRelationFilter
    scores?: ScoreListRelationFilter
    studentAssignments?: StudentAssignmentListRelationFilter
    studentQuizzes?: StudentQuizListRelationFilter
    studyTimetables?: StudyTimetableListRelationFilter
    weeklySchedules?: WeeklyScheduleListRelationFilter
    student_classes?: ClassListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    teacher_classes?: ClassOrderByRelationAggregateInput
    questionBanks?: QuestionBankOrderByRelationAggregateInput
    scores?: ScoreOrderByRelationAggregateInput
    studentAssignments?: StudentAssignmentOrderByRelationAggregateInput
    studentQuizzes?: StudentQuizOrderByRelationAggregateInput
    studyTimetables?: StudyTimetableOrderByRelationAggregateInput
    weeklySchedules?: WeeklyScheduleOrderByRelationAggregateInput
    student_classes?: ClassOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    roll_no?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    assignments?: AssignmentListRelationFilter
    teacher_classes?: ClassListRelationFilter
    questionBanks?: QuestionBankListRelationFilter
    scores?: ScoreListRelationFilter
    studentAssignments?: StudentAssignmentListRelationFilter
    studentQuizzes?: StudentQuizListRelationFilter
    studyTimetables?: StudyTimetableListRelationFilter
    weeklySchedules?: WeeklyScheduleListRelationFilter
    student_classes?: ClassListRelationFilter
  }, "id" | "email" | "roll_no">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    roll_no?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    class_teacher_id?: IntNullableFilter<"Class"> | number | null
    assignments?: AssignmentListRelationFilter
    teacher?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    questionBanks?: QuestionBankListRelationFilter
    quizzes?: QuizListRelationFilter
    weeklySchedules?: WeeklyScheduleListRelationFilter
    students?: UserListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrderInput | SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    teacher?: UserOrderByWithRelationInput
    questionBanks?: QuestionBankOrderByRelationAggregateInput
    quizzes?: QuizOrderByRelationAggregateInput
    weeklySchedules?: WeeklyScheduleOrderByRelationAggregateInput
    students?: UserOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    class_teacher_id?: IntNullableFilter<"Class"> | number | null
    assignments?: AssignmentListRelationFilter
    teacher?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    questionBanks?: QuestionBankListRelationFilter
    quizzes?: QuizListRelationFilter
    weeklySchedules?: WeeklyScheduleListRelationFilter
    students?: UserListRelationFilter
  }, "id">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrderInput | SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Class"> | number
    name?: StringWithAggregatesFilter<"Class"> | string
    class_teacher_id?: IntNullableWithAggregatesFilter<"Class"> | number | null
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    assignments?: AssignmentListRelationFilter
    questionBanks?: QuestionBankListRelationFilter
    quizzes?: QuizListRelationFilter
    scores?: ScoreListRelationFilter
    studyTimetables?: StudyTimetableListRelationFilter
    weeklySchedules?: WeeklyScheduleListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    questionBanks?: QuestionBankOrderByRelationAggregateInput
    quizzes?: QuizOrderByRelationAggregateInput
    scores?: ScoreOrderByRelationAggregateInput
    studyTimetables?: StudyTimetableOrderByRelationAggregateInput
    weeklySchedules?: WeeklyScheduleOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    assignments?: AssignmentListRelationFilter
    questionBanks?: QuestionBankListRelationFilter
    quizzes?: QuizListRelationFilter
    scores?: ScoreListRelationFilter
    studyTimetables?: StudyTimetableListRelationFilter
    weeklySchedules?: WeeklyScheduleListRelationFilter
  }, "id">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    name?: StringWithAggregatesFilter<"Subject"> | string
  }

  export type QuestionBankWhereInput = {
    AND?: QuestionBankWhereInput | QuestionBankWhereInput[]
    OR?: QuestionBankWhereInput[]
    NOT?: QuestionBankWhereInput | QuestionBankWhereInput[]
    id?: IntFilter<"QuestionBank"> | number
    teacher_id?: IntFilter<"QuestionBank"> | number
    subject_id?: IntFilter<"QuestionBank"> | number
    class_id?: IntFilter<"QuestionBank"> | number
    questions?: QuestionListRelationFilter
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    quizzes?: QuizListRelationFilter
  }

  export type QuestionBankOrderByWithRelationInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
    questions?: QuestionOrderByRelationAggregateInput
    class?: ClassOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
    quizzes?: QuizOrderByRelationAggregateInput
  }

  export type QuestionBankWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionBankWhereInput | QuestionBankWhereInput[]
    OR?: QuestionBankWhereInput[]
    NOT?: QuestionBankWhereInput | QuestionBankWhereInput[]
    teacher_id?: IntFilter<"QuestionBank"> | number
    subject_id?: IntFilter<"QuestionBank"> | number
    class_id?: IntFilter<"QuestionBank"> | number
    questions?: QuestionListRelationFilter
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    quizzes?: QuizListRelationFilter
  }, "id">

  export type QuestionBankOrderByWithAggregationInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
    _count?: QuestionBankCountOrderByAggregateInput
    _avg?: QuestionBankAvgOrderByAggregateInput
    _max?: QuestionBankMaxOrderByAggregateInput
    _min?: QuestionBankMinOrderByAggregateInput
    _sum?: QuestionBankSumOrderByAggregateInput
  }

  export type QuestionBankScalarWhereWithAggregatesInput = {
    AND?: QuestionBankScalarWhereWithAggregatesInput | QuestionBankScalarWhereWithAggregatesInput[]
    OR?: QuestionBankScalarWhereWithAggregatesInput[]
    NOT?: QuestionBankScalarWhereWithAggregatesInput | QuestionBankScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionBank"> | number
    teacher_id?: IntWithAggregatesFilter<"QuestionBank"> | number
    subject_id?: IntWithAggregatesFilter<"QuestionBank"> | number
    class_id?: IntWithAggregatesFilter<"QuestionBank"> | number
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: IntFilter<"Question"> | number
    content?: StringFilter<"Question"> | string
    question_bank_id?: IntFilter<"Question"> | number
    question_bank?: XOR<QuestionBankScalarRelationFilter, QuestionBankWhereInput>
    quizQuestions?: QuizQuestionListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
    question_bank?: QuestionBankOrderByWithRelationInput
    quizQuestions?: QuizQuestionOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    content?: StringFilter<"Question"> | string
    question_bank_id?: IntFilter<"Question"> | number
    question_bank?: XOR<QuestionBankScalarRelationFilter, QuestionBankWhereInput>
    quizQuestions?: QuizQuestionListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Question"> | number
    content?: StringWithAggregatesFilter<"Question"> | string
    question_bank_id?: IntWithAggregatesFilter<"Question"> | number
  }

  export type QuizWhereInput = {
    AND?: QuizWhereInput | QuizWhereInput[]
    OR?: QuizWhereInput[]
    NOT?: QuizWhereInput | QuizWhereInput[]
    id?: IntFilter<"Quiz"> | number
    class_id?: IntFilter<"Quiz"> | number
    subject_id?: IntFilter<"Quiz"> | number
    question_bank_id?: IntFilter<"Quiz"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    question_bank?: XOR<QuestionBankScalarRelationFilter, QuestionBankWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    quizQuestions?: QuizQuestionListRelationFilter
    studentQuizzes?: StudentQuizListRelationFilter
  }

  export type QuizOrderByWithRelationInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
    class?: ClassOrderByWithRelationInput
    question_bank?: QuestionBankOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    quizQuestions?: QuizQuestionOrderByRelationAggregateInput
    studentQuizzes?: StudentQuizOrderByRelationAggregateInput
  }

  export type QuizWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuizWhereInput | QuizWhereInput[]
    OR?: QuizWhereInput[]
    NOT?: QuizWhereInput | QuizWhereInput[]
    class_id?: IntFilter<"Quiz"> | number
    subject_id?: IntFilter<"Quiz"> | number
    question_bank_id?: IntFilter<"Quiz"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    question_bank?: XOR<QuestionBankScalarRelationFilter, QuestionBankWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    quizQuestions?: QuizQuestionListRelationFilter
    studentQuizzes?: StudentQuizListRelationFilter
  }, "id">

  export type QuizOrderByWithAggregationInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
    _count?: QuizCountOrderByAggregateInput
    _avg?: QuizAvgOrderByAggregateInput
    _max?: QuizMaxOrderByAggregateInput
    _min?: QuizMinOrderByAggregateInput
    _sum?: QuizSumOrderByAggregateInput
  }

  export type QuizScalarWhereWithAggregatesInput = {
    AND?: QuizScalarWhereWithAggregatesInput | QuizScalarWhereWithAggregatesInput[]
    OR?: QuizScalarWhereWithAggregatesInput[]
    NOT?: QuizScalarWhereWithAggregatesInput | QuizScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Quiz"> | number
    class_id?: IntWithAggregatesFilter<"Quiz"> | number
    subject_id?: IntWithAggregatesFilter<"Quiz"> | number
    question_bank_id?: IntWithAggregatesFilter<"Quiz"> | number
  }

  export type QuizQuestionWhereInput = {
    AND?: QuizQuestionWhereInput | QuizQuestionWhereInput[]
    OR?: QuizQuestionWhereInput[]
    NOT?: QuizQuestionWhereInput | QuizQuestionWhereInput[]
    id?: IntFilter<"QuizQuestion"> | number
    quiz_id?: IntFilter<"QuizQuestion"> | number
    question_id?: IntFilter<"QuizQuestion"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    quiz?: XOR<QuizScalarRelationFilter, QuizWhereInput>
  }

  export type QuizQuestionOrderByWithRelationInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
    question?: QuestionOrderByWithRelationInput
    quiz?: QuizOrderByWithRelationInput
  }

  export type QuizQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuizQuestionWhereInput | QuizQuestionWhereInput[]
    OR?: QuizQuestionWhereInput[]
    NOT?: QuizQuestionWhereInput | QuizQuestionWhereInput[]
    quiz_id?: IntFilter<"QuizQuestion"> | number
    question_id?: IntFilter<"QuizQuestion"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    quiz?: XOR<QuizScalarRelationFilter, QuizWhereInput>
  }, "id">

  export type QuizQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
    _count?: QuizQuestionCountOrderByAggregateInput
    _avg?: QuizQuestionAvgOrderByAggregateInput
    _max?: QuizQuestionMaxOrderByAggregateInput
    _min?: QuizQuestionMinOrderByAggregateInput
    _sum?: QuizQuestionSumOrderByAggregateInput
  }

  export type QuizQuestionScalarWhereWithAggregatesInput = {
    AND?: QuizQuestionScalarWhereWithAggregatesInput | QuizQuestionScalarWhereWithAggregatesInput[]
    OR?: QuizQuestionScalarWhereWithAggregatesInput[]
    NOT?: QuizQuestionScalarWhereWithAggregatesInput | QuizQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuizQuestion"> | number
    quiz_id?: IntWithAggregatesFilter<"QuizQuestion"> | number
    question_id?: IntWithAggregatesFilter<"QuizQuestion"> | number
  }

  export type StudentQuizWhereInput = {
    AND?: StudentQuizWhereInput | StudentQuizWhereInput[]
    OR?: StudentQuizWhereInput[]
    NOT?: StudentQuizWhereInput | StudentQuizWhereInput[]
    id?: IntFilter<"StudentQuiz"> | number
    student_id?: IntFilter<"StudentQuiz"> | number
    quiz_id?: IntFilter<"StudentQuiz"> | number
    quiz?: XOR<QuizScalarRelationFilter, QuizWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StudentQuizOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
    quiz?: QuizOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type StudentQuizWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentQuizWhereInput | StudentQuizWhereInput[]
    OR?: StudentQuizWhereInput[]
    NOT?: StudentQuizWhereInput | StudentQuizWhereInput[]
    student_id?: IntFilter<"StudentQuiz"> | number
    quiz_id?: IntFilter<"StudentQuiz"> | number
    quiz?: XOR<QuizScalarRelationFilter, QuizWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type StudentQuizOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
    _count?: StudentQuizCountOrderByAggregateInput
    _avg?: StudentQuizAvgOrderByAggregateInput
    _max?: StudentQuizMaxOrderByAggregateInput
    _min?: StudentQuizMinOrderByAggregateInput
    _sum?: StudentQuizSumOrderByAggregateInput
  }

  export type StudentQuizScalarWhereWithAggregatesInput = {
    AND?: StudentQuizScalarWhereWithAggregatesInput | StudentQuizScalarWhereWithAggregatesInput[]
    OR?: StudentQuizScalarWhereWithAggregatesInput[]
    NOT?: StudentQuizScalarWhereWithAggregatesInput | StudentQuizScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentQuiz"> | number
    student_id?: IntWithAggregatesFilter<"StudentQuiz"> | number
    quiz_id?: IntWithAggregatesFilter<"StudentQuiz"> | number
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    id?: IntFilter<"Assignment"> | number
    title?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    teacher_id?: IntFilter<"Assignment"> | number
    class_id?: IntFilter<"Assignment"> | number
    subject_id?: IntFilter<"Assignment"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    studentAssignments?: StudentAssignmentListRelationFilter
  }

  export type AssignmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    class?: ClassOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
    studentAssignments?: StudentAssignmentOrderByRelationAggregateInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    title?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    teacher_id?: IntFilter<"Assignment"> | number
    class_id?: IntFilter<"Assignment"> | number
    subject_id?: IntFilter<"Assignment"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    studentAssignments?: StudentAssignmentListRelationFilter
  }, "id">

  export type AssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _avg?: AssignmentAvgOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
    _sum?: AssignmentSumOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Assignment"> | number
    title?: StringWithAggregatesFilter<"Assignment"> | string
    description?: StringWithAggregatesFilter<"Assignment"> | string
    teacher_id?: IntWithAggregatesFilter<"Assignment"> | number
    class_id?: IntWithAggregatesFilter<"Assignment"> | number
    subject_id?: IntWithAggregatesFilter<"Assignment"> | number
  }

  export type StudentAssignmentWhereInput = {
    AND?: StudentAssignmentWhereInput | StudentAssignmentWhereInput[]
    OR?: StudentAssignmentWhereInput[]
    NOT?: StudentAssignmentWhereInput | StudentAssignmentWhereInput[]
    id?: IntFilter<"StudentAssignment"> | number
    assignment_id?: IntFilter<"StudentAssignment"> | number
    student_id?: IntFilter<"StudentAssignment"> | number
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StudentAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type StudentAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentAssignmentWhereInput | StudentAssignmentWhereInput[]
    OR?: StudentAssignmentWhereInput[]
    NOT?: StudentAssignmentWhereInput | StudentAssignmentWhereInput[]
    assignment_id?: IntFilter<"StudentAssignment"> | number
    student_id?: IntFilter<"StudentAssignment"> | number
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type StudentAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
    _count?: StudentAssignmentCountOrderByAggregateInput
    _avg?: StudentAssignmentAvgOrderByAggregateInput
    _max?: StudentAssignmentMaxOrderByAggregateInput
    _min?: StudentAssignmentMinOrderByAggregateInput
    _sum?: StudentAssignmentSumOrderByAggregateInput
  }

  export type StudentAssignmentScalarWhereWithAggregatesInput = {
    AND?: StudentAssignmentScalarWhereWithAggregatesInput | StudentAssignmentScalarWhereWithAggregatesInput[]
    OR?: StudentAssignmentScalarWhereWithAggregatesInput[]
    NOT?: StudentAssignmentScalarWhereWithAggregatesInput | StudentAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentAssignment"> | number
    assignment_id?: IntWithAggregatesFilter<"StudentAssignment"> | number
    student_id?: IntWithAggregatesFilter<"StudentAssignment"> | number
  }

  export type WeeklyScheduleWhereInput = {
    AND?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    OR?: WeeklyScheduleWhereInput[]
    NOT?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    id?: IntFilter<"WeeklySchedule"> | number
    class_id?: IntFilter<"WeeklySchedule"> | number
    teacher_id?: IntFilter<"WeeklySchedule"> | number
    subject_id?: IntFilter<"WeeklySchedule"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WeeklyScheduleOrderByWithRelationInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class?: ClassOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
  }

  export type WeeklyScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    OR?: WeeklyScheduleWhereInput[]
    NOT?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    class_id?: IntFilter<"WeeklySchedule"> | number
    teacher_id?: IntFilter<"WeeklySchedule"> | number
    subject_id?: IntFilter<"WeeklySchedule"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WeeklyScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    _count?: WeeklyScheduleCountOrderByAggregateInput
    _avg?: WeeklyScheduleAvgOrderByAggregateInput
    _max?: WeeklyScheduleMaxOrderByAggregateInput
    _min?: WeeklyScheduleMinOrderByAggregateInput
    _sum?: WeeklyScheduleSumOrderByAggregateInput
  }

  export type WeeklyScheduleScalarWhereWithAggregatesInput = {
    AND?: WeeklyScheduleScalarWhereWithAggregatesInput | WeeklyScheduleScalarWhereWithAggregatesInput[]
    OR?: WeeklyScheduleScalarWhereWithAggregatesInput[]
    NOT?: WeeklyScheduleScalarWhereWithAggregatesInput | WeeklyScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    class_id?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    teacher_id?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    subject_id?: IntWithAggregatesFilter<"WeeklySchedule"> | number
  }

  export type StudyTimetableWhereInput = {
    AND?: StudyTimetableWhereInput | StudyTimetableWhereInput[]
    OR?: StudyTimetableWhereInput[]
    NOT?: StudyTimetableWhereInput | StudyTimetableWhereInput[]
    id?: IntFilter<"StudyTimetable"> | number
    student_id?: IntFilter<"StudyTimetable"> | number
    subject_id?: IntFilter<"StudyTimetable"> | number
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type StudyTimetableOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    student?: UserOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
  }

  export type StudyTimetableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudyTimetableWhereInput | StudyTimetableWhereInput[]
    OR?: StudyTimetableWhereInput[]
    NOT?: StudyTimetableWhereInput | StudyTimetableWhereInput[]
    student_id?: IntFilter<"StudyTimetable"> | number
    subject_id?: IntFilter<"StudyTimetable"> | number
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "id">

  export type StudyTimetableOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    _count?: StudyTimetableCountOrderByAggregateInput
    _avg?: StudyTimetableAvgOrderByAggregateInput
    _max?: StudyTimetableMaxOrderByAggregateInput
    _min?: StudyTimetableMinOrderByAggregateInput
    _sum?: StudyTimetableSumOrderByAggregateInput
  }

  export type StudyTimetableScalarWhereWithAggregatesInput = {
    AND?: StudyTimetableScalarWhereWithAggregatesInput | StudyTimetableScalarWhereWithAggregatesInput[]
    OR?: StudyTimetableScalarWhereWithAggregatesInput[]
    NOT?: StudyTimetableScalarWhereWithAggregatesInput | StudyTimetableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudyTimetable"> | number
    student_id?: IntWithAggregatesFilter<"StudyTimetable"> | number
    subject_id?: IntWithAggregatesFilter<"StudyTimetable"> | number
  }

  export type ScoreWhereInput = {
    AND?: ScoreWhereInput | ScoreWhereInput[]
    OR?: ScoreWhereInput[]
    NOT?: ScoreWhereInput | ScoreWhereInput[]
    id?: IntFilter<"Score"> | number
    student_id?: IntFilter<"Score"> | number
    subject_id?: IntFilter<"Score"> | number
    marks?: IntFilter<"Score"> | number
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type ScoreOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
    student?: UserOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
  }

  export type ScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScoreWhereInput | ScoreWhereInput[]
    OR?: ScoreWhereInput[]
    NOT?: ScoreWhereInput | ScoreWhereInput[]
    student_id?: IntFilter<"Score"> | number
    subject_id?: IntFilter<"Score"> | number
    marks?: IntFilter<"Score"> | number
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "id">

  export type ScoreOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
    _count?: ScoreCountOrderByAggregateInput
    _avg?: ScoreAvgOrderByAggregateInput
    _max?: ScoreMaxOrderByAggregateInput
    _min?: ScoreMinOrderByAggregateInput
    _sum?: ScoreSumOrderByAggregateInput
  }

  export type ScoreScalarWhereWithAggregatesInput = {
    AND?: ScoreScalarWhereWithAggregatesInput | ScoreScalarWhereWithAggregatesInput[]
    OR?: ScoreScalarWhereWithAggregatesInput[]
    NOT?: ScoreScalarWhereWithAggregatesInput | ScoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Score"> | number
    student_id?: IntWithAggregatesFilter<"Score"> | number
    subject_id?: IntWithAggregatesFilter<"Score"> | number
    marks?: IntWithAggregatesFilter<"Score"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    teacher?: UserCreateNestedOneWithoutTeacher_classesInput
    questionBanks?: QuestionBankCreateNestedManyWithoutClassInput
    quizzes?: QuizCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutClassInput
    students?: UserCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutClassInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput
    students?: UserUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    teacher?: UserUpdateOneWithoutTeacher_classesNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutClassNestedInput
    quizzes?: QuizUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutClassNestedInput
    students?: UserUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput
    students?: UserUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassCreateManyInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
  }

  export type ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubjectCreateInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankCreateNestedManyWithoutSubjectInput
    quizzes?: QuizCreateNestedManyWithoutSubjectInput
    scores?: ScoreCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutSubjectInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    name: string
  }

  export type SubjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionBankCreateInput = {
    questions?: QuestionCreateNestedManyWithoutQuestion_bankInput
    class: ClassCreateNestedOneWithoutQuestionBanksInput
    subject: SubjectCreateNestedOneWithoutQuestionBanksInput
    teacher: UserCreateNestedOneWithoutQuestionBanksInput
    quizzes?: QuizCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankUncheckedCreateInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankUpdateInput = {
    questions?: QuestionUpdateManyWithoutQuestion_bankNestedInput
    class?: ClassUpdateOneRequiredWithoutQuestionBanksNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuestionBanksNestedInput
    teacher?: UserUpdateOneRequiredWithoutQuestionBanksNestedInput
    quizzes?: QuizUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankCreateManyInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
  }

  export type QuestionBankUpdateManyMutationInput = {

  }

  export type QuestionBankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionCreateInput = {
    content: string
    question_bank: QuestionBankCreateNestedOneWithoutQuestionsInput
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    content: string
    question_bank_id: number
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuestionsNestedInput
    quizQuestions?: QuizQuestionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: number
    content: string
    question_bank_id: number
  }

  export type QuestionUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizCreateInput = {
    class: ClassCreateNestedOneWithoutQuizzesInput
    question_bank: QuestionBankCreateNestedOneWithoutQuizzesInput
    subject: SubjectCreateNestedOneWithoutQuizzesInput
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizUpdateInput = {
    class?: ClassUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuizzesNestedInput
    quizQuestions?: QuizQuestionUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizCreateManyInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
  }

  export type QuizUpdateManyMutationInput = {

  }

  export type QuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizQuestionCreateInput = {
    question: QuestionCreateNestedOneWithoutQuizQuestionsInput
    quiz: QuizCreateNestedOneWithoutQuizQuestionsInput
  }

  export type QuizQuestionUncheckedCreateInput = {
    id?: number
    quiz_id: number
    question_id: number
  }

  export type QuizQuestionUpdateInput = {
    question?: QuestionUpdateOneRequiredWithoutQuizQuestionsNestedInput
    quiz?: QuizUpdateOneRequiredWithoutQuizQuestionsNestedInput
  }

  export type QuizQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizQuestionCreateManyInput = {
    id?: number
    quiz_id: number
    question_id: number
  }

  export type QuizQuestionUpdateManyMutationInput = {

  }

  export type QuizQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentQuizCreateInput = {
    quiz: QuizCreateNestedOneWithoutStudentQuizzesInput
    student: UserCreateNestedOneWithoutStudentQuizzesInput
  }

  export type StudentQuizUncheckedCreateInput = {
    id?: number
    student_id: number
    quiz_id: number
  }

  export type StudentQuizUpdateInput = {
    quiz?: QuizUpdateOneRequiredWithoutStudentQuizzesNestedInput
    student?: UserUpdateOneRequiredWithoutStudentQuizzesNestedInput
  }

  export type StudentQuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentQuizCreateManyInput = {
    id?: number
    student_id: number
    quiz_id: number
  }

  export type StudentQuizUpdateManyMutationInput = {

  }

  export type StudentQuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type AssignmentCreateInput = {
    title: string
    description: string
    class: ClassCreateNestedOneWithoutAssignmentsInput
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentCreateManyInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
  }

  export type AssignmentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAssignmentCreateInput = {
    assignment: AssignmentCreateNestedOneWithoutStudentAssignmentsInput
    student: UserCreateNestedOneWithoutStudentAssignmentsInput
  }

  export type StudentAssignmentUncheckedCreateInput = {
    id?: number
    assignment_id: number
    student_id: number
  }

  export type StudentAssignmentUpdateInput = {
    assignment?: AssignmentUpdateOneRequiredWithoutStudentAssignmentsNestedInput
    student?: UserUpdateOneRequiredWithoutStudentAssignmentsNestedInput
  }

  export type StudentAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAssignmentCreateManyInput = {
    id?: number
    assignment_id: number
    student_id: number
  }

  export type StudentAssignmentUpdateManyMutationInput = {

  }

  export type StudentAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleCreateInput = {
    class: ClassCreateNestedOneWithoutWeeklySchedulesInput
    subject: SubjectCreateNestedOneWithoutWeeklySchedulesInput
    teacher: UserCreateNestedOneWithoutWeeklySchedulesInput
  }

  export type WeeklyScheduleUncheckedCreateInput = {
    id?: number
    class_id: number
    teacher_id: number
    subject_id: number
  }

  export type WeeklyScheduleUpdateInput = {
    class?: ClassUpdateOneRequiredWithoutWeeklySchedulesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutWeeklySchedulesNestedInput
    teacher?: UserUpdateOneRequiredWithoutWeeklySchedulesNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleCreateManyInput = {
    id?: number
    class_id: number
    teacher_id: number
    subject_id: number
  }

  export type WeeklyScheduleUpdateManyMutationInput = {

  }

  export type WeeklyScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudyTimetableCreateInput = {
    student: UserCreateNestedOneWithoutStudyTimetablesInput
    subject: SubjectCreateNestedOneWithoutStudyTimetablesInput
  }

  export type StudyTimetableUncheckedCreateInput = {
    id?: number
    student_id: number
    subject_id: number
  }

  export type StudyTimetableUpdateInput = {
    student?: UserUpdateOneRequiredWithoutStudyTimetablesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutStudyTimetablesNestedInput
  }

  export type StudyTimetableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudyTimetableCreateManyInput = {
    id?: number
    student_id: number
    subject_id: number
  }

  export type StudyTimetableUpdateManyMutationInput = {

  }

  export type StudyTimetableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreCreateInput = {
    marks: number
    student: UserCreateNestedOneWithoutScoresInput
    subject: SubjectCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateInput = {
    id?: number
    student_id: number
    subject_id: number
    marks: number
  }

  export type ScoreUpdateInput = {
    marks?: IntFieldUpdateOperationsInput | number
    student?: UserUpdateOneRequiredWithoutScoresNestedInput
    subject?: SubjectUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreCreateManyInput = {
    id?: number
    student_id: number
    subject_id: number
    marks: number
  }

  export type ScoreUpdateManyMutationInput = {
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type QuestionBankListRelationFilter = {
    every?: QuestionBankWhereInput
    some?: QuestionBankWhereInput
    none?: QuestionBankWhereInput
  }

  export type ScoreListRelationFilter = {
    every?: ScoreWhereInput
    some?: ScoreWhereInput
    none?: ScoreWhereInput
  }

  export type StudentAssignmentListRelationFilter = {
    every?: StudentAssignmentWhereInput
    some?: StudentAssignmentWhereInput
    none?: StudentAssignmentWhereInput
  }

  export type StudentQuizListRelationFilter = {
    every?: StudentQuizWhereInput
    some?: StudentQuizWhereInput
    none?: StudentQuizWhereInput
  }

  export type StudyTimetableListRelationFilter = {
    every?: StudyTimetableWhereInput
    some?: StudyTimetableWhereInput
    none?: StudyTimetableWhereInput
  }

  export type WeeklyScheduleListRelationFilter = {
    every?: WeeklyScheduleWhereInput
    some?: WeeklyScheduleWhereInput
    none?: WeeklyScheduleWhereInput
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionBankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentQuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyTimetableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeeklyScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roll_no?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type QuizListRelationFilter = {
    every?: QuizWhereInput
    some?: QuizWhereInput
    none?: QuizWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type QuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    id?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    id?: SortOrder
    class_teacher_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionBankCountOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type QuestionBankAvgOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type QuestionBankMaxOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type QuestionBankMinOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type QuestionBankSumOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
    class_id?: SortOrder
  }

  export type QuestionBankScalarRelationFilter = {
    is?: QuestionBankWhereInput
    isNot?: QuestionBankWhereInput
  }

  export type QuizQuestionListRelationFilter = {
    every?: QuizQuestionWhereInput
    some?: QuizQuestionWhereInput
    none?: QuizQuestionWhereInput
  }

  export type QuizQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuizCountOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuizAvgOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuizMaxOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuizMinOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuizSumOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
    question_bank_id?: SortOrder
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type QuizScalarRelationFilter = {
    is?: QuizWhereInput
    isNot?: QuizWhereInput
  }

  export type QuizQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type QuizQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type QuizQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type QuizQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type QuizQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    question_id?: SortOrder
  }

  export type StudentQuizCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type StudentQuizAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type StudentQuizMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type StudentQuizMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type StudentQuizSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    quiz_id?: SortOrder
  }

  export type AssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type AssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type AssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    teacher_id?: SortOrder
    class_id?: SortOrder
    subject_id?: SortOrder
  }

  export type AssignmentScalarRelationFilter = {
    is?: AssignmentWhereInput
    isNot?: AssignmentWhereInput
  }

  export type StudentAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type StudentAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type StudentAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type StudentAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type StudentAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    assignment_id?: SortOrder
    student_id?: SortOrder
  }

  export type WeeklyScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type WeeklyScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type WeeklyScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type WeeklyScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type WeeklyScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    class_id?: SortOrder
    teacher_id?: SortOrder
    subject_id?: SortOrder
  }

  export type StudyTimetableCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type StudyTimetableAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type StudyTimetableMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type StudyTimetableMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type StudyTimetableSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
  }

  export type ScoreCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type ScoreAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type ScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type ScoreMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type ScoreSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    subject_id?: SortOrder
    marks?: SortOrder
  }

  export type AssignmentCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutTeacherInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type QuestionBankCreateNestedManyWithoutTeacherInput = {
    create?: XOR<QuestionBankCreateWithoutTeacherInput, QuestionBankUncheckedCreateWithoutTeacherInput> | QuestionBankCreateWithoutTeacherInput[] | QuestionBankUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutTeacherInput | QuestionBankCreateOrConnectWithoutTeacherInput[]
    createMany?: QuestionBankCreateManyTeacherInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type ScoreCreateNestedManyWithoutStudentInput = {
    create?: XOR<ScoreCreateWithoutStudentInput, ScoreUncheckedCreateWithoutStudentInput> | ScoreCreateWithoutStudentInput[] | ScoreUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutStudentInput | ScoreCreateOrConnectWithoutStudentInput[]
    createMany?: ScoreCreateManyStudentInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type StudentAssignmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAssignmentCreateWithoutStudentInput, StudentAssignmentUncheckedCreateWithoutStudentInput> | StudentAssignmentCreateWithoutStudentInput[] | StudentAssignmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutStudentInput | StudentAssignmentCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAssignmentCreateManyStudentInputEnvelope
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
  }

  export type StudentQuizCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentQuizCreateWithoutStudentInput, StudentQuizUncheckedCreateWithoutStudentInput> | StudentQuizCreateWithoutStudentInput[] | StudentQuizUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutStudentInput | StudentQuizCreateOrConnectWithoutStudentInput[]
    createMany?: StudentQuizCreateManyStudentInputEnvelope
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
  }

  export type StudyTimetableCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudyTimetableCreateWithoutStudentInput, StudyTimetableUncheckedCreateWithoutStudentInput> | StudyTimetableCreateWithoutStudentInput[] | StudyTimetableUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutStudentInput | StudyTimetableCreateOrConnectWithoutStudentInput[]
    createMany?: StudyTimetableCreateManyStudentInputEnvelope
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
  }

  export type WeeklyScheduleCreateNestedManyWithoutTeacherInput = {
    create?: XOR<WeeklyScheduleCreateWithoutTeacherInput, WeeklyScheduleUncheckedCreateWithoutTeacherInput> | WeeklyScheduleCreateWithoutTeacherInput[] | WeeklyScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutTeacherInput | WeeklyScheduleCreateOrConnectWithoutTeacherInput[]
    createMany?: WeeklyScheduleCreateManyTeacherInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<QuestionBankCreateWithoutTeacherInput, QuestionBankUncheckedCreateWithoutTeacherInput> | QuestionBankCreateWithoutTeacherInput[] | QuestionBankUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutTeacherInput | QuestionBankCreateOrConnectWithoutTeacherInput[]
    createMany?: QuestionBankCreateManyTeacherInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ScoreCreateWithoutStudentInput, ScoreUncheckedCreateWithoutStudentInput> | ScoreCreateWithoutStudentInput[] | ScoreUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutStudentInput | ScoreCreateOrConnectWithoutStudentInput[]
    createMany?: ScoreCreateManyStudentInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAssignmentCreateWithoutStudentInput, StudentAssignmentUncheckedCreateWithoutStudentInput> | StudentAssignmentCreateWithoutStudentInput[] | StudentAssignmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutStudentInput | StudentAssignmentCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAssignmentCreateManyStudentInputEnvelope
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
  }

  export type StudentQuizUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentQuizCreateWithoutStudentInput, StudentQuizUncheckedCreateWithoutStudentInput> | StudentQuizCreateWithoutStudentInput[] | StudentQuizUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutStudentInput | StudentQuizCreateOrConnectWithoutStudentInput[]
    createMany?: StudentQuizCreateManyStudentInputEnvelope
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
  }

  export type StudyTimetableUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudyTimetableCreateWithoutStudentInput, StudyTimetableUncheckedCreateWithoutStudentInput> | StudyTimetableCreateWithoutStudentInput[] | StudyTimetableUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutStudentInput | StudyTimetableCreateOrConnectWithoutStudentInput[]
    createMany?: StudyTimetableCreateManyStudentInputEnvelope
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
  }

  export type WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<WeeklyScheduleCreateWithoutTeacherInput, WeeklyScheduleUncheckedCreateWithoutTeacherInput> | WeeklyScheduleCreateWithoutTeacherInput[] | WeeklyScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutTeacherInput | WeeklyScheduleCreateOrConnectWithoutTeacherInput[]
    createMany?: WeeklyScheduleCreateManyTeacherInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AssignmentUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutTeacherInput | AssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutTeacherInput | AssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutTeacherInput | AssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTeacherInput | ClassUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTeacherInput | ClassUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTeacherInput | ClassUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type QuestionBankUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<QuestionBankCreateWithoutTeacherInput, QuestionBankUncheckedCreateWithoutTeacherInput> | QuestionBankCreateWithoutTeacherInput[] | QuestionBankUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutTeacherInput | QuestionBankCreateOrConnectWithoutTeacherInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutTeacherInput | QuestionBankUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: QuestionBankCreateManyTeacherInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutTeacherInput | QuestionBankUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutTeacherInput | QuestionBankUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type ScoreUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ScoreCreateWithoutStudentInput, ScoreUncheckedCreateWithoutStudentInput> | ScoreCreateWithoutStudentInput[] | ScoreUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutStudentInput | ScoreCreateOrConnectWithoutStudentInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutStudentInput | ScoreUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ScoreCreateManyStudentInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutStudentInput | ScoreUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutStudentInput | ScoreUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type StudentAssignmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAssignmentCreateWithoutStudentInput, StudentAssignmentUncheckedCreateWithoutStudentInput> | StudentAssignmentCreateWithoutStudentInput[] | StudentAssignmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutStudentInput | StudentAssignmentCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAssignmentUpsertWithWhereUniqueWithoutStudentInput | StudentAssignmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAssignmentCreateManyStudentInputEnvelope
    set?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    disconnect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    delete?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    update?: StudentAssignmentUpdateWithWhereUniqueWithoutStudentInput | StudentAssignmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAssignmentUpdateManyWithWhereWithoutStudentInput | StudentAssignmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAssignmentScalarWhereInput | StudentAssignmentScalarWhereInput[]
  }

  export type StudentQuizUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentQuizCreateWithoutStudentInput, StudentQuizUncheckedCreateWithoutStudentInput> | StudentQuizCreateWithoutStudentInput[] | StudentQuizUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutStudentInput | StudentQuizCreateOrConnectWithoutStudentInput[]
    upsert?: StudentQuizUpsertWithWhereUniqueWithoutStudentInput | StudentQuizUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentQuizCreateManyStudentInputEnvelope
    set?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    disconnect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    delete?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    update?: StudentQuizUpdateWithWhereUniqueWithoutStudentInput | StudentQuizUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentQuizUpdateManyWithWhereWithoutStudentInput | StudentQuizUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentQuizScalarWhereInput | StudentQuizScalarWhereInput[]
  }

  export type StudyTimetableUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudyTimetableCreateWithoutStudentInput, StudyTimetableUncheckedCreateWithoutStudentInput> | StudyTimetableCreateWithoutStudentInput[] | StudyTimetableUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutStudentInput | StudyTimetableCreateOrConnectWithoutStudentInput[]
    upsert?: StudyTimetableUpsertWithWhereUniqueWithoutStudentInput | StudyTimetableUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudyTimetableCreateManyStudentInputEnvelope
    set?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    disconnect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    delete?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    update?: StudyTimetableUpdateWithWhereUniqueWithoutStudentInput | StudyTimetableUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudyTimetableUpdateManyWithWhereWithoutStudentInput | StudyTimetableUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudyTimetableScalarWhereInput | StudyTimetableScalarWhereInput[]
  }

  export type WeeklyScheduleUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutTeacherInput, WeeklyScheduleUncheckedCreateWithoutTeacherInput> | WeeklyScheduleCreateWithoutTeacherInput[] | WeeklyScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutTeacherInput | WeeklyScheduleCreateOrConnectWithoutTeacherInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutTeacherInput | WeeklyScheduleUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: WeeklyScheduleCreateManyTeacherInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutTeacherInput | WeeklyScheduleUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutTeacherInput | WeeklyScheduleUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutStudentsInput | ClassUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutStudentsInput | ClassUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutStudentsInput | ClassUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutTeacherInput | AssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutTeacherInput | AssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutTeacherInput | AssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput> | ClassCreateWithoutTeacherInput[] | ClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherInput | ClassCreateOrConnectWithoutTeacherInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTeacherInput | ClassUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: ClassCreateManyTeacherInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTeacherInput | ClassUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTeacherInput | ClassUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<QuestionBankCreateWithoutTeacherInput, QuestionBankUncheckedCreateWithoutTeacherInput> | QuestionBankCreateWithoutTeacherInput[] | QuestionBankUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutTeacherInput | QuestionBankCreateOrConnectWithoutTeacherInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutTeacherInput | QuestionBankUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: QuestionBankCreateManyTeacherInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutTeacherInput | QuestionBankUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutTeacherInput | QuestionBankUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ScoreCreateWithoutStudentInput, ScoreUncheckedCreateWithoutStudentInput> | ScoreCreateWithoutStudentInput[] | ScoreUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutStudentInput | ScoreCreateOrConnectWithoutStudentInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutStudentInput | ScoreUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ScoreCreateManyStudentInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutStudentInput | ScoreUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutStudentInput | ScoreUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAssignmentCreateWithoutStudentInput, StudentAssignmentUncheckedCreateWithoutStudentInput> | StudentAssignmentCreateWithoutStudentInput[] | StudentAssignmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutStudentInput | StudentAssignmentCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAssignmentUpsertWithWhereUniqueWithoutStudentInput | StudentAssignmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAssignmentCreateManyStudentInputEnvelope
    set?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    disconnect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    delete?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    update?: StudentAssignmentUpdateWithWhereUniqueWithoutStudentInput | StudentAssignmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAssignmentUpdateManyWithWhereWithoutStudentInput | StudentAssignmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAssignmentScalarWhereInput | StudentAssignmentScalarWhereInput[]
  }

  export type StudentQuizUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentQuizCreateWithoutStudentInput, StudentQuizUncheckedCreateWithoutStudentInput> | StudentQuizCreateWithoutStudentInput[] | StudentQuizUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutStudentInput | StudentQuizCreateOrConnectWithoutStudentInput[]
    upsert?: StudentQuizUpsertWithWhereUniqueWithoutStudentInput | StudentQuizUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentQuizCreateManyStudentInputEnvelope
    set?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    disconnect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    delete?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    update?: StudentQuizUpdateWithWhereUniqueWithoutStudentInput | StudentQuizUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentQuizUpdateManyWithWhereWithoutStudentInput | StudentQuizUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentQuizScalarWhereInput | StudentQuizScalarWhereInput[]
  }

  export type StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudyTimetableCreateWithoutStudentInput, StudyTimetableUncheckedCreateWithoutStudentInput> | StudyTimetableCreateWithoutStudentInput[] | StudyTimetableUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutStudentInput | StudyTimetableCreateOrConnectWithoutStudentInput[]
    upsert?: StudyTimetableUpsertWithWhereUniqueWithoutStudentInput | StudyTimetableUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudyTimetableCreateManyStudentInputEnvelope
    set?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    disconnect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    delete?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    update?: StudyTimetableUpdateWithWhereUniqueWithoutStudentInput | StudyTimetableUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudyTimetableUpdateManyWithWhereWithoutStudentInput | StudyTimetableUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudyTimetableScalarWhereInput | StudyTimetableScalarWhereInput[]
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutTeacherInput, WeeklyScheduleUncheckedCreateWithoutTeacherInput> | WeeklyScheduleCreateWithoutTeacherInput[] | WeeklyScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutTeacherInput | WeeklyScheduleCreateOrConnectWithoutTeacherInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutTeacherInput | WeeklyScheduleUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: WeeklyScheduleCreateManyTeacherInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutTeacherInput | WeeklyScheduleUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutTeacherInput | WeeklyScheduleUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput> | ClassCreateWithoutStudentsInput[] | ClassUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput | ClassCreateOrConnectWithoutStudentsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutStudentsInput | ClassUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutStudentsInput | ClassUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutStudentsInput | ClassUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AssignmentCreateNestedManyWithoutClassInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutTeacher_classesInput = {
    create?: XOR<UserCreateWithoutTeacher_classesInput, UserUncheckedCreateWithoutTeacher_classesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacher_classesInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionBankCreateNestedManyWithoutClassInput = {
    create?: XOR<QuestionBankCreateWithoutClassInput, QuestionBankUncheckedCreateWithoutClassInput> | QuestionBankCreateWithoutClassInput[] | QuestionBankUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutClassInput | QuestionBankCreateOrConnectWithoutClassInput[]
    createMany?: QuestionBankCreateManyClassInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuizCreateNestedManyWithoutClassInput = {
    create?: XOR<QuizCreateWithoutClassInput, QuizUncheckedCreateWithoutClassInput> | QuizCreateWithoutClassInput[] | QuizUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutClassInput | QuizCreateOrConnectWithoutClassInput[]
    createMany?: QuizCreateManyClassInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type WeeklyScheduleCreateNestedManyWithoutClassInput = {
    create?: XOR<WeeklyScheduleCreateWithoutClassInput, WeeklyScheduleUncheckedCreateWithoutClassInput> | WeeklyScheduleCreateWithoutClassInput[] | WeeklyScheduleUncheckedCreateWithoutClassInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutClassInput | WeeklyScheduleCreateOrConnectWithoutClassInput[]
    createMany?: WeeklyScheduleCreateManyClassInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStudent_classesInput = {
    create?: XOR<UserCreateWithoutStudent_classesInput, UserUncheckedCreateWithoutStudent_classesInput> | UserCreateWithoutStudent_classesInput[] | UserUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudent_classesInput | UserCreateOrConnectWithoutStudent_classesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<QuestionBankCreateWithoutClassInput, QuestionBankUncheckedCreateWithoutClassInput> | QuestionBankCreateWithoutClassInput[] | QuestionBankUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutClassInput | QuestionBankCreateOrConnectWithoutClassInput[]
    createMany?: QuestionBankCreateManyClassInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuizUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<QuizCreateWithoutClassInput, QuizUncheckedCreateWithoutClassInput> | QuizCreateWithoutClassInput[] | QuizUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutClassInput | QuizCreateOrConnectWithoutClassInput[]
    createMany?: QuizCreateManyClassInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<WeeklyScheduleCreateWithoutClassInput, WeeklyScheduleUncheckedCreateWithoutClassInput> | WeeklyScheduleCreateWithoutClassInput[] | WeeklyScheduleUncheckedCreateWithoutClassInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutClassInput | WeeklyScheduleCreateOrConnectWithoutClassInput[]
    createMany?: WeeklyScheduleCreateManyClassInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStudent_classesInput = {
    create?: XOR<UserCreateWithoutStudent_classesInput, UserUncheckedCreateWithoutStudent_classesInput> | UserCreateWithoutStudent_classesInput[] | UserUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudent_classesInput | UserCreateOrConnectWithoutStudent_classesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AssignmentUpdateManyWithoutClassNestedInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutClassInput | AssignmentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutClassInput | AssignmentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutClassInput | AssignmentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutTeacher_classesNestedInput = {
    create?: XOR<UserCreateWithoutTeacher_classesInput, UserUncheckedCreateWithoutTeacher_classesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacher_classesInput
    upsert?: UserUpsertWithoutTeacher_classesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeacher_classesInput, UserUpdateWithoutTeacher_classesInput>, UserUncheckedUpdateWithoutTeacher_classesInput>
  }

  export type QuestionBankUpdateManyWithoutClassNestedInput = {
    create?: XOR<QuestionBankCreateWithoutClassInput, QuestionBankUncheckedCreateWithoutClassInput> | QuestionBankCreateWithoutClassInput[] | QuestionBankUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutClassInput | QuestionBankCreateOrConnectWithoutClassInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutClassInput | QuestionBankUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: QuestionBankCreateManyClassInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutClassInput | QuestionBankUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutClassInput | QuestionBankUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuizUpdateManyWithoutClassNestedInput = {
    create?: XOR<QuizCreateWithoutClassInput, QuizUncheckedCreateWithoutClassInput> | QuizCreateWithoutClassInput[] | QuizUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutClassInput | QuizCreateOrConnectWithoutClassInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutClassInput | QuizUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: QuizCreateManyClassInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutClassInput | QuizUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutClassInput | QuizUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type WeeklyScheduleUpdateManyWithoutClassNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutClassInput, WeeklyScheduleUncheckedCreateWithoutClassInput> | WeeklyScheduleCreateWithoutClassInput[] | WeeklyScheduleUncheckedCreateWithoutClassInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutClassInput | WeeklyScheduleCreateOrConnectWithoutClassInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutClassInput | WeeklyScheduleUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: WeeklyScheduleCreateManyClassInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutClassInput | WeeklyScheduleUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutClassInput | WeeklyScheduleUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStudent_classesNestedInput = {
    create?: XOR<UserCreateWithoutStudent_classesInput, UserUncheckedCreateWithoutStudent_classesInput> | UserCreateWithoutStudent_classesInput[] | UserUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudent_classesInput | UserCreateOrConnectWithoutStudent_classesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudent_classesInput | UserUpsertWithWhereUniqueWithoutStudent_classesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudent_classesInput | UserUpdateWithWhereUniqueWithoutStudent_classesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudent_classesInput | UserUpdateManyWithWhereWithoutStudent_classesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AssignmentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput> | AssignmentCreateWithoutClassInput[] | AssignmentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutClassInput | AssignmentCreateOrConnectWithoutClassInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutClassInput | AssignmentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AssignmentCreateManyClassInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutClassInput | AssignmentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutClassInput | AssignmentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<QuestionBankCreateWithoutClassInput, QuestionBankUncheckedCreateWithoutClassInput> | QuestionBankCreateWithoutClassInput[] | QuestionBankUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutClassInput | QuestionBankCreateOrConnectWithoutClassInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutClassInput | QuestionBankUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: QuestionBankCreateManyClassInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutClassInput | QuestionBankUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutClassInput | QuestionBankUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuizUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<QuizCreateWithoutClassInput, QuizUncheckedCreateWithoutClassInput> | QuizCreateWithoutClassInput[] | QuizUncheckedCreateWithoutClassInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutClassInput | QuizCreateOrConnectWithoutClassInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutClassInput | QuizUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: QuizCreateManyClassInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutClassInput | QuizUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutClassInput | QuizUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutClassInput, WeeklyScheduleUncheckedCreateWithoutClassInput> | WeeklyScheduleCreateWithoutClassInput[] | WeeklyScheduleUncheckedCreateWithoutClassInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutClassInput | WeeklyScheduleCreateOrConnectWithoutClassInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutClassInput | WeeklyScheduleUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: WeeklyScheduleCreateManyClassInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutClassInput | WeeklyScheduleUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutClassInput | WeeklyScheduleUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStudent_classesNestedInput = {
    create?: XOR<UserCreateWithoutStudent_classesInput, UserUncheckedCreateWithoutStudent_classesInput> | UserCreateWithoutStudent_classesInput[] | UserUncheckedCreateWithoutStudent_classesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudent_classesInput | UserCreateOrConnectWithoutStudent_classesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudent_classesInput | UserUpsertWithWhereUniqueWithoutStudent_classesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudent_classesInput | UserUpdateWithWhereUniqueWithoutStudent_classesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudent_classesInput | UserUpdateManyWithWhereWithoutStudent_classesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AssignmentCreateNestedManyWithoutSubjectInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type QuestionBankCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuestionBankCreateWithoutSubjectInput, QuestionBankUncheckedCreateWithoutSubjectInput> | QuestionBankCreateWithoutSubjectInput[] | QuestionBankUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutSubjectInput | QuestionBankCreateOrConnectWithoutSubjectInput[]
    createMany?: QuestionBankCreateManySubjectInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuizCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuizCreateWithoutSubjectInput, QuizUncheckedCreateWithoutSubjectInput> | QuizCreateWithoutSubjectInput[] | QuizUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutSubjectInput | QuizCreateOrConnectWithoutSubjectInput[]
    createMany?: QuizCreateManySubjectInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type ScoreCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ScoreCreateWithoutSubjectInput, ScoreUncheckedCreateWithoutSubjectInput> | ScoreCreateWithoutSubjectInput[] | ScoreUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSubjectInput | ScoreCreateOrConnectWithoutSubjectInput[]
    createMany?: ScoreCreateManySubjectInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type StudyTimetableCreateNestedManyWithoutSubjectInput = {
    create?: XOR<StudyTimetableCreateWithoutSubjectInput, StudyTimetableUncheckedCreateWithoutSubjectInput> | StudyTimetableCreateWithoutSubjectInput[] | StudyTimetableUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutSubjectInput | StudyTimetableCreateOrConnectWithoutSubjectInput[]
    createMany?: StudyTimetableCreateManySubjectInputEnvelope
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
  }

  export type WeeklyScheduleCreateNestedManyWithoutSubjectInput = {
    create?: XOR<WeeklyScheduleCreateWithoutSubjectInput, WeeklyScheduleUncheckedCreateWithoutSubjectInput> | WeeklyScheduleCreateWithoutSubjectInput[] | WeeklyScheduleUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutSubjectInput | WeeklyScheduleCreateOrConnectWithoutSubjectInput[]
    createMany?: WeeklyScheduleCreateManySubjectInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuestionBankCreateWithoutSubjectInput, QuestionBankUncheckedCreateWithoutSubjectInput> | QuestionBankCreateWithoutSubjectInput[] | QuestionBankUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutSubjectInput | QuestionBankCreateOrConnectWithoutSubjectInput[]
    createMany?: QuestionBankCreateManySubjectInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuizUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuizCreateWithoutSubjectInput, QuizUncheckedCreateWithoutSubjectInput> | QuizCreateWithoutSubjectInput[] | QuizUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutSubjectInput | QuizCreateOrConnectWithoutSubjectInput[]
    createMany?: QuizCreateManySubjectInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type ScoreUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ScoreCreateWithoutSubjectInput, ScoreUncheckedCreateWithoutSubjectInput> | ScoreCreateWithoutSubjectInput[] | ScoreUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSubjectInput | ScoreCreateOrConnectWithoutSubjectInput[]
    createMany?: ScoreCreateManySubjectInputEnvelope
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
  }

  export type StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<StudyTimetableCreateWithoutSubjectInput, StudyTimetableUncheckedCreateWithoutSubjectInput> | StudyTimetableCreateWithoutSubjectInput[] | StudyTimetableUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutSubjectInput | StudyTimetableCreateOrConnectWithoutSubjectInput[]
    createMany?: StudyTimetableCreateManySubjectInputEnvelope
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
  }

  export type WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<WeeklyScheduleCreateWithoutSubjectInput, WeeklyScheduleUncheckedCreateWithoutSubjectInput> | WeeklyScheduleCreateWithoutSubjectInput[] | WeeklyScheduleUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutSubjectInput | WeeklyScheduleCreateOrConnectWithoutSubjectInput[]
    createMany?: WeeklyScheduleCreateManySubjectInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type AssignmentUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutSubjectInput | AssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutSubjectInput | AssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutSubjectInput | AssignmentUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type QuestionBankUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuestionBankCreateWithoutSubjectInput, QuestionBankUncheckedCreateWithoutSubjectInput> | QuestionBankCreateWithoutSubjectInput[] | QuestionBankUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutSubjectInput | QuestionBankCreateOrConnectWithoutSubjectInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutSubjectInput | QuestionBankUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuestionBankCreateManySubjectInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutSubjectInput | QuestionBankUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutSubjectInput | QuestionBankUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuizUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuizCreateWithoutSubjectInput, QuizUncheckedCreateWithoutSubjectInput> | QuizCreateWithoutSubjectInput[] | QuizUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutSubjectInput | QuizCreateOrConnectWithoutSubjectInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutSubjectInput | QuizUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuizCreateManySubjectInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutSubjectInput | QuizUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutSubjectInput | QuizUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type ScoreUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ScoreCreateWithoutSubjectInput, ScoreUncheckedCreateWithoutSubjectInput> | ScoreCreateWithoutSubjectInput[] | ScoreUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSubjectInput | ScoreCreateOrConnectWithoutSubjectInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSubjectInput | ScoreUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ScoreCreateManySubjectInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSubjectInput | ScoreUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSubjectInput | ScoreUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type StudyTimetableUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<StudyTimetableCreateWithoutSubjectInput, StudyTimetableUncheckedCreateWithoutSubjectInput> | StudyTimetableCreateWithoutSubjectInput[] | StudyTimetableUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutSubjectInput | StudyTimetableCreateOrConnectWithoutSubjectInput[]
    upsert?: StudyTimetableUpsertWithWhereUniqueWithoutSubjectInput | StudyTimetableUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: StudyTimetableCreateManySubjectInputEnvelope
    set?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    disconnect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    delete?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    update?: StudyTimetableUpdateWithWhereUniqueWithoutSubjectInput | StudyTimetableUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: StudyTimetableUpdateManyWithWhereWithoutSubjectInput | StudyTimetableUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: StudyTimetableScalarWhereInput | StudyTimetableScalarWhereInput[]
  }

  export type WeeklyScheduleUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutSubjectInput, WeeklyScheduleUncheckedCreateWithoutSubjectInput> | WeeklyScheduleCreateWithoutSubjectInput[] | WeeklyScheduleUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutSubjectInput | WeeklyScheduleCreateOrConnectWithoutSubjectInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutSubjectInput | WeeklyScheduleUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: WeeklyScheduleCreateManySubjectInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutSubjectInput | WeeklyScheduleUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutSubjectInput | WeeklyScheduleUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutSubjectInput | AssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutSubjectInput | AssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutSubjectInput | AssignmentUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuestionBankCreateWithoutSubjectInput, QuestionBankUncheckedCreateWithoutSubjectInput> | QuestionBankCreateWithoutSubjectInput[] | QuestionBankUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutSubjectInput | QuestionBankCreateOrConnectWithoutSubjectInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutSubjectInput | QuestionBankUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuestionBankCreateManySubjectInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutSubjectInput | QuestionBankUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutSubjectInput | QuestionBankUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuizUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuizCreateWithoutSubjectInput, QuizUncheckedCreateWithoutSubjectInput> | QuizCreateWithoutSubjectInput[] | QuizUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutSubjectInput | QuizCreateOrConnectWithoutSubjectInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutSubjectInput | QuizUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuizCreateManySubjectInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutSubjectInput | QuizUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutSubjectInput | QuizUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type ScoreUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ScoreCreateWithoutSubjectInput, ScoreUncheckedCreateWithoutSubjectInput> | ScoreCreateWithoutSubjectInput[] | ScoreUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ScoreCreateOrConnectWithoutSubjectInput | ScoreCreateOrConnectWithoutSubjectInput[]
    upsert?: ScoreUpsertWithWhereUniqueWithoutSubjectInput | ScoreUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ScoreCreateManySubjectInputEnvelope
    set?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    disconnect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    delete?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    connect?: ScoreWhereUniqueInput | ScoreWhereUniqueInput[]
    update?: ScoreUpdateWithWhereUniqueWithoutSubjectInput | ScoreUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ScoreUpdateManyWithWhereWithoutSubjectInput | ScoreUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
  }

  export type StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<StudyTimetableCreateWithoutSubjectInput, StudyTimetableUncheckedCreateWithoutSubjectInput> | StudyTimetableCreateWithoutSubjectInput[] | StudyTimetableUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: StudyTimetableCreateOrConnectWithoutSubjectInput | StudyTimetableCreateOrConnectWithoutSubjectInput[]
    upsert?: StudyTimetableUpsertWithWhereUniqueWithoutSubjectInput | StudyTimetableUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: StudyTimetableCreateManySubjectInputEnvelope
    set?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    disconnect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    delete?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    connect?: StudyTimetableWhereUniqueInput | StudyTimetableWhereUniqueInput[]
    update?: StudyTimetableUpdateWithWhereUniqueWithoutSubjectInput | StudyTimetableUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: StudyTimetableUpdateManyWithWhereWithoutSubjectInput | StudyTimetableUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: StudyTimetableScalarWhereInput | StudyTimetableScalarWhereInput[]
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutSubjectInput, WeeklyScheduleUncheckedCreateWithoutSubjectInput> | WeeklyScheduleCreateWithoutSubjectInput[] | WeeklyScheduleUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutSubjectInput | WeeklyScheduleCreateOrConnectWithoutSubjectInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutSubjectInput | WeeklyScheduleUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: WeeklyScheduleCreateManySubjectInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutSubjectInput | WeeklyScheduleUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutSubjectInput | WeeklyScheduleUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type QuestionCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<QuestionCreateWithoutQuestion_bankInput, QuestionUncheckedCreateWithoutQuestion_bankInput> | QuestionCreateWithoutQuestion_bankInput[] | QuestionUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestion_bankInput | QuestionCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: QuestionCreateManyQuestion_bankInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type ClassCreateNestedOneWithoutQuestionBanksInput = {
    create?: XOR<ClassCreateWithoutQuestionBanksInput, ClassUncheckedCreateWithoutQuestionBanksInput>
    connectOrCreate?: ClassCreateOrConnectWithoutQuestionBanksInput
    connect?: ClassWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutQuestionBanksInput = {
    create?: XOR<SubjectCreateWithoutQuestionBanksInput, SubjectUncheckedCreateWithoutQuestionBanksInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuestionBanksInput
    connect?: SubjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionBanksInput = {
    create?: XOR<UserCreateWithoutQuestionBanksInput, UserUncheckedCreateWithoutQuestionBanksInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBanksInput
    connect?: UserWhereUniqueInput
  }

  export type QuizCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<QuizCreateWithoutQuestion_bankInput, QuizUncheckedCreateWithoutQuestion_bankInput> | QuizCreateWithoutQuestion_bankInput[] | QuizUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutQuestion_bankInput | QuizCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: QuizCreateManyQuestion_bankInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<QuestionCreateWithoutQuestion_bankInput, QuestionUncheckedCreateWithoutQuestion_bankInput> | QuestionCreateWithoutQuestion_bankInput[] | QuestionUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestion_bankInput | QuestionCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: QuestionCreateManyQuestion_bankInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuizUncheckedCreateNestedManyWithoutQuestion_bankInput = {
    create?: XOR<QuizCreateWithoutQuestion_bankInput, QuizUncheckedCreateWithoutQuestion_bankInput> | QuizCreateWithoutQuestion_bankInput[] | QuizUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutQuestion_bankInput | QuizCreateOrConnectWithoutQuestion_bankInput[]
    createMany?: QuizCreateManyQuestion_bankInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type QuestionUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestion_bankInput, QuestionUncheckedCreateWithoutQuestion_bankInput> | QuestionCreateWithoutQuestion_bankInput[] | QuestionUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestion_bankInput | QuestionCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestion_bankInput | QuestionUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: QuestionCreateManyQuestion_bankInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestion_bankInput | QuestionUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestion_bankInput | QuestionUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type ClassUpdateOneRequiredWithoutQuestionBanksNestedInput = {
    create?: XOR<ClassCreateWithoutQuestionBanksInput, ClassUncheckedCreateWithoutQuestionBanksInput>
    connectOrCreate?: ClassCreateOrConnectWithoutQuestionBanksInput
    upsert?: ClassUpsertWithoutQuestionBanksInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutQuestionBanksInput, ClassUpdateWithoutQuestionBanksInput>, ClassUncheckedUpdateWithoutQuestionBanksInput>
  }

  export type SubjectUpdateOneRequiredWithoutQuestionBanksNestedInput = {
    create?: XOR<SubjectCreateWithoutQuestionBanksInput, SubjectUncheckedCreateWithoutQuestionBanksInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuestionBanksInput
    upsert?: SubjectUpsertWithoutQuestionBanksInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutQuestionBanksInput, SubjectUpdateWithoutQuestionBanksInput>, SubjectUncheckedUpdateWithoutQuestionBanksInput>
  }

  export type UserUpdateOneRequiredWithoutQuestionBanksNestedInput = {
    create?: XOR<UserCreateWithoutQuestionBanksInput, UserUncheckedCreateWithoutQuestionBanksInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBanksInput
    upsert?: UserUpsertWithoutQuestionBanksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionBanksInput, UserUpdateWithoutQuestionBanksInput>, UserUncheckedUpdateWithoutQuestionBanksInput>
  }

  export type QuizUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<QuizCreateWithoutQuestion_bankInput, QuizUncheckedCreateWithoutQuestion_bankInput> | QuizCreateWithoutQuestion_bankInput[] | QuizUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutQuestion_bankInput | QuizCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutQuestion_bankInput | QuizUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: QuizCreateManyQuestion_bankInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutQuestion_bankInput | QuizUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutQuestion_bankInput | QuizUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestion_bankInput, QuestionUncheckedCreateWithoutQuestion_bankInput> | QuestionCreateWithoutQuestion_bankInput[] | QuestionUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestion_bankInput | QuestionCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestion_bankInput | QuestionUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: QuestionCreateManyQuestion_bankInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestion_bankInput | QuestionUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestion_bankInput | QuestionUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuizUncheckedUpdateManyWithoutQuestion_bankNestedInput = {
    create?: XOR<QuizCreateWithoutQuestion_bankInput, QuizUncheckedCreateWithoutQuestion_bankInput> | QuizCreateWithoutQuestion_bankInput[] | QuizUncheckedCreateWithoutQuestion_bankInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutQuestion_bankInput | QuizCreateOrConnectWithoutQuestion_bankInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutQuestion_bankInput | QuizUpsertWithWhereUniqueWithoutQuestion_bankInput[]
    createMany?: QuizCreateManyQuestion_bankInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutQuestion_bankInput | QuizUpdateWithWhereUniqueWithoutQuestion_bankInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutQuestion_bankInput | QuizUpdateManyWithWhereWithoutQuestion_bankInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type QuestionBankCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionsInput, QuestionBankUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionsInput
    connect?: QuestionBankWhereUniqueInput
  }

  export type QuizQuestionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuizQuestionCreateWithoutQuestionInput, QuizQuestionUncheckedCreateWithoutQuestionInput> | QuizQuestionCreateWithoutQuestionInput[] | QuizQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuestionInput | QuizQuestionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuizQuestionCreateManyQuestionInputEnvelope
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
  }

  export type QuizQuestionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuizQuestionCreateWithoutQuestionInput, QuizQuestionUncheckedCreateWithoutQuestionInput> | QuizQuestionCreateWithoutQuestionInput[] | QuizQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuestionInput | QuizQuestionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuizQuestionCreateManyQuestionInputEnvelope
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
  }

  export type QuestionBankUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionsInput, QuestionBankUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionsInput
    upsert?: QuestionBankUpsertWithoutQuestionsInput
    connect?: QuestionBankWhereUniqueInput
    update?: XOR<XOR<QuestionBankUpdateToOneWithWhereWithoutQuestionsInput, QuestionBankUpdateWithoutQuestionsInput>, QuestionBankUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuizQuestionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuizQuestionCreateWithoutQuestionInput, QuizQuestionUncheckedCreateWithoutQuestionInput> | QuizQuestionCreateWithoutQuestionInput[] | QuizQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuestionInput | QuizQuestionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuizQuestionUpsertWithWhereUniqueWithoutQuestionInput | QuizQuestionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuizQuestionCreateManyQuestionInputEnvelope
    set?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    disconnect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    delete?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    update?: QuizQuestionUpdateWithWhereUniqueWithoutQuestionInput | QuizQuestionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuizQuestionUpdateManyWithWhereWithoutQuestionInput | QuizQuestionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuizQuestionScalarWhereInput | QuizQuestionScalarWhereInput[]
  }

  export type QuizQuestionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuizQuestionCreateWithoutQuestionInput, QuizQuestionUncheckedCreateWithoutQuestionInput> | QuizQuestionCreateWithoutQuestionInput[] | QuizQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuestionInput | QuizQuestionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuizQuestionUpsertWithWhereUniqueWithoutQuestionInput | QuizQuestionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuizQuestionCreateManyQuestionInputEnvelope
    set?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    disconnect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    delete?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    update?: QuizQuestionUpdateWithWhereUniqueWithoutQuestionInput | QuizQuestionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuizQuestionUpdateManyWithWhereWithoutQuestionInput | QuizQuestionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuizQuestionScalarWhereInput | QuizQuestionScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<ClassCreateWithoutQuizzesInput, ClassUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutQuizzesInput
    connect?: ClassWhereUniqueInput
  }

  export type QuestionBankCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<QuestionBankCreateWithoutQuizzesInput, QuestionBankUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuizzesInput
    connect?: QuestionBankWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<SubjectCreateWithoutQuizzesInput, SubjectUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuizzesInput
    connect?: SubjectWhereUniqueInput
  }

  export type QuizQuestionCreateNestedManyWithoutQuizInput = {
    create?: XOR<QuizQuestionCreateWithoutQuizInput, QuizQuestionUncheckedCreateWithoutQuizInput> | QuizQuestionCreateWithoutQuizInput[] | QuizQuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuizInput | QuizQuestionCreateOrConnectWithoutQuizInput[]
    createMany?: QuizQuestionCreateManyQuizInputEnvelope
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
  }

  export type StudentQuizCreateNestedManyWithoutQuizInput = {
    create?: XOR<StudentQuizCreateWithoutQuizInput, StudentQuizUncheckedCreateWithoutQuizInput> | StudentQuizCreateWithoutQuizInput[] | StudentQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutQuizInput | StudentQuizCreateOrConnectWithoutQuizInput[]
    createMany?: StudentQuizCreateManyQuizInputEnvelope
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
  }

  export type QuizQuestionUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<QuizQuestionCreateWithoutQuizInput, QuizQuestionUncheckedCreateWithoutQuizInput> | QuizQuestionCreateWithoutQuizInput[] | QuizQuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuizInput | QuizQuestionCreateOrConnectWithoutQuizInput[]
    createMany?: QuizQuestionCreateManyQuizInputEnvelope
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
  }

  export type StudentQuizUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<StudentQuizCreateWithoutQuizInput, StudentQuizUncheckedCreateWithoutQuizInput> | StudentQuizCreateWithoutQuizInput[] | StudentQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutQuizInput | StudentQuizCreateOrConnectWithoutQuizInput[]
    createMany?: StudentQuizCreateManyQuizInputEnvelope
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<ClassCreateWithoutQuizzesInput, ClassUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutQuizzesInput
    upsert?: ClassUpsertWithoutQuizzesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutQuizzesInput, ClassUpdateWithoutQuizzesInput>, ClassUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuestionBankUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuizzesInput, QuestionBankUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuizzesInput
    upsert?: QuestionBankUpsertWithoutQuizzesInput
    connect?: QuestionBankWhereUniqueInput
    update?: XOR<XOR<QuestionBankUpdateToOneWithWhereWithoutQuizzesInput, QuestionBankUpdateWithoutQuizzesInput>, QuestionBankUncheckedUpdateWithoutQuizzesInput>
  }

  export type SubjectUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<SubjectCreateWithoutQuizzesInput, SubjectUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuizzesInput
    upsert?: SubjectUpsertWithoutQuizzesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutQuizzesInput, SubjectUpdateWithoutQuizzesInput>, SubjectUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuizQuestionUpdateManyWithoutQuizNestedInput = {
    create?: XOR<QuizQuestionCreateWithoutQuizInput, QuizQuestionUncheckedCreateWithoutQuizInput> | QuizQuestionCreateWithoutQuizInput[] | QuizQuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuizInput | QuizQuestionCreateOrConnectWithoutQuizInput[]
    upsert?: QuizQuestionUpsertWithWhereUniqueWithoutQuizInput | QuizQuestionUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: QuizQuestionCreateManyQuizInputEnvelope
    set?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    disconnect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    delete?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    update?: QuizQuestionUpdateWithWhereUniqueWithoutQuizInput | QuizQuestionUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: QuizQuestionUpdateManyWithWhereWithoutQuizInput | QuizQuestionUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: QuizQuestionScalarWhereInput | QuizQuestionScalarWhereInput[]
  }

  export type StudentQuizUpdateManyWithoutQuizNestedInput = {
    create?: XOR<StudentQuizCreateWithoutQuizInput, StudentQuizUncheckedCreateWithoutQuizInput> | StudentQuizCreateWithoutQuizInput[] | StudentQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutQuizInput | StudentQuizCreateOrConnectWithoutQuizInput[]
    upsert?: StudentQuizUpsertWithWhereUniqueWithoutQuizInput | StudentQuizUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: StudentQuizCreateManyQuizInputEnvelope
    set?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    disconnect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    delete?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    update?: StudentQuizUpdateWithWhereUniqueWithoutQuizInput | StudentQuizUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: StudentQuizUpdateManyWithWhereWithoutQuizInput | StudentQuizUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: StudentQuizScalarWhereInput | StudentQuizScalarWhereInput[]
  }

  export type QuizQuestionUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<QuizQuestionCreateWithoutQuizInput, QuizQuestionUncheckedCreateWithoutQuizInput> | QuizQuestionCreateWithoutQuizInput[] | QuizQuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizQuestionCreateOrConnectWithoutQuizInput | QuizQuestionCreateOrConnectWithoutQuizInput[]
    upsert?: QuizQuestionUpsertWithWhereUniqueWithoutQuizInput | QuizQuestionUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: QuizQuestionCreateManyQuizInputEnvelope
    set?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    disconnect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    delete?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    connect?: QuizQuestionWhereUniqueInput | QuizQuestionWhereUniqueInput[]
    update?: QuizQuestionUpdateWithWhereUniqueWithoutQuizInput | QuizQuestionUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: QuizQuestionUpdateManyWithWhereWithoutQuizInput | QuizQuestionUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: QuizQuestionScalarWhereInput | QuizQuestionScalarWhereInput[]
  }

  export type StudentQuizUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<StudentQuizCreateWithoutQuizInput, StudentQuizUncheckedCreateWithoutQuizInput> | StudentQuizCreateWithoutQuizInput[] | StudentQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: StudentQuizCreateOrConnectWithoutQuizInput | StudentQuizCreateOrConnectWithoutQuizInput[]
    upsert?: StudentQuizUpsertWithWhereUniqueWithoutQuizInput | StudentQuizUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: StudentQuizCreateManyQuizInputEnvelope
    set?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    disconnect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    delete?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    connect?: StudentQuizWhereUniqueInput | StudentQuizWhereUniqueInput[]
    update?: StudentQuizUpdateWithWhereUniqueWithoutQuizInput | StudentQuizUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: StudentQuizUpdateManyWithWhereWithoutQuizInput | StudentQuizUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: StudentQuizScalarWhereInput | StudentQuizScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutQuizQuestionsInput = {
    create?: XOR<QuestionCreateWithoutQuizQuestionsInput, QuestionUncheckedCreateWithoutQuizQuestionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutQuizQuestionsInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuizCreateNestedOneWithoutQuizQuestionsInput = {
    create?: XOR<QuizCreateWithoutQuizQuestionsInput, QuizUncheckedCreateWithoutQuizQuestionsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutQuizQuestionsInput
    connect?: QuizWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutQuizQuestionsNestedInput = {
    create?: XOR<QuestionCreateWithoutQuizQuestionsInput, QuestionUncheckedCreateWithoutQuizQuestionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutQuizQuestionsInput
    upsert?: QuestionUpsertWithoutQuizQuestionsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutQuizQuestionsInput, QuestionUpdateWithoutQuizQuestionsInput>, QuestionUncheckedUpdateWithoutQuizQuestionsInput>
  }

  export type QuizUpdateOneRequiredWithoutQuizQuestionsNestedInput = {
    create?: XOR<QuizCreateWithoutQuizQuestionsInput, QuizUncheckedCreateWithoutQuizQuestionsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutQuizQuestionsInput
    upsert?: QuizUpsertWithoutQuizQuestionsInput
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutQuizQuestionsInput, QuizUpdateWithoutQuizQuestionsInput>, QuizUncheckedUpdateWithoutQuizQuestionsInput>
  }

  export type QuizCreateNestedOneWithoutStudentQuizzesInput = {
    create?: XOR<QuizCreateWithoutStudentQuizzesInput, QuizUncheckedCreateWithoutStudentQuizzesInput>
    connectOrCreate?: QuizCreateOrConnectWithoutStudentQuizzesInput
    connect?: QuizWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStudentQuizzesInput = {
    create?: XOR<UserCreateWithoutStudentQuizzesInput, UserUncheckedCreateWithoutStudentQuizzesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentQuizzesInput
    connect?: UserWhereUniqueInput
  }

  export type QuizUpdateOneRequiredWithoutStudentQuizzesNestedInput = {
    create?: XOR<QuizCreateWithoutStudentQuizzesInput, QuizUncheckedCreateWithoutStudentQuizzesInput>
    connectOrCreate?: QuizCreateOrConnectWithoutStudentQuizzesInput
    upsert?: QuizUpsertWithoutStudentQuizzesInput
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutStudentQuizzesInput, QuizUpdateWithoutStudentQuizzesInput>, QuizUncheckedUpdateWithoutStudentQuizzesInput>
  }

  export type UserUpdateOneRequiredWithoutStudentQuizzesNestedInput = {
    create?: XOR<UserCreateWithoutStudentQuizzesInput, UserUncheckedCreateWithoutStudentQuizzesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentQuizzesInput
    upsert?: UserUpsertWithoutStudentQuizzesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentQuizzesInput, UserUpdateWithoutStudentQuizzesInput>, UserUncheckedUpdateWithoutStudentQuizzesInput>
  }

  export type ClassCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAssignmentsInput
    connect?: ClassWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAssignmentsInput
    connect?: SubjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type StudentAssignmentCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<StudentAssignmentCreateWithoutAssignmentInput, StudentAssignmentUncheckedCreateWithoutAssignmentInput> | StudentAssignmentCreateWithoutAssignmentInput[] | StudentAssignmentUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutAssignmentInput | StudentAssignmentCreateOrConnectWithoutAssignmentInput[]
    createMany?: StudentAssignmentCreateManyAssignmentInputEnvelope
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
  }

  export type StudentAssignmentUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<StudentAssignmentCreateWithoutAssignmentInput, StudentAssignmentUncheckedCreateWithoutAssignmentInput> | StudentAssignmentCreateWithoutAssignmentInput[] | StudentAssignmentUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutAssignmentInput | StudentAssignmentCreateOrConnectWithoutAssignmentInput[]
    createMany?: StudentAssignmentCreateManyAssignmentInputEnvelope
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAssignmentsInput
    upsert?: ClassUpsertWithoutAssignmentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAssignmentsInput, ClassUpdateWithoutAssignmentsInput>, ClassUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SubjectUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAssignmentsInput
    upsert?: SubjectUpsertWithoutAssignmentsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutAssignmentsInput, SubjectUpdateWithoutAssignmentsInput>, SubjectUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsInput
    upsert?: UserUpsertWithoutAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsInput, UserUpdateWithoutAssignmentsInput>, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type StudentAssignmentUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<StudentAssignmentCreateWithoutAssignmentInput, StudentAssignmentUncheckedCreateWithoutAssignmentInput> | StudentAssignmentCreateWithoutAssignmentInput[] | StudentAssignmentUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutAssignmentInput | StudentAssignmentCreateOrConnectWithoutAssignmentInput[]
    upsert?: StudentAssignmentUpsertWithWhereUniqueWithoutAssignmentInput | StudentAssignmentUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: StudentAssignmentCreateManyAssignmentInputEnvelope
    set?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    disconnect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    delete?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    update?: StudentAssignmentUpdateWithWhereUniqueWithoutAssignmentInput | StudentAssignmentUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: StudentAssignmentUpdateManyWithWhereWithoutAssignmentInput | StudentAssignmentUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: StudentAssignmentScalarWhereInput | StudentAssignmentScalarWhereInput[]
  }

  export type StudentAssignmentUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<StudentAssignmentCreateWithoutAssignmentInput, StudentAssignmentUncheckedCreateWithoutAssignmentInput> | StudentAssignmentCreateWithoutAssignmentInput[] | StudentAssignmentUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentAssignmentCreateOrConnectWithoutAssignmentInput | StudentAssignmentCreateOrConnectWithoutAssignmentInput[]
    upsert?: StudentAssignmentUpsertWithWhereUniqueWithoutAssignmentInput | StudentAssignmentUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: StudentAssignmentCreateManyAssignmentInputEnvelope
    set?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    disconnect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    delete?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    connect?: StudentAssignmentWhereUniqueInput | StudentAssignmentWhereUniqueInput[]
    update?: StudentAssignmentUpdateWithWhereUniqueWithoutAssignmentInput | StudentAssignmentUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: StudentAssignmentUpdateManyWithWhereWithoutAssignmentInput | StudentAssignmentUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: StudentAssignmentScalarWhereInput | StudentAssignmentScalarWhereInput[]
  }

  export type AssignmentCreateNestedOneWithoutStudentAssignmentsInput = {
    create?: XOR<AssignmentCreateWithoutStudentAssignmentsInput, AssignmentUncheckedCreateWithoutStudentAssignmentsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutStudentAssignmentsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStudentAssignmentsInput = {
    create?: XOR<UserCreateWithoutStudentAssignmentsInput, UserUncheckedCreateWithoutStudentAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type AssignmentUpdateOneRequiredWithoutStudentAssignmentsNestedInput = {
    create?: XOR<AssignmentCreateWithoutStudentAssignmentsInput, AssignmentUncheckedCreateWithoutStudentAssignmentsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutStudentAssignmentsInput
    upsert?: AssignmentUpsertWithoutStudentAssignmentsInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutStudentAssignmentsInput, AssignmentUpdateWithoutStudentAssignmentsInput>, AssignmentUncheckedUpdateWithoutStudentAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutStudentAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutStudentAssignmentsInput, UserUncheckedCreateWithoutStudentAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentAssignmentsInput
    upsert?: UserUpsertWithoutStudentAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentAssignmentsInput, UserUpdateWithoutStudentAssignmentsInput>, UserUncheckedUpdateWithoutStudentAssignmentsInput>
  }

  export type ClassCreateNestedOneWithoutWeeklySchedulesInput = {
    create?: XOR<ClassCreateWithoutWeeklySchedulesInput, ClassUncheckedCreateWithoutWeeklySchedulesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutWeeklySchedulesInput
    connect?: ClassWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutWeeklySchedulesInput = {
    create?: XOR<SubjectCreateWithoutWeeklySchedulesInput, SubjectUncheckedCreateWithoutWeeklySchedulesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutWeeklySchedulesInput
    connect?: SubjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWeeklySchedulesInput = {
    create?: XOR<UserCreateWithoutWeeklySchedulesInput, UserUncheckedCreateWithoutWeeklySchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeeklySchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutWeeklySchedulesNestedInput = {
    create?: XOR<ClassCreateWithoutWeeklySchedulesInput, ClassUncheckedCreateWithoutWeeklySchedulesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutWeeklySchedulesInput
    upsert?: ClassUpsertWithoutWeeklySchedulesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutWeeklySchedulesInput, ClassUpdateWithoutWeeklySchedulesInput>, ClassUncheckedUpdateWithoutWeeklySchedulesInput>
  }

  export type SubjectUpdateOneRequiredWithoutWeeklySchedulesNestedInput = {
    create?: XOR<SubjectCreateWithoutWeeklySchedulesInput, SubjectUncheckedCreateWithoutWeeklySchedulesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutWeeklySchedulesInput
    upsert?: SubjectUpsertWithoutWeeklySchedulesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutWeeklySchedulesInput, SubjectUpdateWithoutWeeklySchedulesInput>, SubjectUncheckedUpdateWithoutWeeklySchedulesInput>
  }

  export type UserUpdateOneRequiredWithoutWeeklySchedulesNestedInput = {
    create?: XOR<UserCreateWithoutWeeklySchedulesInput, UserUncheckedCreateWithoutWeeklySchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeeklySchedulesInput
    upsert?: UserUpsertWithoutWeeklySchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeeklySchedulesInput, UserUpdateWithoutWeeklySchedulesInput>, UserUncheckedUpdateWithoutWeeklySchedulesInput>
  }

  export type UserCreateNestedOneWithoutStudyTimetablesInput = {
    create?: XOR<UserCreateWithoutStudyTimetablesInput, UserUncheckedCreateWithoutStudyTimetablesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudyTimetablesInput
    connect?: UserWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutStudyTimetablesInput = {
    create?: XOR<SubjectCreateWithoutStudyTimetablesInput, SubjectUncheckedCreateWithoutStudyTimetablesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutStudyTimetablesInput
    connect?: SubjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudyTimetablesNestedInput = {
    create?: XOR<UserCreateWithoutStudyTimetablesInput, UserUncheckedCreateWithoutStudyTimetablesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudyTimetablesInput
    upsert?: UserUpsertWithoutStudyTimetablesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudyTimetablesInput, UserUpdateWithoutStudyTimetablesInput>, UserUncheckedUpdateWithoutStudyTimetablesInput>
  }

  export type SubjectUpdateOneRequiredWithoutStudyTimetablesNestedInput = {
    create?: XOR<SubjectCreateWithoutStudyTimetablesInput, SubjectUncheckedCreateWithoutStudyTimetablesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutStudyTimetablesInput
    upsert?: SubjectUpsertWithoutStudyTimetablesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutStudyTimetablesInput, SubjectUpdateWithoutStudyTimetablesInput>, SubjectUncheckedUpdateWithoutStudyTimetablesInput>
  }

  export type UserCreateNestedOneWithoutScoresInput = {
    create?: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoresInput
    connect?: UserWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutScoresInput = {
    create?: XOR<SubjectCreateWithoutScoresInput, SubjectUncheckedCreateWithoutScoresInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutScoresInput
    connect?: SubjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoresInput
    upsert?: UserUpsertWithoutScoresInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScoresInput, UserUpdateWithoutScoresInput>, UserUncheckedUpdateWithoutScoresInput>
  }

  export type SubjectUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<SubjectCreateWithoutScoresInput, SubjectUncheckedCreateWithoutScoresInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutScoresInput
    upsert?: SubjectUpsertWithoutScoresInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutScoresInput, SubjectUpdateWithoutScoresInput>, SubjectUncheckedUpdateWithoutScoresInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AssignmentCreateWithoutTeacherInput = {
    title: string
    description: string
    class: ClassCreateNestedOneWithoutAssignmentsInput
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutTeacherInput = {
    id?: number
    title: string
    description: string
    class_id: number
    subject_id: number
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type AssignmentCreateManyTeacherInputEnvelope = {
    data: AssignmentCreateManyTeacherInput | AssignmentCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutTeacherInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    questionBanks?: QuestionBankCreateNestedManyWithoutClassInput
    quizzes?: QuizCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutClassInput
    students?: UserCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUncheckedCreateWithoutTeacherInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutClassInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput
    students?: UserUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassCreateOrConnectWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
  }

  export type ClassCreateManyTeacherInputEnvelope = {
    data: ClassCreateManyTeacherInput | ClassCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankCreateWithoutTeacherInput = {
    questions?: QuestionCreateNestedManyWithoutQuestion_bankInput
    class: ClassCreateNestedOneWithoutQuestionBanksInput
    subject: SubjectCreateNestedOneWithoutQuestionBanksInput
    quizzes?: QuizCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankUncheckedCreateWithoutTeacherInput = {
    id?: number
    subject_id: number
    class_id: number
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankCreateOrConnectWithoutTeacherInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutTeacherInput, QuestionBankUncheckedCreateWithoutTeacherInput>
  }

  export type QuestionBankCreateManyTeacherInputEnvelope = {
    data: QuestionBankCreateManyTeacherInput | QuestionBankCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCreateWithoutStudentInput = {
    marks: number
    subject: SubjectCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateWithoutStudentInput = {
    id?: number
    subject_id: number
    marks: number
  }

  export type ScoreCreateOrConnectWithoutStudentInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutStudentInput, ScoreUncheckedCreateWithoutStudentInput>
  }

  export type ScoreCreateManyStudentInputEnvelope = {
    data: ScoreCreateManyStudentInput | ScoreCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentAssignmentCreateWithoutStudentInput = {
    assignment: AssignmentCreateNestedOneWithoutStudentAssignmentsInput
  }

  export type StudentAssignmentUncheckedCreateWithoutStudentInput = {
    id?: number
    assignment_id: number
  }

  export type StudentAssignmentCreateOrConnectWithoutStudentInput = {
    where: StudentAssignmentWhereUniqueInput
    create: XOR<StudentAssignmentCreateWithoutStudentInput, StudentAssignmentUncheckedCreateWithoutStudentInput>
  }

  export type StudentAssignmentCreateManyStudentInputEnvelope = {
    data: StudentAssignmentCreateManyStudentInput | StudentAssignmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentQuizCreateWithoutStudentInput = {
    quiz: QuizCreateNestedOneWithoutStudentQuizzesInput
  }

  export type StudentQuizUncheckedCreateWithoutStudentInput = {
    id?: number
    quiz_id: number
  }

  export type StudentQuizCreateOrConnectWithoutStudentInput = {
    where: StudentQuizWhereUniqueInput
    create: XOR<StudentQuizCreateWithoutStudentInput, StudentQuizUncheckedCreateWithoutStudentInput>
  }

  export type StudentQuizCreateManyStudentInputEnvelope = {
    data: StudentQuizCreateManyStudentInput | StudentQuizCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudyTimetableCreateWithoutStudentInput = {
    subject: SubjectCreateNestedOneWithoutStudyTimetablesInput
  }

  export type StudyTimetableUncheckedCreateWithoutStudentInput = {
    id?: number
    subject_id: number
  }

  export type StudyTimetableCreateOrConnectWithoutStudentInput = {
    where: StudyTimetableWhereUniqueInput
    create: XOR<StudyTimetableCreateWithoutStudentInput, StudyTimetableUncheckedCreateWithoutStudentInput>
  }

  export type StudyTimetableCreateManyStudentInputEnvelope = {
    data: StudyTimetableCreateManyStudentInput | StudyTimetableCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyScheduleCreateWithoutTeacherInput = {
    class: ClassCreateNestedOneWithoutWeeklySchedulesInput
    subject: SubjectCreateNestedOneWithoutWeeklySchedulesInput
  }

  export type WeeklyScheduleUncheckedCreateWithoutTeacherInput = {
    id?: number
    class_id: number
    subject_id: number
  }

  export type WeeklyScheduleCreateOrConnectWithoutTeacherInput = {
    where: WeeklyScheduleWhereUniqueInput
    create: XOR<WeeklyScheduleCreateWithoutTeacherInput, WeeklyScheduleUncheckedCreateWithoutTeacherInput>
  }

  export type WeeklyScheduleCreateManyTeacherInputEnvelope = {
    data: WeeklyScheduleCreateManyTeacherInput | WeeklyScheduleCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutStudentsInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    teacher?: UserCreateNestedOneWithoutTeacher_classesInput
    questionBanks?: QuestionBankCreateNestedManyWithoutClassInput
    quizzes?: QuizCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutClassInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutTeacherInput, AssignmentUncheckedUpdateWithoutTeacherInput>
    create: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutTeacherInput, AssignmentUncheckedUpdateWithoutTeacherInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutTeacherInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutTeacherInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    id?: IntFilter<"Assignment"> | number
    title?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    teacher_id?: IntFilter<"Assignment"> | number
    class_id?: IntFilter<"Assignment"> | number
    subject_id?: IntFilter<"Assignment"> | number
  }

  export type ClassUpsertWithWhereUniqueWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutTeacherInput, ClassUncheckedUpdateWithoutTeacherInput>
    create: XOR<ClassCreateWithoutTeacherInput, ClassUncheckedCreateWithoutTeacherInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutTeacherInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutTeacherInput, ClassUncheckedUpdateWithoutTeacherInput>
  }

  export type ClassUpdateManyWithWhereWithoutTeacherInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutTeacherInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: IntFilter<"Class"> | number
    name?: StringFilter<"Class"> | string
    class_teacher_id?: IntNullableFilter<"Class"> | number | null
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutTeacherInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutTeacherInput, QuestionBankUncheckedUpdateWithoutTeacherInput>
    create: XOR<QuestionBankCreateWithoutTeacherInput, QuestionBankUncheckedCreateWithoutTeacherInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutTeacherInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutTeacherInput, QuestionBankUncheckedUpdateWithoutTeacherInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutTeacherInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutTeacherInput>
  }

  export type QuestionBankScalarWhereInput = {
    AND?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
    OR?: QuestionBankScalarWhereInput[]
    NOT?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
    id?: IntFilter<"QuestionBank"> | number
    teacher_id?: IntFilter<"QuestionBank"> | number
    subject_id?: IntFilter<"QuestionBank"> | number
    class_id?: IntFilter<"QuestionBank"> | number
  }

  export type ScoreUpsertWithWhereUniqueWithoutStudentInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutStudentInput, ScoreUncheckedUpdateWithoutStudentInput>
    create: XOR<ScoreCreateWithoutStudentInput, ScoreUncheckedCreateWithoutStudentInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutStudentInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutStudentInput, ScoreUncheckedUpdateWithoutStudentInput>
  }

  export type ScoreUpdateManyWithWhereWithoutStudentInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutStudentInput>
  }

  export type ScoreScalarWhereInput = {
    AND?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
    OR?: ScoreScalarWhereInput[]
    NOT?: ScoreScalarWhereInput | ScoreScalarWhereInput[]
    id?: IntFilter<"Score"> | number
    student_id?: IntFilter<"Score"> | number
    subject_id?: IntFilter<"Score"> | number
    marks?: IntFilter<"Score"> | number
  }

  export type StudentAssignmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentAssignmentWhereUniqueInput
    update: XOR<StudentAssignmentUpdateWithoutStudentInput, StudentAssignmentUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentAssignmentCreateWithoutStudentInput, StudentAssignmentUncheckedCreateWithoutStudentInput>
  }

  export type StudentAssignmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentAssignmentWhereUniqueInput
    data: XOR<StudentAssignmentUpdateWithoutStudentInput, StudentAssignmentUncheckedUpdateWithoutStudentInput>
  }

  export type StudentAssignmentUpdateManyWithWhereWithoutStudentInput = {
    where: StudentAssignmentScalarWhereInput
    data: XOR<StudentAssignmentUpdateManyMutationInput, StudentAssignmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentAssignmentScalarWhereInput = {
    AND?: StudentAssignmentScalarWhereInput | StudentAssignmentScalarWhereInput[]
    OR?: StudentAssignmentScalarWhereInput[]
    NOT?: StudentAssignmentScalarWhereInput | StudentAssignmentScalarWhereInput[]
    id?: IntFilter<"StudentAssignment"> | number
    assignment_id?: IntFilter<"StudentAssignment"> | number
    student_id?: IntFilter<"StudentAssignment"> | number
  }

  export type StudentQuizUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentQuizWhereUniqueInput
    update: XOR<StudentQuizUpdateWithoutStudentInput, StudentQuizUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentQuizCreateWithoutStudentInput, StudentQuizUncheckedCreateWithoutStudentInput>
  }

  export type StudentQuizUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentQuizWhereUniqueInput
    data: XOR<StudentQuizUpdateWithoutStudentInput, StudentQuizUncheckedUpdateWithoutStudentInput>
  }

  export type StudentQuizUpdateManyWithWhereWithoutStudentInput = {
    where: StudentQuizScalarWhereInput
    data: XOR<StudentQuizUpdateManyMutationInput, StudentQuizUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentQuizScalarWhereInput = {
    AND?: StudentQuizScalarWhereInput | StudentQuizScalarWhereInput[]
    OR?: StudentQuizScalarWhereInput[]
    NOT?: StudentQuizScalarWhereInput | StudentQuizScalarWhereInput[]
    id?: IntFilter<"StudentQuiz"> | number
    student_id?: IntFilter<"StudentQuiz"> | number
    quiz_id?: IntFilter<"StudentQuiz"> | number
  }

  export type StudyTimetableUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudyTimetableWhereUniqueInput
    update: XOR<StudyTimetableUpdateWithoutStudentInput, StudyTimetableUncheckedUpdateWithoutStudentInput>
    create: XOR<StudyTimetableCreateWithoutStudentInput, StudyTimetableUncheckedCreateWithoutStudentInput>
  }

  export type StudyTimetableUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudyTimetableWhereUniqueInput
    data: XOR<StudyTimetableUpdateWithoutStudentInput, StudyTimetableUncheckedUpdateWithoutStudentInput>
  }

  export type StudyTimetableUpdateManyWithWhereWithoutStudentInput = {
    where: StudyTimetableScalarWhereInput
    data: XOR<StudyTimetableUpdateManyMutationInput, StudyTimetableUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudyTimetableScalarWhereInput = {
    AND?: StudyTimetableScalarWhereInput | StudyTimetableScalarWhereInput[]
    OR?: StudyTimetableScalarWhereInput[]
    NOT?: StudyTimetableScalarWhereInput | StudyTimetableScalarWhereInput[]
    id?: IntFilter<"StudyTimetable"> | number
    student_id?: IntFilter<"StudyTimetable"> | number
    subject_id?: IntFilter<"StudyTimetable"> | number
  }

  export type WeeklyScheduleUpsertWithWhereUniqueWithoutTeacherInput = {
    where: WeeklyScheduleWhereUniqueInput
    update: XOR<WeeklyScheduleUpdateWithoutTeacherInput, WeeklyScheduleUncheckedUpdateWithoutTeacherInput>
    create: XOR<WeeklyScheduleCreateWithoutTeacherInput, WeeklyScheduleUncheckedCreateWithoutTeacherInput>
  }

  export type WeeklyScheduleUpdateWithWhereUniqueWithoutTeacherInput = {
    where: WeeklyScheduleWhereUniqueInput
    data: XOR<WeeklyScheduleUpdateWithoutTeacherInput, WeeklyScheduleUncheckedUpdateWithoutTeacherInput>
  }

  export type WeeklyScheduleUpdateManyWithWhereWithoutTeacherInput = {
    where: WeeklyScheduleScalarWhereInput
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyWithoutTeacherInput>
  }

  export type WeeklyScheduleScalarWhereInput = {
    AND?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
    OR?: WeeklyScheduleScalarWhereInput[]
    NOT?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
    id?: IntFilter<"WeeklySchedule"> | number
    class_id?: IntFilter<"WeeklySchedule"> | number
    teacher_id?: IntFilter<"WeeklySchedule"> | number
    subject_id?: IntFilter<"WeeklySchedule"> | number
  }

  export type ClassUpsertWithWhereUniqueWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateManyWithWhereWithoutStudentsInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutStudentsInput>
  }

  export type AssignmentCreateWithoutClassInput = {
    title: string
    description: string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    subject_id: number
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutClassInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput>
  }

  export type AssignmentCreateManyClassInputEnvelope = {
    data: AssignmentCreateManyClassInput | AssignmentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTeacher_classesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutTeacher_classesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutTeacher_classesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacher_classesInput, UserUncheckedCreateWithoutTeacher_classesInput>
  }

  export type QuestionBankCreateWithoutClassInput = {
    questions?: QuestionCreateNestedManyWithoutQuestion_bankInput
    subject: SubjectCreateNestedOneWithoutQuestionBanksInput
    teacher: UserCreateNestedOneWithoutQuestionBanksInput
    quizzes?: QuizCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankUncheckedCreateWithoutClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankCreateOrConnectWithoutClassInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutClassInput, QuestionBankUncheckedCreateWithoutClassInput>
  }

  export type QuestionBankCreateManyClassInputEnvelope = {
    data: QuestionBankCreateManyClassInput | QuestionBankCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type QuizCreateWithoutClassInput = {
    question_bank: QuestionBankCreateNestedOneWithoutQuizzesInput
    subject: SubjectCreateNestedOneWithoutQuizzesInput
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutClassInput = {
    id?: number
    subject_id: number
    question_bank_id: number
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutClassInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutClassInput, QuizUncheckedCreateWithoutClassInput>
  }

  export type QuizCreateManyClassInputEnvelope = {
    data: QuizCreateManyClassInput | QuizCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyScheduleCreateWithoutClassInput = {
    subject: SubjectCreateNestedOneWithoutWeeklySchedulesInput
    teacher: UserCreateNestedOneWithoutWeeklySchedulesInput
  }

  export type WeeklyScheduleUncheckedCreateWithoutClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
  }

  export type WeeklyScheduleCreateOrConnectWithoutClassInput = {
    where: WeeklyScheduleWhereUniqueInput
    create: XOR<WeeklyScheduleCreateWithoutClassInput, WeeklyScheduleUncheckedCreateWithoutClassInput>
  }

  export type WeeklyScheduleCreateManyClassInputEnvelope = {
    data: WeeklyScheduleCreateManyClassInput | WeeklyScheduleCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStudent_classesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
  }

  export type UserUncheckedCreateWithoutStudent_classesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type UserCreateOrConnectWithoutStudent_classesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudent_classesInput, UserUncheckedCreateWithoutStudent_classesInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutClassInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutClassInput, AssignmentUncheckedUpdateWithoutClassInput>
    create: XOR<AssignmentCreateWithoutClassInput, AssignmentUncheckedCreateWithoutClassInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutClassInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutClassInput, AssignmentUncheckedUpdateWithoutClassInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutClassInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutClassInput>
  }

  export type UserUpsertWithoutTeacher_classesInput = {
    update: XOR<UserUpdateWithoutTeacher_classesInput, UserUncheckedUpdateWithoutTeacher_classesInput>
    create: XOR<UserCreateWithoutTeacher_classesInput, UserUncheckedCreateWithoutTeacher_classesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeacher_classesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeacher_classesInput, UserUncheckedUpdateWithoutTeacher_classesInput>
  }

  export type UserUpdateWithoutTeacher_classesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacher_classesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutClassInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutClassInput, QuestionBankUncheckedUpdateWithoutClassInput>
    create: XOR<QuestionBankCreateWithoutClassInput, QuestionBankUncheckedCreateWithoutClassInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutClassInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutClassInput, QuestionBankUncheckedUpdateWithoutClassInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutClassInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutClassInput>
  }

  export type QuizUpsertWithWhereUniqueWithoutClassInput = {
    where: QuizWhereUniqueInput
    update: XOR<QuizUpdateWithoutClassInput, QuizUncheckedUpdateWithoutClassInput>
    create: XOR<QuizCreateWithoutClassInput, QuizUncheckedCreateWithoutClassInput>
  }

  export type QuizUpdateWithWhereUniqueWithoutClassInput = {
    where: QuizWhereUniqueInput
    data: XOR<QuizUpdateWithoutClassInput, QuizUncheckedUpdateWithoutClassInput>
  }

  export type QuizUpdateManyWithWhereWithoutClassInput = {
    where: QuizScalarWhereInput
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyWithoutClassInput>
  }

  export type QuizScalarWhereInput = {
    AND?: QuizScalarWhereInput | QuizScalarWhereInput[]
    OR?: QuizScalarWhereInput[]
    NOT?: QuizScalarWhereInput | QuizScalarWhereInput[]
    id?: IntFilter<"Quiz"> | number
    class_id?: IntFilter<"Quiz"> | number
    subject_id?: IntFilter<"Quiz"> | number
    question_bank_id?: IntFilter<"Quiz"> | number
  }

  export type WeeklyScheduleUpsertWithWhereUniqueWithoutClassInput = {
    where: WeeklyScheduleWhereUniqueInput
    update: XOR<WeeklyScheduleUpdateWithoutClassInput, WeeklyScheduleUncheckedUpdateWithoutClassInput>
    create: XOR<WeeklyScheduleCreateWithoutClassInput, WeeklyScheduleUncheckedCreateWithoutClassInput>
  }

  export type WeeklyScheduleUpdateWithWhereUniqueWithoutClassInput = {
    where: WeeklyScheduleWhereUniqueInput
    data: XOR<WeeklyScheduleUpdateWithoutClassInput, WeeklyScheduleUncheckedUpdateWithoutClassInput>
  }

  export type WeeklyScheduleUpdateManyWithWhereWithoutClassInput = {
    where: WeeklyScheduleScalarWhereInput
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyWithoutClassInput>
  }

  export type UserUpsertWithWhereUniqueWithoutStudent_classesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStudent_classesInput, UserUncheckedUpdateWithoutStudent_classesInput>
    create: XOR<UserCreateWithoutStudent_classesInput, UserUncheckedCreateWithoutStudent_classesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStudent_classesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStudent_classesInput, UserUncheckedUpdateWithoutStudent_classesInput>
  }

  export type UserUpdateManyWithWhereWithoutStudent_classesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStudent_classesInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roll_no?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
  }

  export type AssignmentCreateWithoutSubjectInput = {
    title: string
    description: string
    class: ClassCreateNestedOneWithoutAssignmentsInput
    teacher: UserCreateNestedOneWithoutAssignmentsInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutSubjectInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutSubjectInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput>
  }

  export type AssignmentCreateManySubjectInputEnvelope = {
    data: AssignmentCreateManySubjectInput | AssignmentCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankCreateWithoutSubjectInput = {
    questions?: QuestionCreateNestedManyWithoutQuestion_bankInput
    class: ClassCreateNestedOneWithoutQuestionBanksInput
    teacher: UserCreateNestedOneWithoutQuestionBanksInput
    quizzes?: QuizCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankUncheckedCreateWithoutSubjectInput = {
    id?: number
    teacher_id: number
    class_id: number
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestion_bankInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankCreateOrConnectWithoutSubjectInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutSubjectInput, QuestionBankUncheckedCreateWithoutSubjectInput>
  }

  export type QuestionBankCreateManySubjectInputEnvelope = {
    data: QuestionBankCreateManySubjectInput | QuestionBankCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type QuizCreateWithoutSubjectInput = {
    class: ClassCreateNestedOneWithoutQuizzesInput
    question_bank: QuestionBankCreateNestedOneWithoutQuizzesInput
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutSubjectInput = {
    id?: number
    class_id: number
    question_bank_id: number
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutSubjectInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutSubjectInput, QuizUncheckedCreateWithoutSubjectInput>
  }

  export type QuizCreateManySubjectInputEnvelope = {
    data: QuizCreateManySubjectInput | QuizCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCreateWithoutSubjectInput = {
    marks: number
    student: UserCreateNestedOneWithoutScoresInput
  }

  export type ScoreUncheckedCreateWithoutSubjectInput = {
    id?: number
    student_id: number
    marks: number
  }

  export type ScoreCreateOrConnectWithoutSubjectInput = {
    where: ScoreWhereUniqueInput
    create: XOR<ScoreCreateWithoutSubjectInput, ScoreUncheckedCreateWithoutSubjectInput>
  }

  export type ScoreCreateManySubjectInputEnvelope = {
    data: ScoreCreateManySubjectInput | ScoreCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type StudyTimetableCreateWithoutSubjectInput = {
    student: UserCreateNestedOneWithoutStudyTimetablesInput
  }

  export type StudyTimetableUncheckedCreateWithoutSubjectInput = {
    id?: number
    student_id: number
  }

  export type StudyTimetableCreateOrConnectWithoutSubjectInput = {
    where: StudyTimetableWhereUniqueInput
    create: XOR<StudyTimetableCreateWithoutSubjectInput, StudyTimetableUncheckedCreateWithoutSubjectInput>
  }

  export type StudyTimetableCreateManySubjectInputEnvelope = {
    data: StudyTimetableCreateManySubjectInput | StudyTimetableCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyScheduleCreateWithoutSubjectInput = {
    class: ClassCreateNestedOneWithoutWeeklySchedulesInput
    teacher: UserCreateNestedOneWithoutWeeklySchedulesInput
  }

  export type WeeklyScheduleUncheckedCreateWithoutSubjectInput = {
    id?: number
    class_id: number
    teacher_id: number
  }

  export type WeeklyScheduleCreateOrConnectWithoutSubjectInput = {
    where: WeeklyScheduleWhereUniqueInput
    create: XOR<WeeklyScheduleCreateWithoutSubjectInput, WeeklyScheduleUncheckedCreateWithoutSubjectInput>
  }

  export type WeeklyScheduleCreateManySubjectInputEnvelope = {
    data: WeeklyScheduleCreateManySubjectInput | WeeklyScheduleCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutSubjectInput, AssignmentUncheckedUpdateWithoutSubjectInput>
    create: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutSubjectInput, AssignmentUncheckedUpdateWithoutSubjectInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutSubjectInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutSubjectInput>
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutSubjectInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutSubjectInput, QuestionBankUncheckedUpdateWithoutSubjectInput>
    create: XOR<QuestionBankCreateWithoutSubjectInput, QuestionBankUncheckedCreateWithoutSubjectInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutSubjectInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutSubjectInput, QuestionBankUncheckedUpdateWithoutSubjectInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutSubjectInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutSubjectInput>
  }

  export type QuizUpsertWithWhereUniqueWithoutSubjectInput = {
    where: QuizWhereUniqueInput
    update: XOR<QuizUpdateWithoutSubjectInput, QuizUncheckedUpdateWithoutSubjectInput>
    create: XOR<QuizCreateWithoutSubjectInput, QuizUncheckedCreateWithoutSubjectInput>
  }

  export type QuizUpdateWithWhereUniqueWithoutSubjectInput = {
    where: QuizWhereUniqueInput
    data: XOR<QuizUpdateWithoutSubjectInput, QuizUncheckedUpdateWithoutSubjectInput>
  }

  export type QuizUpdateManyWithWhereWithoutSubjectInput = {
    where: QuizScalarWhereInput
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyWithoutSubjectInput>
  }

  export type ScoreUpsertWithWhereUniqueWithoutSubjectInput = {
    where: ScoreWhereUniqueInput
    update: XOR<ScoreUpdateWithoutSubjectInput, ScoreUncheckedUpdateWithoutSubjectInput>
    create: XOR<ScoreCreateWithoutSubjectInput, ScoreUncheckedCreateWithoutSubjectInput>
  }

  export type ScoreUpdateWithWhereUniqueWithoutSubjectInput = {
    where: ScoreWhereUniqueInput
    data: XOR<ScoreUpdateWithoutSubjectInput, ScoreUncheckedUpdateWithoutSubjectInput>
  }

  export type ScoreUpdateManyWithWhereWithoutSubjectInput = {
    where: ScoreScalarWhereInput
    data: XOR<ScoreUpdateManyMutationInput, ScoreUncheckedUpdateManyWithoutSubjectInput>
  }

  export type StudyTimetableUpsertWithWhereUniqueWithoutSubjectInput = {
    where: StudyTimetableWhereUniqueInput
    update: XOR<StudyTimetableUpdateWithoutSubjectInput, StudyTimetableUncheckedUpdateWithoutSubjectInput>
    create: XOR<StudyTimetableCreateWithoutSubjectInput, StudyTimetableUncheckedCreateWithoutSubjectInput>
  }

  export type StudyTimetableUpdateWithWhereUniqueWithoutSubjectInput = {
    where: StudyTimetableWhereUniqueInput
    data: XOR<StudyTimetableUpdateWithoutSubjectInput, StudyTimetableUncheckedUpdateWithoutSubjectInput>
  }

  export type StudyTimetableUpdateManyWithWhereWithoutSubjectInput = {
    where: StudyTimetableScalarWhereInput
    data: XOR<StudyTimetableUpdateManyMutationInput, StudyTimetableUncheckedUpdateManyWithoutSubjectInput>
  }

  export type WeeklyScheduleUpsertWithWhereUniqueWithoutSubjectInput = {
    where: WeeklyScheduleWhereUniqueInput
    update: XOR<WeeklyScheduleUpdateWithoutSubjectInput, WeeklyScheduleUncheckedUpdateWithoutSubjectInput>
    create: XOR<WeeklyScheduleCreateWithoutSubjectInput, WeeklyScheduleUncheckedCreateWithoutSubjectInput>
  }

  export type WeeklyScheduleUpdateWithWhereUniqueWithoutSubjectInput = {
    where: WeeklyScheduleWhereUniqueInput
    data: XOR<WeeklyScheduleUpdateWithoutSubjectInput, WeeklyScheduleUncheckedUpdateWithoutSubjectInput>
  }

  export type WeeklyScheduleUpdateManyWithWhereWithoutSubjectInput = {
    where: WeeklyScheduleScalarWhereInput
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyWithoutSubjectInput>
  }

  export type QuestionCreateWithoutQuestion_bankInput = {
    content: string
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutQuestion_bankInput = {
    id?: number
    content: string
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutQuestion_bankInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuestion_bankInput, QuestionUncheckedCreateWithoutQuestion_bankInput>
  }

  export type QuestionCreateManyQuestion_bankInputEnvelope = {
    data: QuestionCreateManyQuestion_bankInput | QuestionCreateManyQuestion_bankInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutQuestionBanksInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    teacher?: UserCreateNestedOneWithoutTeacher_classesInput
    quizzes?: QuizCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutClassInput
    students?: UserCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUncheckedCreateWithoutQuestionBanksInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput
    students?: UserUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassCreateOrConnectWithoutQuestionBanksInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutQuestionBanksInput, ClassUncheckedCreateWithoutQuestionBanksInput>
  }

  export type SubjectCreateWithoutQuestionBanksInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    quizzes?: QuizCreateNestedManyWithoutSubjectInput
    scores?: ScoreCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutQuestionBanksInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutSubjectInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutQuestionBanksInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutQuestionBanksInput, SubjectUncheckedCreateWithoutQuestionBanksInput>
  }

  export type UserCreateWithoutQuestionBanksInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutQuestionBanksInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutQuestionBanksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionBanksInput, UserUncheckedCreateWithoutQuestionBanksInput>
  }

  export type QuizCreateWithoutQuestion_bankInput = {
    class: ClassCreateNestedOneWithoutQuizzesInput
    subject: SubjectCreateNestedOneWithoutQuizzesInput
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutQuestion_bankInput = {
    id?: number
    class_id: number
    subject_id: number
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuizInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutQuestion_bankInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutQuestion_bankInput, QuizUncheckedCreateWithoutQuestion_bankInput>
  }

  export type QuizCreateManyQuestion_bankInputEnvelope = {
    data: QuizCreateManyQuestion_bankInput | QuizCreateManyQuestion_bankInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithWhereUniqueWithoutQuestion_bankInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutQuestion_bankInput, QuestionUncheckedUpdateWithoutQuestion_bankInput>
    create: XOR<QuestionCreateWithoutQuestion_bankInput, QuestionUncheckedCreateWithoutQuestion_bankInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutQuestion_bankInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutQuestion_bankInput, QuestionUncheckedUpdateWithoutQuestion_bankInput>
  }

  export type QuestionUpdateManyWithWhereWithoutQuestion_bankInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuestion_bankInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: IntFilter<"Question"> | number
    content?: StringFilter<"Question"> | string
    question_bank_id?: IntFilter<"Question"> | number
  }

  export type ClassUpsertWithoutQuestionBanksInput = {
    update: XOR<ClassUpdateWithoutQuestionBanksInput, ClassUncheckedUpdateWithoutQuestionBanksInput>
    create: XOR<ClassCreateWithoutQuestionBanksInput, ClassUncheckedCreateWithoutQuestionBanksInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutQuestionBanksInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutQuestionBanksInput, ClassUncheckedUpdateWithoutQuestionBanksInput>
  }

  export type ClassUpdateWithoutQuestionBanksInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    teacher?: UserUpdateOneWithoutTeacher_classesNestedInput
    quizzes?: QuizUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutClassNestedInput
    students?: UserUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateWithoutQuestionBanksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput
    students?: UserUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type SubjectUpsertWithoutQuestionBanksInput = {
    update: XOR<SubjectUpdateWithoutQuestionBanksInput, SubjectUncheckedUpdateWithoutQuestionBanksInput>
    create: XOR<SubjectCreateWithoutQuestionBanksInput, SubjectUncheckedCreateWithoutQuestionBanksInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutQuestionBanksInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutQuestionBanksInput, SubjectUncheckedUpdateWithoutQuestionBanksInput>
  }

  export type SubjectUpdateWithoutQuestionBanksInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutQuestionBanksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type UserUpsertWithoutQuestionBanksInput = {
    update: XOR<UserUpdateWithoutQuestionBanksInput, UserUncheckedUpdateWithoutQuestionBanksInput>
    create: XOR<UserCreateWithoutQuestionBanksInput, UserUncheckedCreateWithoutQuestionBanksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionBanksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionBanksInput, UserUncheckedUpdateWithoutQuestionBanksInput>
  }

  export type UserUpdateWithoutQuestionBanksInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionBanksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type QuizUpsertWithWhereUniqueWithoutQuestion_bankInput = {
    where: QuizWhereUniqueInput
    update: XOR<QuizUpdateWithoutQuestion_bankInput, QuizUncheckedUpdateWithoutQuestion_bankInput>
    create: XOR<QuizCreateWithoutQuestion_bankInput, QuizUncheckedCreateWithoutQuestion_bankInput>
  }

  export type QuizUpdateWithWhereUniqueWithoutQuestion_bankInput = {
    where: QuizWhereUniqueInput
    data: XOR<QuizUpdateWithoutQuestion_bankInput, QuizUncheckedUpdateWithoutQuestion_bankInput>
  }

  export type QuizUpdateManyWithWhereWithoutQuestion_bankInput = {
    where: QuizScalarWhereInput
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyWithoutQuestion_bankInput>
  }

  export type QuestionBankCreateWithoutQuestionsInput = {
    class: ClassCreateNestedOneWithoutQuestionBanksInput
    subject: SubjectCreateNestedOneWithoutQuestionBanksInput
    teacher: UserCreateNestedOneWithoutQuestionBanksInput
    quizzes?: QuizCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankUncheckedCreateWithoutQuestionsInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
    quizzes?: QuizUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankCreateOrConnectWithoutQuestionsInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutQuestionsInput, QuestionBankUncheckedCreateWithoutQuestionsInput>
  }

  export type QuizQuestionCreateWithoutQuestionInput = {
    quiz: QuizCreateNestedOneWithoutQuizQuestionsInput
  }

  export type QuizQuestionUncheckedCreateWithoutQuestionInput = {
    id?: number
    quiz_id: number
  }

  export type QuizQuestionCreateOrConnectWithoutQuestionInput = {
    where: QuizQuestionWhereUniqueInput
    create: XOR<QuizQuestionCreateWithoutQuestionInput, QuizQuestionUncheckedCreateWithoutQuestionInput>
  }

  export type QuizQuestionCreateManyQuestionInputEnvelope = {
    data: QuizQuestionCreateManyQuestionInput | QuizQuestionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankUpsertWithoutQuestionsInput = {
    update: XOR<QuestionBankUpdateWithoutQuestionsInput, QuestionBankUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuestionBankCreateWithoutQuestionsInput, QuestionBankUncheckedCreateWithoutQuestionsInput>
    where?: QuestionBankWhereInput
  }

  export type QuestionBankUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: QuestionBankWhereInput
    data: XOR<QuestionBankUpdateWithoutQuestionsInput, QuestionBankUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionBankUpdateWithoutQuestionsInput = {
    class?: ClassUpdateOneRequiredWithoutQuestionBanksNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuestionBanksNestedInput
    teacher?: UserUpdateOneRequiredWithoutQuestionBanksNestedInput
    quizzes?: QuizUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    quizzes?: QuizUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuizQuestionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuizQuestionWhereUniqueInput
    update: XOR<QuizQuestionUpdateWithoutQuestionInput, QuizQuestionUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuizQuestionCreateWithoutQuestionInput, QuizQuestionUncheckedCreateWithoutQuestionInput>
  }

  export type QuizQuestionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuizQuestionWhereUniqueInput
    data: XOR<QuizQuestionUpdateWithoutQuestionInput, QuizQuestionUncheckedUpdateWithoutQuestionInput>
  }

  export type QuizQuestionUpdateManyWithWhereWithoutQuestionInput = {
    where: QuizQuestionScalarWhereInput
    data: XOR<QuizQuestionUpdateManyMutationInput, QuizQuestionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuizQuestionScalarWhereInput = {
    AND?: QuizQuestionScalarWhereInput | QuizQuestionScalarWhereInput[]
    OR?: QuizQuestionScalarWhereInput[]
    NOT?: QuizQuestionScalarWhereInput | QuizQuestionScalarWhereInput[]
    id?: IntFilter<"QuizQuestion"> | number
    quiz_id?: IntFilter<"QuizQuestion"> | number
    question_id?: IntFilter<"QuizQuestion"> | number
  }

  export type ClassCreateWithoutQuizzesInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    teacher?: UserCreateNestedOneWithoutTeacher_classesInput
    questionBanks?: QuestionBankCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutClassInput
    students?: UserCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUncheckedCreateWithoutQuizzesInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput
    students?: UserUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassCreateOrConnectWithoutQuizzesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutQuizzesInput, ClassUncheckedCreateWithoutQuizzesInput>
  }

  export type QuestionBankCreateWithoutQuizzesInput = {
    questions?: QuestionCreateNestedManyWithoutQuestion_bankInput
    class: ClassCreateNestedOneWithoutQuestionBanksInput
    subject: SubjectCreateNestedOneWithoutQuestionBanksInput
    teacher: UserCreateNestedOneWithoutQuestionBanksInput
  }

  export type QuestionBankUncheckedCreateWithoutQuizzesInput = {
    id?: number
    teacher_id: number
    subject_id: number
    class_id: number
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestion_bankInput
  }

  export type QuestionBankCreateOrConnectWithoutQuizzesInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutQuizzesInput, QuestionBankUncheckedCreateWithoutQuizzesInput>
  }

  export type SubjectCreateWithoutQuizzesInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankCreateNestedManyWithoutSubjectInput
    scores?: ScoreCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutQuizzesInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutSubjectInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutQuizzesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutQuizzesInput, SubjectUncheckedCreateWithoutQuizzesInput>
  }

  export type QuizQuestionCreateWithoutQuizInput = {
    question: QuestionCreateNestedOneWithoutQuizQuestionsInput
  }

  export type QuizQuestionUncheckedCreateWithoutQuizInput = {
    id?: number
    question_id: number
  }

  export type QuizQuestionCreateOrConnectWithoutQuizInput = {
    where: QuizQuestionWhereUniqueInput
    create: XOR<QuizQuestionCreateWithoutQuizInput, QuizQuestionUncheckedCreateWithoutQuizInput>
  }

  export type QuizQuestionCreateManyQuizInputEnvelope = {
    data: QuizQuestionCreateManyQuizInput | QuizQuestionCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type StudentQuizCreateWithoutQuizInput = {
    student: UserCreateNestedOneWithoutStudentQuizzesInput
  }

  export type StudentQuizUncheckedCreateWithoutQuizInput = {
    id?: number
    student_id: number
  }

  export type StudentQuizCreateOrConnectWithoutQuizInput = {
    where: StudentQuizWhereUniqueInput
    create: XOR<StudentQuizCreateWithoutQuizInput, StudentQuizUncheckedCreateWithoutQuizInput>
  }

  export type StudentQuizCreateManyQuizInputEnvelope = {
    data: StudentQuizCreateManyQuizInput | StudentQuizCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutQuizzesInput = {
    update: XOR<ClassUpdateWithoutQuizzesInput, ClassUncheckedUpdateWithoutQuizzesInput>
    create: XOR<ClassCreateWithoutQuizzesInput, ClassUncheckedCreateWithoutQuizzesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutQuizzesInput, ClassUncheckedUpdateWithoutQuizzesInput>
  }

  export type ClassUpdateWithoutQuizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    teacher?: UserUpdateOneWithoutTeacher_classesNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutClassNestedInput
    students?: UserUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput
    students?: UserUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type QuestionBankUpsertWithoutQuizzesInput = {
    update: XOR<QuestionBankUpdateWithoutQuizzesInput, QuestionBankUncheckedUpdateWithoutQuizzesInput>
    create: XOR<QuestionBankCreateWithoutQuizzesInput, QuestionBankUncheckedCreateWithoutQuizzesInput>
    where?: QuestionBankWhereInput
  }

  export type QuestionBankUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: QuestionBankWhereInput
    data: XOR<QuestionBankUpdateWithoutQuizzesInput, QuestionBankUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuestionBankUpdateWithoutQuizzesInput = {
    questions?: QuestionUpdateManyWithoutQuestion_bankNestedInput
    class?: ClassUpdateOneRequiredWithoutQuestionBanksNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuestionBanksNestedInput
    teacher?: UserUpdateOneRequiredWithoutQuestionBanksNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type SubjectUpsertWithoutQuizzesInput = {
    update: XOR<SubjectUpdateWithoutQuizzesInput, SubjectUncheckedUpdateWithoutQuizzesInput>
    create: XOR<SubjectCreateWithoutQuizzesInput, SubjectUncheckedCreateWithoutQuizzesInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutQuizzesInput, SubjectUncheckedUpdateWithoutQuizzesInput>
  }

  export type SubjectUpdateWithoutQuizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type QuizQuestionUpsertWithWhereUniqueWithoutQuizInput = {
    where: QuizQuestionWhereUniqueInput
    update: XOR<QuizQuestionUpdateWithoutQuizInput, QuizQuestionUncheckedUpdateWithoutQuizInput>
    create: XOR<QuizQuestionCreateWithoutQuizInput, QuizQuestionUncheckedCreateWithoutQuizInput>
  }

  export type QuizQuestionUpdateWithWhereUniqueWithoutQuizInput = {
    where: QuizQuestionWhereUniqueInput
    data: XOR<QuizQuestionUpdateWithoutQuizInput, QuizQuestionUncheckedUpdateWithoutQuizInput>
  }

  export type QuizQuestionUpdateManyWithWhereWithoutQuizInput = {
    where: QuizQuestionScalarWhereInput
    data: XOR<QuizQuestionUpdateManyMutationInput, QuizQuestionUncheckedUpdateManyWithoutQuizInput>
  }

  export type StudentQuizUpsertWithWhereUniqueWithoutQuizInput = {
    where: StudentQuizWhereUniqueInput
    update: XOR<StudentQuizUpdateWithoutQuizInput, StudentQuizUncheckedUpdateWithoutQuizInput>
    create: XOR<StudentQuizCreateWithoutQuizInput, StudentQuizUncheckedCreateWithoutQuizInput>
  }

  export type StudentQuizUpdateWithWhereUniqueWithoutQuizInput = {
    where: StudentQuizWhereUniqueInput
    data: XOR<StudentQuizUpdateWithoutQuizInput, StudentQuizUncheckedUpdateWithoutQuizInput>
  }

  export type StudentQuizUpdateManyWithWhereWithoutQuizInput = {
    where: StudentQuizScalarWhereInput
    data: XOR<StudentQuizUpdateManyMutationInput, StudentQuizUncheckedUpdateManyWithoutQuizInput>
  }

  export type QuestionCreateWithoutQuizQuestionsInput = {
    content: string
    question_bank: QuestionBankCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutQuizQuestionsInput = {
    id?: number
    content: string
    question_bank_id: number
  }

  export type QuestionCreateOrConnectWithoutQuizQuestionsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuizQuestionsInput, QuestionUncheckedCreateWithoutQuizQuestionsInput>
  }

  export type QuizCreateWithoutQuizQuestionsInput = {
    class: ClassCreateNestedOneWithoutQuizzesInput
    question_bank: QuestionBankCreateNestedOneWithoutQuizzesInput
    subject: SubjectCreateNestedOneWithoutQuizzesInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutQuizQuestionsInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutQuizQuestionsInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutQuizQuestionsInput, QuizUncheckedCreateWithoutQuizQuestionsInput>
  }

  export type QuestionUpsertWithoutQuizQuestionsInput = {
    update: XOR<QuestionUpdateWithoutQuizQuestionsInput, QuestionUncheckedUpdateWithoutQuizQuestionsInput>
    create: XOR<QuestionCreateWithoutQuizQuestionsInput, QuestionUncheckedCreateWithoutQuizQuestionsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutQuizQuestionsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutQuizQuestionsInput, QuestionUncheckedUpdateWithoutQuizQuestionsInput>
  }

  export type QuestionUpdateWithoutQuizQuestionsInput = {
    content?: StringFieldUpdateOperationsInput | string
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuizQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizUpsertWithoutQuizQuestionsInput = {
    update: XOR<QuizUpdateWithoutQuizQuestionsInput, QuizUncheckedUpdateWithoutQuizQuestionsInput>
    create: XOR<QuizCreateWithoutQuizQuestionsInput, QuizUncheckedCreateWithoutQuizQuestionsInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutQuizQuestionsInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutQuizQuestionsInput, QuizUncheckedUpdateWithoutQuizQuestionsInput>
  }

  export type QuizUpdateWithoutQuizQuestionsInput = {
    class?: ClassUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuizzesNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutQuizQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizCreateWithoutStudentQuizzesInput = {
    class: ClassCreateNestedOneWithoutQuizzesInput
    question_bank: QuestionBankCreateNestedOneWithoutQuizzesInput
    subject: SubjectCreateNestedOneWithoutQuizzesInput
    quizQuestions?: QuizQuestionCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutStudentQuizzesInput = {
    id?: number
    class_id: number
    subject_id: number
    question_bank_id: number
    quizQuestions?: QuizQuestionUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutStudentQuizzesInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutStudentQuizzesInput, QuizUncheckedCreateWithoutStudentQuizzesInput>
  }

  export type UserCreateWithoutStudentQuizzesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutStudentQuizzesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutStudentQuizzesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentQuizzesInput, UserUncheckedCreateWithoutStudentQuizzesInput>
  }

  export type QuizUpsertWithoutStudentQuizzesInput = {
    update: XOR<QuizUpdateWithoutStudentQuizzesInput, QuizUncheckedUpdateWithoutStudentQuizzesInput>
    create: XOR<QuizCreateWithoutStudentQuizzesInput, QuizUncheckedCreateWithoutStudentQuizzesInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutStudentQuizzesInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutStudentQuizzesInput, QuizUncheckedUpdateWithoutStudentQuizzesInput>
  }

  export type QuizUpdateWithoutStudentQuizzesInput = {
    class?: ClassUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuizzesNestedInput
    quizQuestions?: QuizQuestionUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutStudentQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type UserUpsertWithoutStudentQuizzesInput = {
    update: XOR<UserUpdateWithoutStudentQuizzesInput, UserUncheckedUpdateWithoutStudentQuizzesInput>
    create: XOR<UserCreateWithoutStudentQuizzesInput, UserUncheckedCreateWithoutStudentQuizzesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentQuizzesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentQuizzesInput, UserUncheckedUpdateWithoutStudentQuizzesInput>
  }

  export type UserUpdateWithoutStudentQuizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type ClassCreateWithoutAssignmentsInput = {
    name: string
    teacher?: UserCreateNestedOneWithoutTeacher_classesInput
    questionBanks?: QuestionBankCreateNestedManyWithoutClassInput
    quizzes?: QuizCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutClassInput
    students?: UserCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUncheckedCreateWithoutAssignmentsInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutClassInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutClassInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutClassInput
    students?: UserUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassCreateOrConnectWithoutAssignmentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
  }

  export type SubjectCreateWithoutAssignmentsInput = {
    name: string
    questionBanks?: QuestionBankCreateNestedManyWithoutSubjectInput
    quizzes?: QuizCreateNestedManyWithoutSubjectInput
    scores?: ScoreCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutAssignmentsInput = {
    id?: number
    name: string
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutSubjectInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutAssignmentsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutAssignmentsInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutAssignmentsInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
  }

  export type StudentAssignmentCreateWithoutAssignmentInput = {
    student: UserCreateNestedOneWithoutStudentAssignmentsInput
  }

  export type StudentAssignmentUncheckedCreateWithoutAssignmentInput = {
    id?: number
    student_id: number
  }

  export type StudentAssignmentCreateOrConnectWithoutAssignmentInput = {
    where: StudentAssignmentWhereUniqueInput
    create: XOR<StudentAssignmentCreateWithoutAssignmentInput, StudentAssignmentUncheckedCreateWithoutAssignmentInput>
  }

  export type StudentAssignmentCreateManyAssignmentInputEnvelope = {
    data: StudentAssignmentCreateManyAssignmentInput | StudentAssignmentCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutAssignmentsInput = {
    update: XOR<ClassUpdateWithoutAssignmentsInput, ClassUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<ClassCreateWithoutAssignmentsInput, ClassUncheckedCreateWithoutAssignmentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAssignmentsInput, ClassUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ClassUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    teacher?: UserUpdateOneWithoutTeacher_classesNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutClassNestedInput
    quizzes?: QuizUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutClassNestedInput
    students?: UserUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateWithoutAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput
    students?: UserUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type SubjectUpsertWithoutAssignmentsInput = {
    update: XOR<SubjectUpdateWithoutAssignmentsInput, SubjectUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutAssignmentsInput, SubjectUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SubjectUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    questionBanks?: QuestionBankUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type UserUpsertWithoutAssignmentsInput = {
    update: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<UserCreateWithoutAssignmentsInput, UserUncheckedCreateWithoutAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsInput, UserUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateWithoutAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type StudentAssignmentUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: StudentAssignmentWhereUniqueInput
    update: XOR<StudentAssignmentUpdateWithoutAssignmentInput, StudentAssignmentUncheckedUpdateWithoutAssignmentInput>
    create: XOR<StudentAssignmentCreateWithoutAssignmentInput, StudentAssignmentUncheckedCreateWithoutAssignmentInput>
  }

  export type StudentAssignmentUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: StudentAssignmentWhereUniqueInput
    data: XOR<StudentAssignmentUpdateWithoutAssignmentInput, StudentAssignmentUncheckedUpdateWithoutAssignmentInput>
  }

  export type StudentAssignmentUpdateManyWithWhereWithoutAssignmentInput = {
    where: StudentAssignmentScalarWhereInput
    data: XOR<StudentAssignmentUpdateManyMutationInput, StudentAssignmentUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type AssignmentCreateWithoutStudentAssignmentsInput = {
    title: string
    description: string
    class: ClassCreateNestedOneWithoutAssignmentsInput
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    teacher: UserCreateNestedOneWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutStudentAssignmentsInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
    subject_id: number
  }

  export type AssignmentCreateOrConnectWithoutStudentAssignmentsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutStudentAssignmentsInput, AssignmentUncheckedCreateWithoutStudentAssignmentsInput>
  }

  export type UserCreateWithoutStudentAssignmentsInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutStudentAssignmentsInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutStudentAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentAssignmentsInput, UserUncheckedCreateWithoutStudentAssignmentsInput>
  }

  export type AssignmentUpsertWithoutStudentAssignmentsInput = {
    update: XOR<AssignmentUpdateWithoutStudentAssignmentsInput, AssignmentUncheckedUpdateWithoutStudentAssignmentsInput>
    create: XOR<AssignmentCreateWithoutStudentAssignmentsInput, AssignmentUncheckedCreateWithoutStudentAssignmentsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutStudentAssignmentsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutStudentAssignmentsInput, AssignmentUncheckedUpdateWithoutStudentAssignmentsInput>
  }

  export type AssignmentUpdateWithoutStudentAssignmentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutStudentAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutStudentAssignmentsInput = {
    update: XOR<UserUpdateWithoutStudentAssignmentsInput, UserUncheckedUpdateWithoutStudentAssignmentsInput>
    create: XOR<UserCreateWithoutStudentAssignmentsInput, UserUncheckedCreateWithoutStudentAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentAssignmentsInput, UserUncheckedUpdateWithoutStudentAssignmentsInput>
  }

  export type UserUpdateWithoutStudentAssignmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type ClassCreateWithoutWeeklySchedulesInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutClassInput
    teacher?: UserCreateNestedOneWithoutTeacher_classesInput
    questionBanks?: QuestionBankCreateNestedManyWithoutClassInput
    quizzes?: QuizCreateNestedManyWithoutClassInput
    students?: UserCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassUncheckedCreateWithoutWeeklySchedulesInput = {
    id?: number
    name: string
    class_teacher_id?: number | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutClassInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutClassInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutClassInput
    students?: UserUncheckedCreateNestedManyWithoutStudent_classesInput
  }

  export type ClassCreateOrConnectWithoutWeeklySchedulesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutWeeklySchedulesInput, ClassUncheckedCreateWithoutWeeklySchedulesInput>
  }

  export type SubjectCreateWithoutWeeklySchedulesInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankCreateNestedManyWithoutSubjectInput
    quizzes?: QuizCreateNestedManyWithoutSubjectInput
    scores?: ScoreCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutWeeklySchedulesInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutSubjectInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutWeeklySchedulesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutWeeklySchedulesInput, SubjectUncheckedCreateWithoutWeeklySchedulesInput>
  }

  export type UserCreateWithoutWeeklySchedulesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutWeeklySchedulesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutWeeklySchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeeklySchedulesInput, UserUncheckedCreateWithoutWeeklySchedulesInput>
  }

  export type ClassUpsertWithoutWeeklySchedulesInput = {
    update: XOR<ClassUpdateWithoutWeeklySchedulesInput, ClassUncheckedUpdateWithoutWeeklySchedulesInput>
    create: XOR<ClassCreateWithoutWeeklySchedulesInput, ClassUncheckedCreateWithoutWeeklySchedulesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutWeeklySchedulesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutWeeklySchedulesInput, ClassUncheckedUpdateWithoutWeeklySchedulesInput>
  }

  export type ClassUpdateWithoutWeeklySchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    teacher?: UserUpdateOneWithoutTeacher_classesNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutClassNestedInput
    quizzes?: QuizUpdateManyWithoutClassNestedInput
    students?: UserUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateWithoutWeeklySchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutClassNestedInput
    students?: UserUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type SubjectUpsertWithoutWeeklySchedulesInput = {
    update: XOR<SubjectUpdateWithoutWeeklySchedulesInput, SubjectUncheckedUpdateWithoutWeeklySchedulesInput>
    create: XOR<SubjectCreateWithoutWeeklySchedulesInput, SubjectUncheckedCreateWithoutWeeklySchedulesInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutWeeklySchedulesInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutWeeklySchedulesInput, SubjectUncheckedUpdateWithoutWeeklySchedulesInput>
  }

  export type SubjectUpdateWithoutWeeklySchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutWeeklySchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type UserUpsertWithoutWeeklySchedulesInput = {
    update: XOR<UserUpdateWithoutWeeklySchedulesInput, UserUncheckedUpdateWithoutWeeklySchedulesInput>
    create: XOR<UserCreateWithoutWeeklySchedulesInput, UserUncheckedCreateWithoutWeeklySchedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeeklySchedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeeklySchedulesInput, UserUncheckedUpdateWithoutWeeklySchedulesInput>
  }

  export type UserUpdateWithoutWeeklySchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutWeeklySchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type UserCreateWithoutStudyTimetablesInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    scores?: ScoreCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutStudyTimetablesInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    scores?: ScoreUncheckedCreateNestedManyWithoutStudentInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutStudyTimetablesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudyTimetablesInput, UserUncheckedCreateWithoutStudyTimetablesInput>
  }

  export type SubjectCreateWithoutStudyTimetablesInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankCreateNestedManyWithoutSubjectInput
    quizzes?: QuizCreateNestedManyWithoutSubjectInput
    scores?: ScoreCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutStudyTimetablesInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutSubjectInput
    scores?: ScoreUncheckedCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutStudyTimetablesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutStudyTimetablesInput, SubjectUncheckedCreateWithoutStudyTimetablesInput>
  }

  export type UserUpsertWithoutStudyTimetablesInput = {
    update: XOR<UserUpdateWithoutStudyTimetablesInput, UserUncheckedUpdateWithoutStudyTimetablesInput>
    create: XOR<UserCreateWithoutStudyTimetablesInput, UserUncheckedCreateWithoutStudyTimetablesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudyTimetablesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudyTimetablesInput, UserUncheckedUpdateWithoutStudyTimetablesInput>
  }

  export type UserUpdateWithoutStudyTimetablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutStudyTimetablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type SubjectUpsertWithoutStudyTimetablesInput = {
    update: XOR<SubjectUpdateWithoutStudyTimetablesInput, SubjectUncheckedUpdateWithoutStudyTimetablesInput>
    create: XOR<SubjectCreateWithoutStudyTimetablesInput, SubjectUncheckedCreateWithoutStudyTimetablesInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutStudyTimetablesInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutStudyTimetablesInput, SubjectUncheckedUpdateWithoutStudyTimetablesInput>
  }

  export type SubjectUpdateWithoutStudyTimetablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutStudyTimetablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutSubjectNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type UserCreateWithoutScoresInput = {
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankCreateNestedManyWithoutTeacherInput
    studentAssignments?: StudentAssignmentCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutTeacherInput
    student_classes?: ClassCreateNestedManyWithoutStudentsInput
  }

  export type UserUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    email: string
    password: string
    roll_no: string
    role: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    teacher_classes?: ClassUncheckedCreateNestedManyWithoutTeacherInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutTeacherInput
    studentAssignments?: StudentAssignmentUncheckedCreateNestedManyWithoutStudentInput
    studentQuizzes?: StudentQuizUncheckedCreateNestedManyWithoutStudentInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutStudentInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutTeacherInput
    student_classes?: ClassUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type UserCreateOrConnectWithoutScoresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
  }

  export type SubjectCreateWithoutScoresInput = {
    name: string
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankCreateNestedManyWithoutSubjectInput
    quizzes?: QuizCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutScoresInput = {
    id?: number
    name: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    questionBanks?: QuestionBankUncheckedCreateNestedManyWithoutSubjectInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutSubjectInput
    studyTimetables?: StudyTimetableUncheckedCreateNestedManyWithoutSubjectInput
    weeklySchedules?: WeeklyScheduleUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutScoresInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutScoresInput, SubjectUncheckedCreateWithoutScoresInput>
  }

  export type UserUpsertWithoutScoresInput = {
    update: XOR<UserUpdateWithoutScoresInput, UserUncheckedUpdateWithoutScoresInput>
    create: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScoresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScoresInput, UserUncheckedUpdateWithoutScoresInput>
  }

  export type UserUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUpdateManyWithoutStudentsNestedInput
  }

  export type UserUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    student_classes?: ClassUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type SubjectUpsertWithoutScoresInput = {
    update: XOR<SubjectUpdateWithoutScoresInput, SubjectUncheckedUpdateWithoutScoresInput>
    create: XOR<SubjectCreateWithoutScoresInput, SubjectUncheckedCreateWithoutScoresInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutScoresInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutScoresInput, SubjectUncheckedUpdateWithoutScoresInput>
  }

  export type SubjectUpdateWithoutScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutSubjectNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutSubjectNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutSubjectNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type AssignmentCreateManyTeacherInput = {
    id?: number
    title: string
    description: string
    class_id: number
    subject_id: number
  }

  export type ClassCreateManyTeacherInput = {
    id?: number
    name: string
  }

  export type QuestionBankCreateManyTeacherInput = {
    id?: number
    subject_id: number
    class_id: number
  }

  export type ScoreCreateManyStudentInput = {
    id?: number
    subject_id: number
    marks: number
  }

  export type StudentAssignmentCreateManyStudentInput = {
    id?: number
    assignment_id: number
  }

  export type StudentQuizCreateManyStudentInput = {
    id?: number
    quiz_id: number
  }

  export type StudyTimetableCreateManyStudentInput = {
    id?: number
    subject_id: number
  }

  export type WeeklyScheduleCreateManyTeacherInput = {
    id?: number
    class_id: number
    subject_id: number
  }

  export type AssignmentUpdateWithoutTeacherInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type ClassUpdateWithoutTeacherInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutClassNestedInput
    quizzes?: QuizUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutClassNestedInput
    students?: UserUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput
    students?: UserUncheckedUpdateManyWithoutStudent_classesNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionBankUpdateWithoutTeacherInput = {
    questions?: QuestionUpdateManyWithoutQuestion_bankNestedInput
    class?: ClassUpdateOneRequiredWithoutQuestionBanksNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuestionBanksNestedInput
    quizzes?: QuizUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreUpdateWithoutStudentInput = {
    marks?: IntFieldUpdateOperationsInput | number
    subject?: SubjectUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAssignmentUpdateWithoutStudentInput = {
    assignment?: AssignmentUpdateOneRequiredWithoutStudentAssignmentsNestedInput
  }

  export type StudentAssignmentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAssignmentUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    assignment_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentQuizUpdateWithoutStudentInput = {
    quiz?: QuizUpdateOneRequiredWithoutStudentQuizzesNestedInput
  }

  export type StudentQuizUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentQuizUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudyTimetableUpdateWithoutStudentInput = {
    subject?: SubjectUpdateOneRequiredWithoutStudyTimetablesNestedInput
  }

  export type StudyTimetableUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudyTimetableUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleUpdateWithoutTeacherInput = {
    class?: ClassUpdateOneRequiredWithoutWeeklySchedulesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutWeeklySchedulesNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type ClassUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutClassNestedInput
    teacher?: UserUpdateOneWithoutTeacher_classesNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutClassNestedInput
    quizzes?: QuizUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
    assignments?: AssignmentUncheckedUpdateManyWithoutClassNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutClassNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutClassNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    class_teacher_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AssignmentCreateManyClassInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    subject_id: number
  }

  export type QuestionBankCreateManyClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
  }

  export type QuizCreateManyClassInput = {
    id?: number
    subject_id: number
    question_bank_id: number
  }

  export type WeeklyScheduleCreateManyClassInput = {
    id?: number
    teacher_id: number
    subject_id: number
  }

  export type AssignmentUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionBankUpdateWithoutClassInput = {
    questions?: QuestionUpdateManyWithoutQuestion_bankNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuestionBanksNestedInput
    teacher?: UserUpdateOneRequiredWithoutQuestionBanksNestedInput
    quizzes?: QuizUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizUpdateWithoutClassInput = {
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuizzesNestedInput
    quizQuestions?: QuizQuestionUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleUpdateWithoutClassInput = {
    subject?: SubjectUpdateOneRequiredWithoutWeeklySchedulesNestedInput
    teacher?: UserUpdateOneRequiredWithoutWeeklySchedulesNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutStudent_classesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUpdateManyWithoutTeacherNestedInput
  }

  export type UserUncheckedUpdateWithoutStudent_classesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    teacher_classes?: ClassUncheckedUpdateManyWithoutTeacherNestedInput
    questionBanks?: QuestionBankUncheckedUpdateManyWithoutTeacherNestedInput
    scores?: ScoreUncheckedUpdateManyWithoutStudentNestedInput
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutStudentNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutStudentNestedInput
    studyTimetables?: StudyTimetableUncheckedUpdateManyWithoutStudentNestedInput
    weeklySchedules?: WeeklyScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStudent_classesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roll_no?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentCreateManySubjectInput = {
    id?: number
    title: string
    description: string
    teacher_id: number
    class_id: number
  }

  export type QuestionBankCreateManySubjectInput = {
    id?: number
    teacher_id: number
    class_id: number
  }

  export type QuizCreateManySubjectInput = {
    id?: number
    class_id: number
    question_bank_id: number
  }

  export type ScoreCreateManySubjectInput = {
    id?: number
    student_id: number
    marks: number
  }

  export type StudyTimetableCreateManySubjectInput = {
    id?: number
    student_id: number
  }

  export type WeeklyScheduleCreateManySubjectInput = {
    id?: number
    class_id: number
    teacher_id: number
  }

  export type AssignmentUpdateWithoutSubjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: UserUpdateOneRequiredWithoutAssignmentsNestedInput
    studentAssignments?: StudentAssignmentUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    studentAssignments?: StudentAssignmentUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionBankUpdateWithoutSubjectInput = {
    questions?: QuestionUpdateManyWithoutQuestion_bankNestedInput
    class?: ClassUpdateOneRequiredWithoutQuestionBanksNestedInput
    teacher?: UserUpdateOneRequiredWithoutQuestionBanksNestedInput
    quizzes?: QuizUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutQuestion_bankNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutQuestion_bankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizUpdateWithoutSubjectInput = {
    class?: ClassUpdateOneRequiredWithoutQuizzesNestedInput
    question_bank?: QuestionBankUpdateOneRequiredWithoutQuizzesNestedInput
    quizQuestions?: QuizQuestionUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    question_bank_id?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreUpdateWithoutSubjectInput = {
    marks?: IntFieldUpdateOperationsInput | number
    student?: UserUpdateOneRequiredWithoutScoresNestedInput
  }

  export type ScoreUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type ScoreUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    marks?: IntFieldUpdateOperationsInput | number
  }

  export type StudyTimetableUpdateWithoutSubjectInput = {
    student?: UserUpdateOneRequiredWithoutStudyTimetablesNestedInput
  }

  export type StudyTimetableUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudyTimetableUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleUpdateWithoutSubjectInput = {
    class?: ClassUpdateOneRequiredWithoutWeeklySchedulesNestedInput
    teacher?: UserUpdateOneRequiredWithoutWeeklySchedulesNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    teacher_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionCreateManyQuestion_bankInput = {
    id?: number
    content: string
  }

  export type QuizCreateManyQuestion_bankInput = {
    id?: number
    class_id: number
    subject_id: number
  }

  export type QuestionUpdateWithoutQuestion_bankInput = {
    content?: StringFieldUpdateOperationsInput | string
    quizQuestions?: QuizQuestionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type QuizUpdateWithoutQuestion_bankInput = {
    class?: ClassUpdateOneRequiredWithoutQuizzesNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuizzesNestedInput
    quizQuestions?: QuizQuestionUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    quizQuestions?: QuizQuestionUncheckedUpdateManyWithoutQuizNestedInput
    studentQuizzes?: StudentQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateManyWithoutQuestion_bankInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizQuestionCreateManyQuestionInput = {
    id?: number
    quiz_id: number
  }

  export type QuizQuestionUpdateWithoutQuestionInput = {
    quiz?: QuizUpdateOneRequiredWithoutQuizQuestionsNestedInput
  }

  export type QuizQuestionUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizQuestionUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizQuestionCreateManyQuizInput = {
    id?: number
    question_id: number
  }

  export type StudentQuizCreateManyQuizInput = {
    id?: number
    student_id: number
  }

  export type QuizQuestionUpdateWithoutQuizInput = {
    question?: QuestionUpdateOneRequiredWithoutQuizQuestionsNestedInput
  }

  export type QuizQuestionUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type QuizQuestionUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentQuizUpdateWithoutQuizInput = {
    student?: UserUpdateOneRequiredWithoutStudentQuizzesNestedInput
  }

  export type StudentQuizUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentQuizUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAssignmentCreateManyAssignmentInput = {
    id?: number
    student_id: number
  }

  export type StudentAssignmentUpdateWithoutAssignmentInput = {
    student?: UserUpdateOneRequiredWithoutStudentAssignmentsNestedInput
  }

  export type StudentAssignmentUncheckedUpdateWithoutAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentAssignmentUncheckedUpdateManyWithoutAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}