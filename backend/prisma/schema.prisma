generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id         Int                 @id @default(autoincrement())
  name            String
  email           String              @unique
  password        String
  rollNo          String              @unique // Added rollNo field with unique constraint
  role            String              // Student, Teacher, Admin
  questionBanks   QuestionBank[]      // Opposite relation for QuestionBank.teacher
  studentQuizzes  StudentQuiz[]       // Opposite relation for StudentQuiz.student
  assignments     StudentAssignment[]  // Opposite relation for StudentAssignment.student
  weeklySchedules WeeklySchedule[]    // Opposite relation for WeeklySchedule.teacher
  studyTimetables StudyTimetable[]    // Opposite relation for StudyTimetable.student
  scores          Score[]              // Opposite relation for Score.student
  studentClasses  Class[]              @relation("StudentClass") // Updated name
  teacherClasses  Class[]              @relation("ClassTeacher") // Explicit teacher relation
  Assignment      Assignment[]         // Associated assignments
}

model Class {
  id               Int              @id @default(autoincrement())
  name             String
  students         User[]           @relation("StudentClass")
  teacher          User?            @relation("ClassTeacher", fields: [class_teacher_id], references: [user_id])
  class_teacher_id Int?
  questionBanks    QuestionBank[] // Opposite relation for QuestionBank.class
  quizzes          Quiz[] // Opposite relation for Quiz.class
  assignments      Assignment[] // Opposite relation for Assignment.class
  weeklySchedules  WeeklySchedule[] // Opposite relation for WeeklySchedule.class
}

model Subject {
  id              Int              @id @default(autoincrement())
  name            String
  questionBanks   QuestionBank[] // Opposite relation for QuestionBank.subject
  quizzes         Quiz[] // Opposite relation for Quiz.subject
  studyTimetables StudyTimetable[] // Opposite relation for StudyTimetable.subject
  weeklySchedules WeeklySchedule[] // Opposite relation for WeeklySchedule.subject
  scores          Score[] // Opposite relation for Score.subject
  Assignment      Assignment[]
}

model QuestionBank {
  id         Int        @id @default(autoincrement())
  teacher_id Int
  subject_id Int
  class_id   Int
  teacher    User       @relation(fields: [teacher_id], references: [user_id])
  subject    Subject    @relation(fields: [subject_id], references: [id])
  class      Class      @relation(fields: [class_id], references: [id])
  questions  Question[] // Opposite relation for Question.questionBank
  quizzes    Quiz[] // Opposite relation for Quiz.questionBank
}

model Question {
  id              Int            @id @default(autoincrement())
  content         String
  questionBank_id Int
  questionBank    QuestionBank   @relation(fields: [questionBank_id], references: [id])
  quizQuestions   QuizQuestion[] // Opposite relation for QuizQuestion.question
}

model Quiz {
  id               Int            @id @default(autoincrement())
  class_id         Int
  subject_id       Int
  question_bank_id Int
  class            Class          @relation(fields: [class_id], references: [id])
  subject          Subject        @relation(fields: [subject_id], references: [id])
  questionBank     QuestionBank   @relation(fields: [question_bank_id], references: [id])
  quizQuestions    QuizQuestion[] // Opposite relation for QuizQuestion.quiz
  studentQuizzes   StudentQuiz[] // Opposite relation for StudentQuiz.quiz
}

model QuizQuestion {
  id          Int      @id @default(autoincrement())
  quiz_id     Int
  question_id Int
  quiz        Quiz     @relation(fields: [quiz_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])
}

model StudentQuiz {
  id         Int  @id @default(autoincrement())
  student_id Int
  quiz_id    Int
  student    User @relation(fields: [student_id], references: [user_id])
  quiz       Quiz @relation(fields: [quiz_id], references: [id])
}

model Assignment {
  id                 Int                 @id @default(autoincrement())
  title              String
  description        String
  teacher_id         Int
  class_id           Int
  subject_id         Int
  teacher            User                @relation(fields: [teacher_id], references: [user_id])
  class              Class               @relation(fields: [class_id], references: [id])
  subject            Subject             @relation(fields: [subject_id], references: [id])
  studentAssignments StudentAssignment[] // Opposite relation for StudentAssignment.assignment
}

model StudentAssignment {
  id            Int        @id @default(autoincrement())
  assignment_id Int
  student_id    Int
  assignment    Assignment @relation(fields: [assignment_id], references: [id])
  student       User       @relation(fields: [student_id], references: [user_id])
}

model WeeklySchedule {
  id         Int     @id @default(autoincrement())
  class_id   Int
  teacher_id Int
  subject_id Int
  class      Class   @relation(fields: [class_id], references: [id])
  teacher    User    @relation(fields: [teacher_id], references: [user_id])
  subject    Subject @relation(fields: [subject_id], references: [id])
}

model StudyTimetable {
  id         Int     @id @default(autoincrement())
  student_id Int
  subject_id Int
  student    User    @relation(fields: [student_id], references: [user_id])
  subject    Subject @relation(fields: [subject_id], references: [id])
}

model Score {
  id         Int     @id @default(autoincrement())
  student_id Int
  subject_id Int
  marks      Int
  student    User    @relation(fields: [student_id], references: [user_id])
  subject    Subject @relation(fields: [subject_id], references: [id])
}
