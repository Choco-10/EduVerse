generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  roll_no           String             @unique
  role              String
  assignments       Assignment[]
  teacher_classes   Class[]            @relation("class_teacher")
  questionBanks     QuestionBank[]
  scores            Score[]
  studentAssignments StudentAssignment[]
  studentQuizzes    StudentQuiz[]
  studyTimetables   StudyTimetable[]
  weeklySchedules   WeeklySchedule[]
  student_classes   Class[]            @relation("student_class")
}

model Class {
  id               Int               @id @default(autoincrement())
  name             String
  class_teacher_id Int?
  assignments      Assignment[]
  teacher          User?             @relation("class_teacher", fields: [class_teacher_id], references: [id])
  questionBanks    QuestionBank[]
  quizzes          Quiz[]
  weeklySchedules  WeeklySchedule[]
  students         User[]            @relation("student_class")
}

model Subject {
  id              Int               @id @default(autoincrement())
  name            String
  assignments     Assignment[]
  questionBanks   QuestionBank[]
  quizzes         Quiz[]
  scores          Score[]
  studyTimetables StudyTimetable[]
  weeklySchedules WeeklySchedule[]
}

model QuestionBank {
  id         Int        @id @default(autoincrement())
  teacher_id Int
  subject_id Int
  class_id   Int
  questions  Question[]
  class      Class      @relation(fields: [class_id], references: [id])
  subject    Subject    @relation(fields: [subject_id], references: [id])
  teacher    User       @relation(fields: [teacher_id], references: [id])
  quizzes    Quiz[]
}

model Question {
  id             Int            @id @default(autoincrement())
  content        String
  question_bank_id Int
  question_bank  QuestionBank   @relation(fields: [question_bank_id], references: [id])
  quizQuestions  QuizQuestion[]
}

model Quiz {
  id               Int             @id @default(autoincrement())
  class_id         Int
  subject_id       Int
  question_bank_id Int
  class            Class           @relation(fields: [class_id], references: [id])
  question_bank    QuestionBank    @relation(fields: [question_bank_id], references: [id])
  subject          Subject         @relation(fields: [subject_id], references: [id])
  quizQuestions    QuizQuestion[]
  studentQuizzes   StudentQuiz[]
}

model QuizQuestion {
  id          Int      @id @default(autoincrement())
  quiz_id     Int
  question_id Int
  question    Question @relation(fields: [question_id], references: [id])
  quiz        Quiz     @relation(fields: [quiz_id], references: [id])
}

model StudentQuiz {
  id         Int   @id @default(autoincrement())
  student_id Int
  quiz_id    Int
  quiz       Quiz  @relation(fields: [quiz_id], references: [id])
  student    User  @relation(fields: [student_id], references: [id])
}

model Assignment {
  id                 Int                 @id @default(autoincrement())
  title              String
  description        String
  teacher_id         Int
  class_id           Int
  subject_id         Int
  class              Class               @relation(fields: [class_id], references: [id])
  subject            Subject             @relation(fields: [subject_id], references: [id])
  teacher            User                @relation(fields: [teacher_id], references: [id])
  studentAssignments StudentAssignment[]
}

model StudentAssignment {
  id            Int         @id @default(autoincrement())
  assignment_id Int
  student_id    Int
  assignment    Assignment  @relation(fields: [assignment_id], references: [id])
  student       User        @relation(fields: [student_id], references: [id])
}

model WeeklySchedule {
  id         Int      @id @default(autoincrement())
  class_id   Int
  teacher_id Int
  subject_id Int
  class      Class    @relation(fields: [class_id], references: [id])
  subject    Subject  @relation(fields: [subject_id], references: [id])
  teacher    User     @relation(fields: [teacher_id], references: [id])
}

model StudyTimetable {
  id         Int      @id @default(autoincrement())
  student_id Int
  subject_id Int
  student    User     @relation(fields: [student_id], references: [id])
  subject    Subject  @relation(fields: [subject_id], references: [id])
}

model Score {
  id         Int      @id @default(autoincrement())
  student_id Int
  subject_id Int
  marks      Int
  student    User     @relation(fields: [student_id], references: [id])
  subject    Subject  @relation(fields: [subject_id], references: [id])
}
