generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  roll_no         String            @unique
  role            String
  assignments     assignments[]
  teacher_classes classes[]         @relation("class_teacher")
  question_banks  question_banks[]
  scores          scores[]
  student_assignments student_assignments[]
  student_quizzes student_quizzes[]
  study_timetables study_timetables[]
  weekly_schedules weekly_schedules[]
  student_classes classes[]         @relation("student_class")
}

model classes {
  id               Int              @id @default(autoincrement())
  name             String
  class_teacher_id Int?
  assignments      assignments[]
  teacher          users?           @relation("class_teacher", fields: [class_teacher_id], references: [id])
  question_banks   question_banks[]
  quizzes          quizzes[]
  weekly_schedules weekly_schedules[]
  students         users[]          @relation("student_class")
}

model subjects {
  id              Int               @id @default(autoincrement())
  name            String
  assignments     assignments[]
  question_banks  question_banks[]
  quizzes         quizzes[]
  scores          scores[]
  study_timetables study_timetables[]
  weekly_schedules weekly_schedules[]
}

model question_banks {
  id         Int       @id @default(autoincrement())
  teacher_id Int
  subject_id Int
  class_id   Int
  questions  questions[]
  class      classes   @relation(fields: [class_id], references: [id])
  subject    subjects  @relation(fields: [subject_id], references: [id])
  teacher    users     @relation(fields: [teacher_id], references: [id])
  quizzes    quizzes[]
}

model questions {
  id              Int             @id @default(autoincrement())
  content         String
  question_bank_id Int
  question_bank   question_banks  @relation(fields: [question_bank_id], references: [id])
  quiz_questions  quiz_questions[]
}

model quizzes {
  id               Int             @id @default(autoincrement())
  class_id         Int
  subject_id       Int
  question_bank_id Int
  class            classes         @relation(fields: [class_id], references: [id])
  question_bank    question_banks  @relation(fields: [question_bank_id], references: [id])
  subject          subjects        @relation(fields: [subject_id], references: [id])
  quiz_questions   quiz_questions[]
  student_quizzes  student_quizzes[]
}

model quiz_questions {
  id          Int       @id @default(autoincrement())
  quiz_id     Int
  question_id Int
  question    questions @relation(fields: [question_id], references: [id])
  quiz        quizzes   @relation(fields: [quiz_id], references: [id])
}

model student_quizzes {
  id         Int   @id @default(autoincrement())
  student_id Int
  quiz_id    Int
  quiz       quizzes @relation(fields: [quiz_id], references: [id])
  student    users   @relation(fields: [student_id], references: [id])
}

model assignments {
  id                 Int                 @id @default(autoincrement())
  title              String
  description        String
  teacher_id         Int
  class_id           Int
  subject_id         Int
  class              classes             @relation(fields: [class_id], references: [id])
  subject            subjects            @relation(fields: [subject_id], references: [id])
  teacher            users               @relation(fields: [teacher_id], references: [id])
  student_assignments student_assignments[]
}

model student_assignments {
  id            Int         @id @default(autoincrement())
  assignment_id Int
  student_id    Int
  assignment    assignments @relation(fields: [assignment_id], references: [id])
  student       users       @relation(fields: [student_id], references: [id])
}

model weekly_schedules {
  id         Int      @id @default(autoincrement())
  class_id   Int
  teacher_id Int
  subject_id Int
  class      classes  @relation(fields: [class_id], references: [id])
  subject    subjects @relation(fields: [subject_id], references: [id])
  teacher    users    @relation(fields: [teacher_id], references: [id])
}

model study_timetables {
  id         Int      @id @default(autoincrement())
  student_id Int
  subject_id Int
  student    users    @relation(fields: [student_id], references: [id])
  subject    subjects @relation(fields: [subject_id], references: [id])
}

model scores {
  id         Int      @id @default(autoincrement())
  student_id Int
  subject_id Int
  marks      Int
  student    users    @relation(fields: [student_id], references: [id])
  subject    subjects @relation(fields: [subject_id], references: [id])
}
